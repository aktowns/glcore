// Generated by jextract

package au.ikx.glcore;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class ShaderC {

    ShaderC() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("shaderc"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int __GLIBC_USE_C2X_STRTOL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return __GLIBC_USE_C2X_STRTOL;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)39L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 39
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int _BITS_STDINT_LEAST_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_LEAST_H 1
     * }
     */
    public static int _BITS_STDINT_LEAST_H() {
        return _BITS_STDINT_LEAST_H;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = ShaderC.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = ShaderC.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = ShaderC.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = ShaderC.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = ShaderC.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = ShaderC.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = ShaderC.C_LONG;
    private static final int shaderc_target_env_vulkan = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_target_env_vulkan = 0
     * }
     */
    public static int shaderc_target_env_vulkan() {
        return shaderc_target_env_vulkan;
    }
    private static final int shaderc_target_env_opengl = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_target_env_opengl = 1
     * }
     */
    public static int shaderc_target_env_opengl() {
        return shaderc_target_env_opengl;
    }
    private static final int shaderc_target_env_opengl_compat = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_target_env_opengl_compat = 2
     * }
     */
    public static int shaderc_target_env_opengl_compat() {
        return shaderc_target_env_opengl_compat;
    }
    private static final int shaderc_target_env_webgpu = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_target_env_webgpu = 3
     * }
     */
    public static int shaderc_target_env_webgpu() {
        return shaderc_target_env_webgpu;
    }
    private static final int shaderc_target_env_default = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_target_env_default = 0
     * }
     */
    public static int shaderc_target_env_default() {
        return shaderc_target_env_default;
    }
    private static final int shaderc_env_version_vulkan_1_0 = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_env_version_vulkan_1_0 = 4194304
     * }
     */
    public static int shaderc_env_version_vulkan_1_0() {
        return shaderc_env_version_vulkan_1_0;
    }
    private static final int shaderc_env_version_vulkan_1_1 = (int)4198400L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_env_version_vulkan_1_1 = 4198400
     * }
     */
    public static int shaderc_env_version_vulkan_1_1() {
        return shaderc_env_version_vulkan_1_1;
    }
    private static final int shaderc_env_version_vulkan_1_2 = (int)4202496L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_env_version_vulkan_1_2 = 4202496
     * }
     */
    public static int shaderc_env_version_vulkan_1_2() {
        return shaderc_env_version_vulkan_1_2;
    }
    private static final int shaderc_env_version_vulkan_1_3 = (int)4206592L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_env_version_vulkan_1_3 = 4206592
     * }
     */
    public static int shaderc_env_version_vulkan_1_3() {
        return shaderc_env_version_vulkan_1_3;
    }
    private static final int shaderc_env_version_opengl_4_5 = (int)450L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_env_version_opengl_4_5 = 450
     * }
     */
    public static int shaderc_env_version_opengl_4_5() {
        return shaderc_env_version_opengl_4_5;
    }
    private static final int shaderc_env_version_webgpu = (int)451L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_env_version_webgpu = 451
     * }
     */
    public static int shaderc_env_version_webgpu() {
        return shaderc_env_version_webgpu;
    }
    private static final int shaderc_spirv_version_1_0 = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_spirv_version_1_0 = 65536
     * }
     */
    public static int shaderc_spirv_version_1_0() {
        return shaderc_spirv_version_1_0;
    }
    private static final int shaderc_spirv_version_1_1 = (int)65792L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_spirv_version_1_1 = 65792
     * }
     */
    public static int shaderc_spirv_version_1_1() {
        return shaderc_spirv_version_1_1;
    }
    private static final int shaderc_spirv_version_1_2 = (int)66048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_spirv_version_1_2 = 66048
     * }
     */
    public static int shaderc_spirv_version_1_2() {
        return shaderc_spirv_version_1_2;
    }
    private static final int shaderc_spirv_version_1_3 = (int)66304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_spirv_version_1_3 = 66304
     * }
     */
    public static int shaderc_spirv_version_1_3() {
        return shaderc_spirv_version_1_3;
    }
    private static final int shaderc_spirv_version_1_4 = (int)66560L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_spirv_version_1_4 = 66560
     * }
     */
    public static int shaderc_spirv_version_1_4() {
        return shaderc_spirv_version_1_4;
    }
    private static final int shaderc_spirv_version_1_5 = (int)66816L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_spirv_version_1_5 = 66816
     * }
     */
    public static int shaderc_spirv_version_1_5() {
        return shaderc_spirv_version_1_5;
    }
    private static final int shaderc_spirv_version_1_6 = (int)67072L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_spirv_version_1_6 = 67072
     * }
     */
    public static int shaderc_spirv_version_1_6() {
        return shaderc_spirv_version_1_6;
    }
    private static final int shaderc_compilation_status_success = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_success = 0
     * }
     */
    public static int shaderc_compilation_status_success() {
        return shaderc_compilation_status_success;
    }
    private static final int shaderc_compilation_status_invalid_stage = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_invalid_stage = 1
     * }
     */
    public static int shaderc_compilation_status_invalid_stage() {
        return shaderc_compilation_status_invalid_stage;
    }
    private static final int shaderc_compilation_status_compilation_error = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_compilation_error = 2
     * }
     */
    public static int shaderc_compilation_status_compilation_error() {
        return shaderc_compilation_status_compilation_error;
    }
    private static final int shaderc_compilation_status_internal_error = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_internal_error = 3
     * }
     */
    public static int shaderc_compilation_status_internal_error() {
        return shaderc_compilation_status_internal_error;
    }
    private static final int shaderc_compilation_status_null_result_object = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_null_result_object = 4
     * }
     */
    public static int shaderc_compilation_status_null_result_object() {
        return shaderc_compilation_status_null_result_object;
    }
    private static final int shaderc_compilation_status_invalid_assembly = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_invalid_assembly = 5
     * }
     */
    public static int shaderc_compilation_status_invalid_assembly() {
        return shaderc_compilation_status_invalid_assembly;
    }
    private static final int shaderc_compilation_status_validation_error = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_validation_error = 6
     * }
     */
    public static int shaderc_compilation_status_validation_error() {
        return shaderc_compilation_status_validation_error;
    }
    private static final int shaderc_compilation_status_transformation_error = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_transformation_error = 7
     * }
     */
    public static int shaderc_compilation_status_transformation_error() {
        return shaderc_compilation_status_transformation_error;
    }
    private static final int shaderc_compilation_status_configuration_error = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compilation_status_configuration_error = 8
     * }
     */
    public static int shaderc_compilation_status_configuration_error() {
        return shaderc_compilation_status_configuration_error;
    }
    private static final int shaderc_source_language_glsl = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_source_language_glsl = 0
     * }
     */
    public static int shaderc_source_language_glsl() {
        return shaderc_source_language_glsl;
    }
    private static final int shaderc_source_language_hlsl = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_source_language_hlsl = 1
     * }
     */
    public static int shaderc_source_language_hlsl() {
        return shaderc_source_language_hlsl;
    }
    private static final int shaderc_vertex_shader = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_vertex_shader = 0
     * }
     */
    public static int shaderc_vertex_shader() {
        return shaderc_vertex_shader;
    }
    private static final int shaderc_fragment_shader = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_fragment_shader = 1
     * }
     */
    public static int shaderc_fragment_shader() {
        return shaderc_fragment_shader;
    }
    private static final int shaderc_compute_shader = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_compute_shader = 2
     * }
     */
    public static int shaderc_compute_shader() {
        return shaderc_compute_shader;
    }
    private static final int shaderc_geometry_shader = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_geometry_shader = 3
     * }
     */
    public static int shaderc_geometry_shader() {
        return shaderc_geometry_shader;
    }
    private static final int shaderc_tess_control_shader = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_tess_control_shader = 4
     * }
     */
    public static int shaderc_tess_control_shader() {
        return shaderc_tess_control_shader;
    }
    private static final int shaderc_tess_evaluation_shader = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_tess_evaluation_shader = 5
     * }
     */
    public static int shaderc_tess_evaluation_shader() {
        return shaderc_tess_evaluation_shader;
    }
    private static final int shaderc_glsl_vertex_shader = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_vertex_shader = 0
     * }
     */
    public static int shaderc_glsl_vertex_shader() {
        return shaderc_glsl_vertex_shader;
    }
    private static final int shaderc_glsl_fragment_shader = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_fragment_shader = 1
     * }
     */
    public static int shaderc_glsl_fragment_shader() {
        return shaderc_glsl_fragment_shader;
    }
    private static final int shaderc_glsl_compute_shader = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_compute_shader = 2
     * }
     */
    public static int shaderc_glsl_compute_shader() {
        return shaderc_glsl_compute_shader;
    }
    private static final int shaderc_glsl_geometry_shader = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_geometry_shader = 3
     * }
     */
    public static int shaderc_glsl_geometry_shader() {
        return shaderc_glsl_geometry_shader;
    }
    private static final int shaderc_glsl_tess_control_shader = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_tess_control_shader = 4
     * }
     */
    public static int shaderc_glsl_tess_control_shader() {
        return shaderc_glsl_tess_control_shader;
    }
    private static final int shaderc_glsl_tess_evaluation_shader = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_tess_evaluation_shader = 5
     * }
     */
    public static int shaderc_glsl_tess_evaluation_shader() {
        return shaderc_glsl_tess_evaluation_shader;
    }
    private static final int shaderc_glsl_infer_from_source = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_infer_from_source = 6
     * }
     */
    public static int shaderc_glsl_infer_from_source() {
        return shaderc_glsl_infer_from_source;
    }
    private static final int shaderc_glsl_default_vertex_shader = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_vertex_shader = 7
     * }
     */
    public static int shaderc_glsl_default_vertex_shader() {
        return shaderc_glsl_default_vertex_shader;
    }
    private static final int shaderc_glsl_default_fragment_shader = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_fragment_shader = 8
     * }
     */
    public static int shaderc_glsl_default_fragment_shader() {
        return shaderc_glsl_default_fragment_shader;
    }
    private static final int shaderc_glsl_default_compute_shader = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_compute_shader = 9
     * }
     */
    public static int shaderc_glsl_default_compute_shader() {
        return shaderc_glsl_default_compute_shader;
    }
    private static final int shaderc_glsl_default_geometry_shader = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_geometry_shader = 10
     * }
     */
    public static int shaderc_glsl_default_geometry_shader() {
        return shaderc_glsl_default_geometry_shader;
    }
    private static final int shaderc_glsl_default_tess_control_shader = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_tess_control_shader = 11
     * }
     */
    public static int shaderc_glsl_default_tess_control_shader() {
        return shaderc_glsl_default_tess_control_shader;
    }
    private static final int shaderc_glsl_default_tess_evaluation_shader = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_tess_evaluation_shader = 12
     * }
     */
    public static int shaderc_glsl_default_tess_evaluation_shader() {
        return shaderc_glsl_default_tess_evaluation_shader;
    }
    private static final int shaderc_spirv_assembly = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_spirv_assembly = 13
     * }
     */
    public static int shaderc_spirv_assembly() {
        return shaderc_spirv_assembly;
    }
    private static final int shaderc_raygen_shader = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_raygen_shader = 14
     * }
     */
    public static int shaderc_raygen_shader() {
        return shaderc_raygen_shader;
    }
    private static final int shaderc_anyhit_shader = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_anyhit_shader = 15
     * }
     */
    public static int shaderc_anyhit_shader() {
        return shaderc_anyhit_shader;
    }
    private static final int shaderc_closesthit_shader = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_closesthit_shader = 16
     * }
     */
    public static int shaderc_closesthit_shader() {
        return shaderc_closesthit_shader;
    }
    private static final int shaderc_miss_shader = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_miss_shader = 17
     * }
     */
    public static int shaderc_miss_shader() {
        return shaderc_miss_shader;
    }
    private static final int shaderc_intersection_shader = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_intersection_shader = 18
     * }
     */
    public static int shaderc_intersection_shader() {
        return shaderc_intersection_shader;
    }
    private static final int shaderc_callable_shader = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_callable_shader = 19
     * }
     */
    public static int shaderc_callable_shader() {
        return shaderc_callable_shader;
    }
    private static final int shaderc_glsl_raygen_shader = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_raygen_shader = 14
     * }
     */
    public static int shaderc_glsl_raygen_shader() {
        return shaderc_glsl_raygen_shader;
    }
    private static final int shaderc_glsl_anyhit_shader = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_anyhit_shader = 15
     * }
     */
    public static int shaderc_glsl_anyhit_shader() {
        return shaderc_glsl_anyhit_shader;
    }
    private static final int shaderc_glsl_closesthit_shader = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_closesthit_shader = 16
     * }
     */
    public static int shaderc_glsl_closesthit_shader() {
        return shaderc_glsl_closesthit_shader;
    }
    private static final int shaderc_glsl_miss_shader = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_miss_shader = 17
     * }
     */
    public static int shaderc_glsl_miss_shader() {
        return shaderc_glsl_miss_shader;
    }
    private static final int shaderc_glsl_intersection_shader = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_intersection_shader = 18
     * }
     */
    public static int shaderc_glsl_intersection_shader() {
        return shaderc_glsl_intersection_shader;
    }
    private static final int shaderc_glsl_callable_shader = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_callable_shader = 19
     * }
     */
    public static int shaderc_glsl_callable_shader() {
        return shaderc_glsl_callable_shader;
    }
    private static final int shaderc_glsl_default_raygen_shader = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_raygen_shader = 20
     * }
     */
    public static int shaderc_glsl_default_raygen_shader() {
        return shaderc_glsl_default_raygen_shader;
    }
    private static final int shaderc_glsl_default_anyhit_shader = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_anyhit_shader = 21
     * }
     */
    public static int shaderc_glsl_default_anyhit_shader() {
        return shaderc_glsl_default_anyhit_shader;
    }
    private static final int shaderc_glsl_default_closesthit_shader = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_closesthit_shader = 22
     * }
     */
    public static int shaderc_glsl_default_closesthit_shader() {
        return shaderc_glsl_default_closesthit_shader;
    }
    private static final int shaderc_glsl_default_miss_shader = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_miss_shader = 23
     * }
     */
    public static int shaderc_glsl_default_miss_shader() {
        return shaderc_glsl_default_miss_shader;
    }
    private static final int shaderc_glsl_default_intersection_shader = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_intersection_shader = 24
     * }
     */
    public static int shaderc_glsl_default_intersection_shader() {
        return shaderc_glsl_default_intersection_shader;
    }
    private static final int shaderc_glsl_default_callable_shader = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_callable_shader = 25
     * }
     */
    public static int shaderc_glsl_default_callable_shader() {
        return shaderc_glsl_default_callable_shader;
    }
    private static final int shaderc_task_shader = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_task_shader = 26
     * }
     */
    public static int shaderc_task_shader() {
        return shaderc_task_shader;
    }
    private static final int shaderc_mesh_shader = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_mesh_shader = 27
     * }
     */
    public static int shaderc_mesh_shader() {
        return shaderc_mesh_shader;
    }
    private static final int shaderc_glsl_task_shader = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_task_shader = 26
     * }
     */
    public static int shaderc_glsl_task_shader() {
        return shaderc_glsl_task_shader;
    }
    private static final int shaderc_glsl_mesh_shader = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_mesh_shader = 27
     * }
     */
    public static int shaderc_glsl_mesh_shader() {
        return shaderc_glsl_mesh_shader;
    }
    private static final int shaderc_glsl_default_task_shader = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_task_shader = 28
     * }
     */
    public static int shaderc_glsl_default_task_shader() {
        return shaderc_glsl_default_task_shader;
    }
    private static final int shaderc_glsl_default_mesh_shader = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_glsl_default_mesh_shader = 29
     * }
     */
    public static int shaderc_glsl_default_mesh_shader() {
        return shaderc_glsl_default_mesh_shader;
    }
    private static final int shaderc_profile_none = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_profile_none = 0
     * }
     */
    public static int shaderc_profile_none() {
        return shaderc_profile_none;
    }
    private static final int shaderc_profile_core = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_profile_core = 1
     * }
     */
    public static int shaderc_profile_core() {
        return shaderc_profile_core;
    }
    private static final int shaderc_profile_compatibility = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_profile_compatibility = 2
     * }
     */
    public static int shaderc_profile_compatibility() {
        return shaderc_profile_compatibility;
    }
    private static final int shaderc_profile_es = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_profile_es = 3
     * }
     */
    public static int shaderc_profile_es() {
        return shaderc_profile_es;
    }
    private static final int shaderc_optimization_level_zero = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_optimization_level_zero = 0
     * }
     */
    public static int shaderc_optimization_level_zero() {
        return shaderc_optimization_level_zero;
    }
    private static final int shaderc_optimization_level_size = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_optimization_level_size = 1
     * }
     */
    public static int shaderc_optimization_level_size() {
        return shaderc_optimization_level_size;
    }
    private static final int shaderc_optimization_level_performance = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_optimization_level_performance = 2
     * }
     */
    public static int shaderc_optimization_level_performance() {
        return shaderc_optimization_level_performance;
    }
    private static final int shaderc_limit_max_lights = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_lights = 0
     * }
     */
    public static int shaderc_limit_max_lights() {
        return shaderc_limit_max_lights;
    }
    private static final int shaderc_limit_max_clip_planes = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_clip_planes = 1
     * }
     */
    public static int shaderc_limit_max_clip_planes() {
        return shaderc_limit_max_clip_planes;
    }
    private static final int shaderc_limit_max_texture_units = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_texture_units = 2
     * }
     */
    public static int shaderc_limit_max_texture_units() {
        return shaderc_limit_max_texture_units;
    }
    private static final int shaderc_limit_max_texture_coords = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_texture_coords = 3
     * }
     */
    public static int shaderc_limit_max_texture_coords() {
        return shaderc_limit_max_texture_coords;
    }
    private static final int shaderc_limit_max_vertex_attribs = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_attribs = 4
     * }
     */
    public static int shaderc_limit_max_vertex_attribs() {
        return shaderc_limit_max_vertex_attribs;
    }
    private static final int shaderc_limit_max_vertex_uniform_components = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_uniform_components = 5
     * }
     */
    public static int shaderc_limit_max_vertex_uniform_components() {
        return shaderc_limit_max_vertex_uniform_components;
    }
    private static final int shaderc_limit_max_varying_floats = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_varying_floats = 6
     * }
     */
    public static int shaderc_limit_max_varying_floats() {
        return shaderc_limit_max_varying_floats;
    }
    private static final int shaderc_limit_max_vertex_texture_image_units = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_texture_image_units = 7
     * }
     */
    public static int shaderc_limit_max_vertex_texture_image_units() {
        return shaderc_limit_max_vertex_texture_image_units;
    }
    private static final int shaderc_limit_max_combined_texture_image_units = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_combined_texture_image_units = 8
     * }
     */
    public static int shaderc_limit_max_combined_texture_image_units() {
        return shaderc_limit_max_combined_texture_image_units;
    }
    private static final int shaderc_limit_max_texture_image_units = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_texture_image_units = 9
     * }
     */
    public static int shaderc_limit_max_texture_image_units() {
        return shaderc_limit_max_texture_image_units;
    }
    private static final int shaderc_limit_max_fragment_uniform_components = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_fragment_uniform_components = 10
     * }
     */
    public static int shaderc_limit_max_fragment_uniform_components() {
        return shaderc_limit_max_fragment_uniform_components;
    }
    private static final int shaderc_limit_max_draw_buffers = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_draw_buffers = 11
     * }
     */
    public static int shaderc_limit_max_draw_buffers() {
        return shaderc_limit_max_draw_buffers;
    }
    private static final int shaderc_limit_max_vertex_uniform_vectors = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_uniform_vectors = 12
     * }
     */
    public static int shaderc_limit_max_vertex_uniform_vectors() {
        return shaderc_limit_max_vertex_uniform_vectors;
    }
    private static final int shaderc_limit_max_varying_vectors = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_varying_vectors = 13
     * }
     */
    public static int shaderc_limit_max_varying_vectors() {
        return shaderc_limit_max_varying_vectors;
    }
    private static final int shaderc_limit_max_fragment_uniform_vectors = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_fragment_uniform_vectors = 14
     * }
     */
    public static int shaderc_limit_max_fragment_uniform_vectors() {
        return shaderc_limit_max_fragment_uniform_vectors;
    }
    private static final int shaderc_limit_max_vertex_output_vectors = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_output_vectors = 15
     * }
     */
    public static int shaderc_limit_max_vertex_output_vectors() {
        return shaderc_limit_max_vertex_output_vectors;
    }
    private static final int shaderc_limit_max_fragment_input_vectors = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_fragment_input_vectors = 16
     * }
     */
    public static int shaderc_limit_max_fragment_input_vectors() {
        return shaderc_limit_max_fragment_input_vectors;
    }
    private static final int shaderc_limit_min_program_texel_offset = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_min_program_texel_offset = 17
     * }
     */
    public static int shaderc_limit_min_program_texel_offset() {
        return shaderc_limit_min_program_texel_offset;
    }
    private static final int shaderc_limit_max_program_texel_offset = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_program_texel_offset = 18
     * }
     */
    public static int shaderc_limit_max_program_texel_offset() {
        return shaderc_limit_max_program_texel_offset;
    }
    private static final int shaderc_limit_max_clip_distances = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_clip_distances = 19
     * }
     */
    public static int shaderc_limit_max_clip_distances() {
        return shaderc_limit_max_clip_distances;
    }
    private static final int shaderc_limit_max_compute_work_group_count_x = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_work_group_count_x = 20
     * }
     */
    public static int shaderc_limit_max_compute_work_group_count_x() {
        return shaderc_limit_max_compute_work_group_count_x;
    }
    private static final int shaderc_limit_max_compute_work_group_count_y = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_work_group_count_y = 21
     * }
     */
    public static int shaderc_limit_max_compute_work_group_count_y() {
        return shaderc_limit_max_compute_work_group_count_y;
    }
    private static final int shaderc_limit_max_compute_work_group_count_z = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_work_group_count_z = 22
     * }
     */
    public static int shaderc_limit_max_compute_work_group_count_z() {
        return shaderc_limit_max_compute_work_group_count_z;
    }
    private static final int shaderc_limit_max_compute_work_group_size_x = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_work_group_size_x = 23
     * }
     */
    public static int shaderc_limit_max_compute_work_group_size_x() {
        return shaderc_limit_max_compute_work_group_size_x;
    }
    private static final int shaderc_limit_max_compute_work_group_size_y = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_work_group_size_y = 24
     * }
     */
    public static int shaderc_limit_max_compute_work_group_size_y() {
        return shaderc_limit_max_compute_work_group_size_y;
    }
    private static final int shaderc_limit_max_compute_work_group_size_z = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_work_group_size_z = 25
     * }
     */
    public static int shaderc_limit_max_compute_work_group_size_z() {
        return shaderc_limit_max_compute_work_group_size_z;
    }
    private static final int shaderc_limit_max_compute_uniform_components = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_uniform_components = 26
     * }
     */
    public static int shaderc_limit_max_compute_uniform_components() {
        return shaderc_limit_max_compute_uniform_components;
    }
    private static final int shaderc_limit_max_compute_texture_image_units = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_texture_image_units = 27
     * }
     */
    public static int shaderc_limit_max_compute_texture_image_units() {
        return shaderc_limit_max_compute_texture_image_units;
    }
    private static final int shaderc_limit_max_compute_image_uniforms = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_image_uniforms = 28
     * }
     */
    public static int shaderc_limit_max_compute_image_uniforms() {
        return shaderc_limit_max_compute_image_uniforms;
    }
    private static final int shaderc_limit_max_compute_atomic_counters = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_atomic_counters = 29
     * }
     */
    public static int shaderc_limit_max_compute_atomic_counters() {
        return shaderc_limit_max_compute_atomic_counters;
    }
    private static final int shaderc_limit_max_compute_atomic_counter_buffers = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_compute_atomic_counter_buffers = 30
     * }
     */
    public static int shaderc_limit_max_compute_atomic_counter_buffers() {
        return shaderc_limit_max_compute_atomic_counter_buffers;
    }
    private static final int shaderc_limit_max_varying_components = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_varying_components = 31
     * }
     */
    public static int shaderc_limit_max_varying_components() {
        return shaderc_limit_max_varying_components;
    }
    private static final int shaderc_limit_max_vertex_output_components = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_output_components = 32
     * }
     */
    public static int shaderc_limit_max_vertex_output_components() {
        return shaderc_limit_max_vertex_output_components;
    }
    private static final int shaderc_limit_max_geometry_input_components = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_input_components = 33
     * }
     */
    public static int shaderc_limit_max_geometry_input_components() {
        return shaderc_limit_max_geometry_input_components;
    }
    private static final int shaderc_limit_max_geometry_output_components = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_output_components = 34
     * }
     */
    public static int shaderc_limit_max_geometry_output_components() {
        return shaderc_limit_max_geometry_output_components;
    }
    private static final int shaderc_limit_max_fragment_input_components = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_fragment_input_components = 35
     * }
     */
    public static int shaderc_limit_max_fragment_input_components() {
        return shaderc_limit_max_fragment_input_components;
    }
    private static final int shaderc_limit_max_image_units = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_image_units = 36
     * }
     */
    public static int shaderc_limit_max_image_units() {
        return shaderc_limit_max_image_units;
    }
    private static final int shaderc_limit_max_combined_image_units_and_fragment_outputs = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_combined_image_units_and_fragment_outputs = 37
     * }
     */
    public static int shaderc_limit_max_combined_image_units_and_fragment_outputs() {
        return shaderc_limit_max_combined_image_units_and_fragment_outputs;
    }
    private static final int shaderc_limit_max_combined_shader_output_resources = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_combined_shader_output_resources = 38
     * }
     */
    public static int shaderc_limit_max_combined_shader_output_resources() {
        return shaderc_limit_max_combined_shader_output_resources;
    }
    private static final int shaderc_limit_max_image_samples = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_image_samples = 39
     * }
     */
    public static int shaderc_limit_max_image_samples() {
        return shaderc_limit_max_image_samples;
    }
    private static final int shaderc_limit_max_vertex_image_uniforms = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_image_uniforms = 40
     * }
     */
    public static int shaderc_limit_max_vertex_image_uniforms() {
        return shaderc_limit_max_vertex_image_uniforms;
    }
    private static final int shaderc_limit_max_tess_control_image_uniforms = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_control_image_uniforms = 41
     * }
     */
    public static int shaderc_limit_max_tess_control_image_uniforms() {
        return shaderc_limit_max_tess_control_image_uniforms;
    }
    private static final int shaderc_limit_max_tess_evaluation_image_uniforms = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_evaluation_image_uniforms = 42
     * }
     */
    public static int shaderc_limit_max_tess_evaluation_image_uniforms() {
        return shaderc_limit_max_tess_evaluation_image_uniforms;
    }
    private static final int shaderc_limit_max_geometry_image_uniforms = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_image_uniforms = 43
     * }
     */
    public static int shaderc_limit_max_geometry_image_uniforms() {
        return shaderc_limit_max_geometry_image_uniforms;
    }
    private static final int shaderc_limit_max_fragment_image_uniforms = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_fragment_image_uniforms = 44
     * }
     */
    public static int shaderc_limit_max_fragment_image_uniforms() {
        return shaderc_limit_max_fragment_image_uniforms;
    }
    private static final int shaderc_limit_max_combined_image_uniforms = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_combined_image_uniforms = 45
     * }
     */
    public static int shaderc_limit_max_combined_image_uniforms() {
        return shaderc_limit_max_combined_image_uniforms;
    }
    private static final int shaderc_limit_max_geometry_texture_image_units = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_texture_image_units = 46
     * }
     */
    public static int shaderc_limit_max_geometry_texture_image_units() {
        return shaderc_limit_max_geometry_texture_image_units;
    }
    private static final int shaderc_limit_max_geometry_output_vertices = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_output_vertices = 47
     * }
     */
    public static int shaderc_limit_max_geometry_output_vertices() {
        return shaderc_limit_max_geometry_output_vertices;
    }
    private static final int shaderc_limit_max_geometry_total_output_components = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_total_output_components = 48
     * }
     */
    public static int shaderc_limit_max_geometry_total_output_components() {
        return shaderc_limit_max_geometry_total_output_components;
    }
    private static final int shaderc_limit_max_geometry_uniform_components = (int)49L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_uniform_components = 49
     * }
     */
    public static int shaderc_limit_max_geometry_uniform_components() {
        return shaderc_limit_max_geometry_uniform_components;
    }
    private static final int shaderc_limit_max_geometry_varying_components = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_varying_components = 50
     * }
     */
    public static int shaderc_limit_max_geometry_varying_components() {
        return shaderc_limit_max_geometry_varying_components;
    }
    private static final int shaderc_limit_max_tess_control_input_components = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_control_input_components = 51
     * }
     */
    public static int shaderc_limit_max_tess_control_input_components() {
        return shaderc_limit_max_tess_control_input_components;
    }
    private static final int shaderc_limit_max_tess_control_output_components = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_control_output_components = 52
     * }
     */
    public static int shaderc_limit_max_tess_control_output_components() {
        return shaderc_limit_max_tess_control_output_components;
    }
    private static final int shaderc_limit_max_tess_control_texture_image_units = (int)53L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_control_texture_image_units = 53
     * }
     */
    public static int shaderc_limit_max_tess_control_texture_image_units() {
        return shaderc_limit_max_tess_control_texture_image_units;
    }
    private static final int shaderc_limit_max_tess_control_uniform_components = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_control_uniform_components = 54
     * }
     */
    public static int shaderc_limit_max_tess_control_uniform_components() {
        return shaderc_limit_max_tess_control_uniform_components;
    }
    private static final int shaderc_limit_max_tess_control_total_output_components = (int)55L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_control_total_output_components = 55
     * }
     */
    public static int shaderc_limit_max_tess_control_total_output_components() {
        return shaderc_limit_max_tess_control_total_output_components;
    }
    private static final int shaderc_limit_max_tess_evaluation_input_components = (int)56L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_evaluation_input_components = 56
     * }
     */
    public static int shaderc_limit_max_tess_evaluation_input_components() {
        return shaderc_limit_max_tess_evaluation_input_components;
    }
    private static final int shaderc_limit_max_tess_evaluation_output_components = (int)57L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_evaluation_output_components = 57
     * }
     */
    public static int shaderc_limit_max_tess_evaluation_output_components() {
        return shaderc_limit_max_tess_evaluation_output_components;
    }
    private static final int shaderc_limit_max_tess_evaluation_texture_image_units = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_evaluation_texture_image_units = 58
     * }
     */
    public static int shaderc_limit_max_tess_evaluation_texture_image_units() {
        return shaderc_limit_max_tess_evaluation_texture_image_units;
    }
    private static final int shaderc_limit_max_tess_evaluation_uniform_components = (int)59L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_evaluation_uniform_components = 59
     * }
     */
    public static int shaderc_limit_max_tess_evaluation_uniform_components() {
        return shaderc_limit_max_tess_evaluation_uniform_components;
    }
    private static final int shaderc_limit_max_tess_patch_components = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_patch_components = 60
     * }
     */
    public static int shaderc_limit_max_tess_patch_components() {
        return shaderc_limit_max_tess_patch_components;
    }
    private static final int shaderc_limit_max_patch_vertices = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_patch_vertices = 61
     * }
     */
    public static int shaderc_limit_max_patch_vertices() {
        return shaderc_limit_max_patch_vertices;
    }
    private static final int shaderc_limit_max_tess_gen_level = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_gen_level = 62
     * }
     */
    public static int shaderc_limit_max_tess_gen_level() {
        return shaderc_limit_max_tess_gen_level;
    }
    private static final int shaderc_limit_max_viewports = (int)63L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_viewports = 63
     * }
     */
    public static int shaderc_limit_max_viewports() {
        return shaderc_limit_max_viewports;
    }
    private static final int shaderc_limit_max_vertex_atomic_counters = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_atomic_counters = 64
     * }
     */
    public static int shaderc_limit_max_vertex_atomic_counters() {
        return shaderc_limit_max_vertex_atomic_counters;
    }
    private static final int shaderc_limit_max_tess_control_atomic_counters = (int)65L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_control_atomic_counters = 65
     * }
     */
    public static int shaderc_limit_max_tess_control_atomic_counters() {
        return shaderc_limit_max_tess_control_atomic_counters;
    }
    private static final int shaderc_limit_max_tess_evaluation_atomic_counters = (int)66L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_evaluation_atomic_counters = 66
     * }
     */
    public static int shaderc_limit_max_tess_evaluation_atomic_counters() {
        return shaderc_limit_max_tess_evaluation_atomic_counters;
    }
    private static final int shaderc_limit_max_geometry_atomic_counters = (int)67L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_atomic_counters = 67
     * }
     */
    public static int shaderc_limit_max_geometry_atomic_counters() {
        return shaderc_limit_max_geometry_atomic_counters;
    }
    private static final int shaderc_limit_max_fragment_atomic_counters = (int)68L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_fragment_atomic_counters = 68
     * }
     */
    public static int shaderc_limit_max_fragment_atomic_counters() {
        return shaderc_limit_max_fragment_atomic_counters;
    }
    private static final int shaderc_limit_max_combined_atomic_counters = (int)69L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_combined_atomic_counters = 69
     * }
     */
    public static int shaderc_limit_max_combined_atomic_counters() {
        return shaderc_limit_max_combined_atomic_counters;
    }
    private static final int shaderc_limit_max_atomic_counter_bindings = (int)70L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_atomic_counter_bindings = 70
     * }
     */
    public static int shaderc_limit_max_atomic_counter_bindings() {
        return shaderc_limit_max_atomic_counter_bindings;
    }
    private static final int shaderc_limit_max_vertex_atomic_counter_buffers = (int)71L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_vertex_atomic_counter_buffers = 71
     * }
     */
    public static int shaderc_limit_max_vertex_atomic_counter_buffers() {
        return shaderc_limit_max_vertex_atomic_counter_buffers;
    }
    private static final int shaderc_limit_max_tess_control_atomic_counter_buffers = (int)72L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_control_atomic_counter_buffers = 72
     * }
     */
    public static int shaderc_limit_max_tess_control_atomic_counter_buffers() {
        return shaderc_limit_max_tess_control_atomic_counter_buffers;
    }
    private static final int shaderc_limit_max_tess_evaluation_atomic_counter_buffers = (int)73L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_tess_evaluation_atomic_counter_buffers = 73
     * }
     */
    public static int shaderc_limit_max_tess_evaluation_atomic_counter_buffers() {
        return shaderc_limit_max_tess_evaluation_atomic_counter_buffers;
    }
    private static final int shaderc_limit_max_geometry_atomic_counter_buffers = (int)74L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_geometry_atomic_counter_buffers = 74
     * }
     */
    public static int shaderc_limit_max_geometry_atomic_counter_buffers() {
        return shaderc_limit_max_geometry_atomic_counter_buffers;
    }
    private static final int shaderc_limit_max_fragment_atomic_counter_buffers = (int)75L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_fragment_atomic_counter_buffers = 75
     * }
     */
    public static int shaderc_limit_max_fragment_atomic_counter_buffers() {
        return shaderc_limit_max_fragment_atomic_counter_buffers;
    }
    private static final int shaderc_limit_max_combined_atomic_counter_buffers = (int)76L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_combined_atomic_counter_buffers = 76
     * }
     */
    public static int shaderc_limit_max_combined_atomic_counter_buffers() {
        return shaderc_limit_max_combined_atomic_counter_buffers;
    }
    private static final int shaderc_limit_max_atomic_counter_buffer_size = (int)77L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_atomic_counter_buffer_size = 77
     * }
     */
    public static int shaderc_limit_max_atomic_counter_buffer_size() {
        return shaderc_limit_max_atomic_counter_buffer_size;
    }
    private static final int shaderc_limit_max_transform_feedback_buffers = (int)78L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_transform_feedback_buffers = 78
     * }
     */
    public static int shaderc_limit_max_transform_feedback_buffers() {
        return shaderc_limit_max_transform_feedback_buffers;
    }
    private static final int shaderc_limit_max_transform_feedback_interleaved_components = (int)79L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_transform_feedback_interleaved_components = 79
     * }
     */
    public static int shaderc_limit_max_transform_feedback_interleaved_components() {
        return shaderc_limit_max_transform_feedback_interleaved_components;
    }
    private static final int shaderc_limit_max_cull_distances = (int)80L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_cull_distances = 80
     * }
     */
    public static int shaderc_limit_max_cull_distances() {
        return shaderc_limit_max_cull_distances;
    }
    private static final int shaderc_limit_max_combined_clip_and_cull_distances = (int)81L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_combined_clip_and_cull_distances = 81
     * }
     */
    public static int shaderc_limit_max_combined_clip_and_cull_distances() {
        return shaderc_limit_max_combined_clip_and_cull_distances;
    }
    private static final int shaderc_limit_max_samples = (int)82L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_samples = 82
     * }
     */
    public static int shaderc_limit_max_samples() {
        return shaderc_limit_max_samples;
    }
    private static final int shaderc_limit_max_mesh_output_vertices_nv = (int)83L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_output_vertices_nv = 83
     * }
     */
    public static int shaderc_limit_max_mesh_output_vertices_nv() {
        return shaderc_limit_max_mesh_output_vertices_nv;
    }
    private static final int shaderc_limit_max_mesh_output_primitives_nv = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_output_primitives_nv = 84
     * }
     */
    public static int shaderc_limit_max_mesh_output_primitives_nv() {
        return shaderc_limit_max_mesh_output_primitives_nv;
    }
    private static final int shaderc_limit_max_mesh_work_group_size_x_nv = (int)85L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_work_group_size_x_nv = 85
     * }
     */
    public static int shaderc_limit_max_mesh_work_group_size_x_nv() {
        return shaderc_limit_max_mesh_work_group_size_x_nv;
    }
    private static final int shaderc_limit_max_mesh_work_group_size_y_nv = (int)86L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_work_group_size_y_nv = 86
     * }
     */
    public static int shaderc_limit_max_mesh_work_group_size_y_nv() {
        return shaderc_limit_max_mesh_work_group_size_y_nv;
    }
    private static final int shaderc_limit_max_mesh_work_group_size_z_nv = (int)87L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_work_group_size_z_nv = 87
     * }
     */
    public static int shaderc_limit_max_mesh_work_group_size_z_nv() {
        return shaderc_limit_max_mesh_work_group_size_z_nv;
    }
    private static final int shaderc_limit_max_task_work_group_size_x_nv = (int)88L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_task_work_group_size_x_nv = 88
     * }
     */
    public static int shaderc_limit_max_task_work_group_size_x_nv() {
        return shaderc_limit_max_task_work_group_size_x_nv;
    }
    private static final int shaderc_limit_max_task_work_group_size_y_nv = (int)89L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_task_work_group_size_y_nv = 89
     * }
     */
    public static int shaderc_limit_max_task_work_group_size_y_nv() {
        return shaderc_limit_max_task_work_group_size_y_nv;
    }
    private static final int shaderc_limit_max_task_work_group_size_z_nv = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_task_work_group_size_z_nv = 90
     * }
     */
    public static int shaderc_limit_max_task_work_group_size_z_nv() {
        return shaderc_limit_max_task_work_group_size_z_nv;
    }
    private static final int shaderc_limit_max_mesh_view_count_nv = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_view_count_nv = 91
     * }
     */
    public static int shaderc_limit_max_mesh_view_count_nv() {
        return shaderc_limit_max_mesh_view_count_nv;
    }
    private static final int shaderc_limit_max_mesh_output_vertices_ext = (int)92L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_output_vertices_ext = 92
     * }
     */
    public static int shaderc_limit_max_mesh_output_vertices_ext() {
        return shaderc_limit_max_mesh_output_vertices_ext;
    }
    private static final int shaderc_limit_max_mesh_output_primitives_ext = (int)93L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_output_primitives_ext = 93
     * }
     */
    public static int shaderc_limit_max_mesh_output_primitives_ext() {
        return shaderc_limit_max_mesh_output_primitives_ext;
    }
    private static final int shaderc_limit_max_mesh_work_group_size_x_ext = (int)94L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_work_group_size_x_ext = 94
     * }
     */
    public static int shaderc_limit_max_mesh_work_group_size_x_ext() {
        return shaderc_limit_max_mesh_work_group_size_x_ext;
    }
    private static final int shaderc_limit_max_mesh_work_group_size_y_ext = (int)95L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_work_group_size_y_ext = 95
     * }
     */
    public static int shaderc_limit_max_mesh_work_group_size_y_ext() {
        return shaderc_limit_max_mesh_work_group_size_y_ext;
    }
    private static final int shaderc_limit_max_mesh_work_group_size_z_ext = (int)96L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_work_group_size_z_ext = 96
     * }
     */
    public static int shaderc_limit_max_mesh_work_group_size_z_ext() {
        return shaderc_limit_max_mesh_work_group_size_z_ext;
    }
    private static final int shaderc_limit_max_task_work_group_size_x_ext = (int)97L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_task_work_group_size_x_ext = 97
     * }
     */
    public static int shaderc_limit_max_task_work_group_size_x_ext() {
        return shaderc_limit_max_task_work_group_size_x_ext;
    }
    private static final int shaderc_limit_max_task_work_group_size_y_ext = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_task_work_group_size_y_ext = 98
     * }
     */
    public static int shaderc_limit_max_task_work_group_size_y_ext() {
        return shaderc_limit_max_task_work_group_size_y_ext;
    }
    private static final int shaderc_limit_max_task_work_group_size_z_ext = (int)99L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_task_work_group_size_z_ext = 99
     * }
     */
    public static int shaderc_limit_max_task_work_group_size_z_ext() {
        return shaderc_limit_max_task_work_group_size_z_ext;
    }
    private static final int shaderc_limit_max_mesh_view_count_ext = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_mesh_view_count_ext = 100
     * }
     */
    public static int shaderc_limit_max_mesh_view_count_ext() {
        return shaderc_limit_max_mesh_view_count_ext;
    }
    private static final int shaderc_limit_max_dual_source_draw_buffers_ext = (int)101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_limit_max_dual_source_draw_buffers_ext = 101
     * }
     */
    public static int shaderc_limit_max_dual_source_draw_buffers_ext() {
        return shaderc_limit_max_dual_source_draw_buffers_ext;
    }
    private static final int shaderc_uniform_kind_image = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_uniform_kind_image = 0
     * }
     */
    public static int shaderc_uniform_kind_image() {
        return shaderc_uniform_kind_image;
    }
    private static final int shaderc_uniform_kind_sampler = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_uniform_kind_sampler = 1
     * }
     */
    public static int shaderc_uniform_kind_sampler() {
        return shaderc_uniform_kind_sampler;
    }
    private static final int shaderc_uniform_kind_texture = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_uniform_kind_texture = 2
     * }
     */
    public static int shaderc_uniform_kind_texture() {
        return shaderc_uniform_kind_texture;
    }
    private static final int shaderc_uniform_kind_buffer = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_uniform_kind_buffer = 3
     * }
     */
    public static int shaderc_uniform_kind_buffer() {
        return shaderc_uniform_kind_buffer;
    }
    private static final int shaderc_uniform_kind_storage_buffer = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_uniform_kind_storage_buffer = 4
     * }
     */
    public static int shaderc_uniform_kind_storage_buffer() {
        return shaderc_uniform_kind_storage_buffer;
    }
    private static final int shaderc_uniform_kind_unordered_access_view = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.shaderc_uniform_kind_unordered_access_view = 5
     * }
     */
    public static int shaderc_uniform_kind_unordered_access_view() {
        return shaderc_uniform_kind_unordered_access_view;
    }
    /**
     * {@snippet lang=c :
     * typedef struct shaderc_compiler *shaderc_compiler_t
     * }
     */
    public static final AddressLayout shaderc_compiler_t = ShaderC.C_POINTER;

    private static class shaderc_compiler_initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER    );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compiler_initialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * shaderc_compiler_t shaderc_compiler_initialize()
     * }
     */
    public static FunctionDescriptor shaderc_compiler_initialize$descriptor() {
        return shaderc_compiler_initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * shaderc_compiler_t shaderc_compiler_initialize()
     * }
     */
    public static MethodHandle shaderc_compiler_initialize$handle() {
        return shaderc_compiler_initialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * shaderc_compiler_t shaderc_compiler_initialize()
     * }
     */
    public static MemorySegment shaderc_compiler_initialize$address() {
        return shaderc_compiler_initialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * shaderc_compiler_t shaderc_compiler_initialize()
     * }
     */
    public static MemorySegment shaderc_compiler_initialize() {
        var mh$ = shaderc_compiler_initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compiler_initialize");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compiler_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compiler_release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compiler_release(shaderc_compiler_t)
     * }
     */
    public static FunctionDescriptor shaderc_compiler_release$descriptor() {
        return shaderc_compiler_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compiler_release(shaderc_compiler_t)
     * }
     */
    public static MethodHandle shaderc_compiler_release$handle() {
        return shaderc_compiler_release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compiler_release(shaderc_compiler_t)
     * }
     */
    public static MemorySegment shaderc_compiler_release$address() {
        return shaderc_compiler_release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compiler_release(shaderc_compiler_t)
     * }
     */
    public static void shaderc_compiler_release(MemorySegment x0) {
        var mh$ = shaderc_compiler_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compiler_release", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct shaderc_compile_options *shaderc_compile_options_t
     * }
     */
    public static final AddressLayout shaderc_compile_options_t = ShaderC.C_POINTER;

    private static class shaderc_compile_options_initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER    );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_initialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * shaderc_compile_options_t shaderc_compile_options_initialize()
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_initialize$descriptor() {
        return shaderc_compile_options_initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * shaderc_compile_options_t shaderc_compile_options_initialize()
     * }
     */
    public static MethodHandle shaderc_compile_options_initialize$handle() {
        return shaderc_compile_options_initialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * shaderc_compile_options_t shaderc_compile_options_initialize()
     * }
     */
    public static MemorySegment shaderc_compile_options_initialize$address() {
        return shaderc_compile_options_initialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * shaderc_compile_options_t shaderc_compile_options_initialize()
     * }
     */
    public static MemorySegment shaderc_compile_options_initialize() {
        var mh$ = shaderc_compile_options_initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_initialize");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_clone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_clone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * shaderc_compile_options_t shaderc_compile_options_clone(const shaderc_compile_options_t options)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_clone$descriptor() {
        return shaderc_compile_options_clone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * shaderc_compile_options_t shaderc_compile_options_clone(const shaderc_compile_options_t options)
     * }
     */
    public static MethodHandle shaderc_compile_options_clone$handle() {
        return shaderc_compile_options_clone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * shaderc_compile_options_t shaderc_compile_options_clone(const shaderc_compile_options_t options)
     * }
     */
    public static MemorySegment shaderc_compile_options_clone$address() {
        return shaderc_compile_options_clone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * shaderc_compile_options_t shaderc_compile_options_clone(const shaderc_compile_options_t options)
     * }
     */
    public static MemorySegment shaderc_compile_options_clone(MemorySegment options) {
        var mh$ = shaderc_compile_options_clone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_clone", options);
            }
            return (MemorySegment)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_release(shaderc_compile_options_t options)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_release$descriptor() {
        return shaderc_compile_options_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_release(shaderc_compile_options_t options)
     * }
     */
    public static MethodHandle shaderc_compile_options_release$handle() {
        return shaderc_compile_options_release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_release(shaderc_compile_options_t options)
     * }
     */
    public static MemorySegment shaderc_compile_options_release$address() {
        return shaderc_compile_options_release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_release(shaderc_compile_options_t options)
     * }
     */
    public static void shaderc_compile_options_release(MemorySegment options) {
        var mh$ = shaderc_compile_options_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_release", options);
            }
            mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_add_macro_definition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_LONG,
            ShaderC.C_POINTER,
            ShaderC.C_LONG
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_add_macro_definition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_add_macro_definition(shaderc_compile_options_t options, const char *name, size_t name_length, const char *value, size_t value_length)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_add_macro_definition$descriptor() {
        return shaderc_compile_options_add_macro_definition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_add_macro_definition(shaderc_compile_options_t options, const char *name, size_t name_length, const char *value, size_t value_length)
     * }
     */
    public static MethodHandle shaderc_compile_options_add_macro_definition$handle() {
        return shaderc_compile_options_add_macro_definition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_add_macro_definition(shaderc_compile_options_t options, const char *name, size_t name_length, const char *value, size_t value_length)
     * }
     */
    public static MemorySegment shaderc_compile_options_add_macro_definition$address() {
        return shaderc_compile_options_add_macro_definition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_add_macro_definition(shaderc_compile_options_t options, const char *name, size_t name_length, const char *value, size_t value_length)
     * }
     */
    public static void shaderc_compile_options_add_macro_definition(MemorySegment options, MemorySegment name, long name_length, MemorySegment value, long value_length) {
        var mh$ = shaderc_compile_options_add_macro_definition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_add_macro_definition", options, name, name_length, value, value_length);
            }
            mh$.invokeExact(options, name, name_length, value, value_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_source_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_source_language");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_source_language(shaderc_compile_options_t options, shaderc_source_language lang)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_source_language$descriptor() {
        return shaderc_compile_options_set_source_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_source_language(shaderc_compile_options_t options, shaderc_source_language lang)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_source_language$handle() {
        return shaderc_compile_options_set_source_language.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_source_language(shaderc_compile_options_t options, shaderc_source_language lang)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_source_language$address() {
        return shaderc_compile_options_set_source_language.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_source_language(shaderc_compile_options_t options, shaderc_source_language lang)
     * }
     */
    public static void shaderc_compile_options_set_source_language(MemorySegment options, int lang) {
        var mh$ = shaderc_compile_options_set_source_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_source_language", options, lang);
            }
            mh$.invokeExact(options, lang);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_generate_debug_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_generate_debug_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_generate_debug_info(shaderc_compile_options_t options)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_generate_debug_info$descriptor() {
        return shaderc_compile_options_set_generate_debug_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_generate_debug_info(shaderc_compile_options_t options)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_generate_debug_info$handle() {
        return shaderc_compile_options_set_generate_debug_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_generate_debug_info(shaderc_compile_options_t options)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_generate_debug_info$address() {
        return shaderc_compile_options_set_generate_debug_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_generate_debug_info(shaderc_compile_options_t options)
     * }
     */
    public static void shaderc_compile_options_set_generate_debug_info(MemorySegment options) {
        var mh$ = shaderc_compile_options_set_generate_debug_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_generate_debug_info", options);
            }
            mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_optimization_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_optimization_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_optimization_level(shaderc_compile_options_t options, shaderc_optimization_level level)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_optimization_level$descriptor() {
        return shaderc_compile_options_set_optimization_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_optimization_level(shaderc_compile_options_t options, shaderc_optimization_level level)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_optimization_level$handle() {
        return shaderc_compile_options_set_optimization_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_optimization_level(shaderc_compile_options_t options, shaderc_optimization_level level)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_optimization_level$address() {
        return shaderc_compile_options_set_optimization_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_optimization_level(shaderc_compile_options_t options, shaderc_optimization_level level)
     * }
     */
    public static void shaderc_compile_options_set_optimization_level(MemorySegment options, int level) {
        var mh$ = shaderc_compile_options_set_optimization_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_optimization_level", options, level);
            }
            mh$.invokeExact(options, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_forced_version_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT,
            ShaderC.C_INT
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_forced_version_profile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_forced_version_profile(shaderc_compile_options_t options, int version, shaderc_profile profile)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_forced_version_profile$descriptor() {
        return shaderc_compile_options_set_forced_version_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_forced_version_profile(shaderc_compile_options_t options, int version, shaderc_profile profile)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_forced_version_profile$handle() {
        return shaderc_compile_options_set_forced_version_profile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_forced_version_profile(shaderc_compile_options_t options, int version, shaderc_profile profile)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_forced_version_profile$address() {
        return shaderc_compile_options_set_forced_version_profile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_forced_version_profile(shaderc_compile_options_t options, int version, shaderc_profile profile)
     * }
     */
    public static void shaderc_compile_options_set_forced_version_profile(MemorySegment options, int version, int profile) {
        var mh$ = shaderc_compile_options_set_forced_version_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_forced_version_profile", options, version, profile);
            }
            mh$.invokeExact(options, version, profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int shaderc_include_type_relative = (int)0L;
    /**
     * {@snippet lang=c :
     * enum shaderc_include_type.shaderc_include_type_relative = 0
     * }
     */
    public static int shaderc_include_type_relative() {
        return shaderc_include_type_relative;
    }
    private static final int shaderc_include_type_standard = (int)1L;
    /**
     * {@snippet lang=c :
     * enum shaderc_include_type.shaderc_include_type_standard = 1
     * }
     */
    public static int shaderc_include_type_standard() {
        return shaderc_include_type_standard;
    }

    private static class shaderc_compile_options_set_include_callbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_include_callbacks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_include_callbacks(shaderc_compile_options_t options, shaderc_include_resolve_fn resolver, shaderc_include_result_release_fn result_releaser, void *user_data)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_include_callbacks$descriptor() {
        return shaderc_compile_options_set_include_callbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_include_callbacks(shaderc_compile_options_t options, shaderc_include_resolve_fn resolver, shaderc_include_result_release_fn result_releaser, void *user_data)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_include_callbacks$handle() {
        return shaderc_compile_options_set_include_callbacks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_include_callbacks(shaderc_compile_options_t options, shaderc_include_resolve_fn resolver, shaderc_include_result_release_fn result_releaser, void *user_data)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_include_callbacks$address() {
        return shaderc_compile_options_set_include_callbacks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_include_callbacks(shaderc_compile_options_t options, shaderc_include_resolve_fn resolver, shaderc_include_result_release_fn result_releaser, void *user_data)
     * }
     */
    public static void shaderc_compile_options_set_include_callbacks(MemorySegment options, MemorySegment resolver, MemorySegment result_releaser, MemorySegment user_data) {
        var mh$ = shaderc_compile_options_set_include_callbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_include_callbacks", options, resolver, result_releaser, user_data);
            }
            mh$.invokeExact(options, resolver, result_releaser, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_suppress_warnings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_suppress_warnings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_suppress_warnings(shaderc_compile_options_t options)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_suppress_warnings$descriptor() {
        return shaderc_compile_options_set_suppress_warnings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_suppress_warnings(shaderc_compile_options_t options)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_suppress_warnings$handle() {
        return shaderc_compile_options_set_suppress_warnings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_suppress_warnings(shaderc_compile_options_t options)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_suppress_warnings$address() {
        return shaderc_compile_options_set_suppress_warnings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_suppress_warnings(shaderc_compile_options_t options)
     * }
     */
    public static void shaderc_compile_options_set_suppress_warnings(MemorySegment options) {
        var mh$ = shaderc_compile_options_set_suppress_warnings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_suppress_warnings", options);
            }
            mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_target_env {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT,
            ShaderC.C_INT
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_target_env");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_target_env(shaderc_compile_options_t options, shaderc_target_env target, uint32_t version)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_target_env$descriptor() {
        return shaderc_compile_options_set_target_env.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_target_env(shaderc_compile_options_t options, shaderc_target_env target, uint32_t version)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_target_env$handle() {
        return shaderc_compile_options_set_target_env.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_target_env(shaderc_compile_options_t options, shaderc_target_env target, uint32_t version)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_target_env$address() {
        return shaderc_compile_options_set_target_env.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_target_env(shaderc_compile_options_t options, shaderc_target_env target, uint32_t version)
     * }
     */
    public static void shaderc_compile_options_set_target_env(MemorySegment options, int target, int version) {
        var mh$ = shaderc_compile_options_set_target_env.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_target_env", options, target, version);
            }
            mh$.invokeExact(options, target, version);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_target_spirv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_target_spirv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_target_spirv(shaderc_compile_options_t options, shaderc_spirv_version version)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_target_spirv$descriptor() {
        return shaderc_compile_options_set_target_spirv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_target_spirv(shaderc_compile_options_t options, shaderc_spirv_version version)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_target_spirv$handle() {
        return shaderc_compile_options_set_target_spirv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_target_spirv(shaderc_compile_options_t options, shaderc_spirv_version version)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_target_spirv$address() {
        return shaderc_compile_options_set_target_spirv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_target_spirv(shaderc_compile_options_t options, shaderc_spirv_version version)
     * }
     */
    public static void shaderc_compile_options_set_target_spirv(MemorySegment options, int version) {
        var mh$ = shaderc_compile_options_set_target_spirv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_target_spirv", options, version);
            }
            mh$.invokeExact(options, version);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_warnings_as_errors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_warnings_as_errors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_warnings_as_errors(shaderc_compile_options_t options)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_warnings_as_errors$descriptor() {
        return shaderc_compile_options_set_warnings_as_errors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_warnings_as_errors(shaderc_compile_options_t options)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_warnings_as_errors$handle() {
        return shaderc_compile_options_set_warnings_as_errors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_warnings_as_errors(shaderc_compile_options_t options)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_warnings_as_errors$address() {
        return shaderc_compile_options_set_warnings_as_errors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_warnings_as_errors(shaderc_compile_options_t options)
     * }
     */
    public static void shaderc_compile_options_set_warnings_as_errors(MemorySegment options) {
        var mh$ = shaderc_compile_options_set_warnings_as_errors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_warnings_as_errors", options);
            }
            mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT,
            ShaderC.C_INT
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_limit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_limit(shaderc_compile_options_t options, shaderc_limit limit, int value)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_limit$descriptor() {
        return shaderc_compile_options_set_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_limit(shaderc_compile_options_t options, shaderc_limit limit, int value)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_limit$handle() {
        return shaderc_compile_options_set_limit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_limit(shaderc_compile_options_t options, shaderc_limit limit, int value)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_limit$address() {
        return shaderc_compile_options_set_limit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_limit(shaderc_compile_options_t options, shaderc_limit limit, int value)
     * }
     */
    public static void shaderc_compile_options_set_limit(MemorySegment options, int limit, int value) {
        var mh$ = shaderc_compile_options_set_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_limit", options, limit, value);
            }
            mh$.invokeExact(options, limit, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_auto_bind_uniforms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_auto_bind_uniforms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_bind_uniforms(shaderc_compile_options_t options, bool auto_bind)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_auto_bind_uniforms$descriptor() {
        return shaderc_compile_options_set_auto_bind_uniforms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_bind_uniforms(shaderc_compile_options_t options, bool auto_bind)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_auto_bind_uniforms$handle() {
        return shaderc_compile_options_set_auto_bind_uniforms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_bind_uniforms(shaderc_compile_options_t options, bool auto_bind)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_auto_bind_uniforms$address() {
        return shaderc_compile_options_set_auto_bind_uniforms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_bind_uniforms(shaderc_compile_options_t options, bool auto_bind)
     * }
     */
    public static void shaderc_compile_options_set_auto_bind_uniforms(MemorySegment options, boolean auto_bind) {
        var mh$ = shaderc_compile_options_set_auto_bind_uniforms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_auto_bind_uniforms", options, auto_bind);
            }
            mh$.invokeExact(options, auto_bind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_auto_combined_image_sampler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_auto_combined_image_sampler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_combined_image_sampler(shaderc_compile_options_t options, bool upgrade)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_auto_combined_image_sampler$descriptor() {
        return shaderc_compile_options_set_auto_combined_image_sampler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_combined_image_sampler(shaderc_compile_options_t options, bool upgrade)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_auto_combined_image_sampler$handle() {
        return shaderc_compile_options_set_auto_combined_image_sampler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_combined_image_sampler(shaderc_compile_options_t options, bool upgrade)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_auto_combined_image_sampler$address() {
        return shaderc_compile_options_set_auto_combined_image_sampler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_combined_image_sampler(shaderc_compile_options_t options, bool upgrade)
     * }
     */
    public static void shaderc_compile_options_set_auto_combined_image_sampler(MemorySegment options, boolean upgrade) {
        var mh$ = shaderc_compile_options_set_auto_combined_image_sampler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_auto_combined_image_sampler", options, upgrade);
            }
            mh$.invokeExact(options, upgrade);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_hlsl_io_mapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_hlsl_io_mapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_io_mapping(shaderc_compile_options_t options, bool hlsl_iomap)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_hlsl_io_mapping$descriptor() {
        return shaderc_compile_options_set_hlsl_io_mapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_io_mapping(shaderc_compile_options_t options, bool hlsl_iomap)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_hlsl_io_mapping$handle() {
        return shaderc_compile_options_set_hlsl_io_mapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_io_mapping(shaderc_compile_options_t options, bool hlsl_iomap)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_hlsl_io_mapping$address() {
        return shaderc_compile_options_set_hlsl_io_mapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_io_mapping(shaderc_compile_options_t options, bool hlsl_iomap)
     * }
     */
    public static void shaderc_compile_options_set_hlsl_io_mapping(MemorySegment options, boolean hlsl_iomap) {
        var mh$ = shaderc_compile_options_set_hlsl_io_mapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_hlsl_io_mapping", options, hlsl_iomap);
            }
            mh$.invokeExact(options, hlsl_iomap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_hlsl_offsets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_hlsl_offsets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_offsets(shaderc_compile_options_t options, bool hlsl_offsets)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_hlsl_offsets$descriptor() {
        return shaderc_compile_options_set_hlsl_offsets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_offsets(shaderc_compile_options_t options, bool hlsl_offsets)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_hlsl_offsets$handle() {
        return shaderc_compile_options_set_hlsl_offsets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_offsets(shaderc_compile_options_t options, bool hlsl_offsets)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_hlsl_offsets$address() {
        return shaderc_compile_options_set_hlsl_offsets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_offsets(shaderc_compile_options_t options, bool hlsl_offsets)
     * }
     */
    public static void shaderc_compile_options_set_hlsl_offsets(MemorySegment options, boolean hlsl_offsets) {
        var mh$ = shaderc_compile_options_set_hlsl_offsets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_hlsl_offsets", options, hlsl_offsets);
            }
            mh$.invokeExact(options, hlsl_offsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_binding_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT,
            ShaderC.C_INT
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_binding_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_binding_base(shaderc_compile_options_t options, shaderc_uniform_kind kind, uint32_t base)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_binding_base$descriptor() {
        return shaderc_compile_options_set_binding_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_binding_base(shaderc_compile_options_t options, shaderc_uniform_kind kind, uint32_t base)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_binding_base$handle() {
        return shaderc_compile_options_set_binding_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_binding_base(shaderc_compile_options_t options, shaderc_uniform_kind kind, uint32_t base)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_binding_base$address() {
        return shaderc_compile_options_set_binding_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_binding_base(shaderc_compile_options_t options, shaderc_uniform_kind kind, uint32_t base)
     * }
     */
    public static void shaderc_compile_options_set_binding_base(MemorySegment options, int kind, int base) {
        var mh$ = shaderc_compile_options_set_binding_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_binding_base", options, kind, base);
            }
            mh$.invokeExact(options, kind, base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_binding_base_for_stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT,
            ShaderC.C_INT,
            ShaderC.C_INT
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_binding_base_for_stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_binding_base_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, shaderc_uniform_kind kind, uint32_t base)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_binding_base_for_stage$descriptor() {
        return shaderc_compile_options_set_binding_base_for_stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_binding_base_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, shaderc_uniform_kind kind, uint32_t base)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_binding_base_for_stage$handle() {
        return shaderc_compile_options_set_binding_base_for_stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_binding_base_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, shaderc_uniform_kind kind, uint32_t base)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_binding_base_for_stage$address() {
        return shaderc_compile_options_set_binding_base_for_stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_binding_base_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, shaderc_uniform_kind kind, uint32_t base)
     * }
     */
    public static void shaderc_compile_options_set_binding_base_for_stage(MemorySegment options, int shader_kind, int kind, int base) {
        var mh$ = shaderc_compile_options_set_binding_base_for_stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_binding_base_for_stage", options, shader_kind, kind, base);
            }
            mh$.invokeExact(options, shader_kind, kind, base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_preserve_bindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_preserve_bindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_preserve_bindings(shaderc_compile_options_t options, bool preserve_bindings)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_preserve_bindings$descriptor() {
        return shaderc_compile_options_set_preserve_bindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_preserve_bindings(shaderc_compile_options_t options, bool preserve_bindings)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_preserve_bindings$handle() {
        return shaderc_compile_options_set_preserve_bindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_preserve_bindings(shaderc_compile_options_t options, bool preserve_bindings)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_preserve_bindings$address() {
        return shaderc_compile_options_set_preserve_bindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_preserve_bindings(shaderc_compile_options_t options, bool preserve_bindings)
     * }
     */
    public static void shaderc_compile_options_set_preserve_bindings(MemorySegment options, boolean preserve_bindings) {
        var mh$ = shaderc_compile_options_set_preserve_bindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_preserve_bindings", options, preserve_bindings);
            }
            mh$.invokeExact(options, preserve_bindings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_auto_map_locations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_auto_map_locations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_map_locations(shaderc_compile_options_t options, bool auto_map)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_auto_map_locations$descriptor() {
        return shaderc_compile_options_set_auto_map_locations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_map_locations(shaderc_compile_options_t options, bool auto_map)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_auto_map_locations$handle() {
        return shaderc_compile_options_set_auto_map_locations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_map_locations(shaderc_compile_options_t options, bool auto_map)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_auto_map_locations$address() {
        return shaderc_compile_options_set_auto_map_locations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_auto_map_locations(shaderc_compile_options_t options, bool auto_map)
     * }
     */
    public static void shaderc_compile_options_set_auto_map_locations(MemorySegment options, boolean auto_map) {
        var mh$ = shaderc_compile_options_set_auto_map_locations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_auto_map_locations", options, auto_map);
            }
            mh$.invokeExact(options, auto_map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_INT,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, const char *reg, const char *set, const char *binding)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage$descriptor() {
        return shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, const char *reg, const char *set, const char *binding)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage$handle() {
        return shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, const char *reg, const char *set, const char *binding)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage$address() {
        return shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, const char *reg, const char *set, const char *binding)
     * }
     */
    public static void shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage(MemorySegment options, int shader_kind, MemorySegment reg, MemorySegment set, MemorySegment binding) {
        var mh$ = shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage", options, shader_kind, reg, set, binding);
            }
            mh$.invokeExact(options, shader_kind, reg, set, binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_hlsl_register_set_and_binding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_hlsl_register_set_and_binding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_register_set_and_binding(shaderc_compile_options_t options, const char *reg, const char *set, const char *binding)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_hlsl_register_set_and_binding$descriptor() {
        return shaderc_compile_options_set_hlsl_register_set_and_binding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_register_set_and_binding(shaderc_compile_options_t options, const char *reg, const char *set, const char *binding)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_hlsl_register_set_and_binding$handle() {
        return shaderc_compile_options_set_hlsl_register_set_and_binding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_register_set_and_binding(shaderc_compile_options_t options, const char *reg, const char *set, const char *binding)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_hlsl_register_set_and_binding$address() {
        return shaderc_compile_options_set_hlsl_register_set_and_binding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_register_set_and_binding(shaderc_compile_options_t options, const char *reg, const char *set, const char *binding)
     * }
     */
    public static void shaderc_compile_options_set_hlsl_register_set_and_binding(MemorySegment options, MemorySegment reg, MemorySegment set, MemorySegment binding) {
        var mh$ = shaderc_compile_options_set_hlsl_register_set_and_binding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_hlsl_register_set_and_binding", options, reg, set, binding);
            }
            mh$.invokeExact(options, reg, set, binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_hlsl_functionality1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_hlsl_functionality1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_functionality1(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_hlsl_functionality1$descriptor() {
        return shaderc_compile_options_set_hlsl_functionality1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_functionality1(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_hlsl_functionality1$handle() {
        return shaderc_compile_options_set_hlsl_functionality1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_functionality1(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_hlsl_functionality1$address() {
        return shaderc_compile_options_set_hlsl_functionality1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_functionality1(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static void shaderc_compile_options_set_hlsl_functionality1(MemorySegment options, boolean enable) {
        var mh$ = shaderc_compile_options_set_hlsl_functionality1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_hlsl_functionality1", options, enable);
            }
            mh$.invokeExact(options, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_hlsl_16bit_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_hlsl_16bit_types");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_16bit_types(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_hlsl_16bit_types$descriptor() {
        return shaderc_compile_options_set_hlsl_16bit_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_16bit_types(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_hlsl_16bit_types$handle() {
        return shaderc_compile_options_set_hlsl_16bit_types.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_16bit_types(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_hlsl_16bit_types$address() {
        return shaderc_compile_options_set_hlsl_16bit_types.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_hlsl_16bit_types(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static void shaderc_compile_options_set_hlsl_16bit_types(MemorySegment options, boolean enable) {
        var mh$ = shaderc_compile_options_set_hlsl_16bit_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_hlsl_16bit_types", options, enable);
            }
            mh$.invokeExact(options, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_vulkan_rules_relaxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_vulkan_rules_relaxed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_vulkan_rules_relaxed(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_vulkan_rules_relaxed$descriptor() {
        return shaderc_compile_options_set_vulkan_rules_relaxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_vulkan_rules_relaxed(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_vulkan_rules_relaxed$handle() {
        return shaderc_compile_options_set_vulkan_rules_relaxed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_vulkan_rules_relaxed(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_vulkan_rules_relaxed$address() {
        return shaderc_compile_options_set_vulkan_rules_relaxed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_vulkan_rules_relaxed(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static void shaderc_compile_options_set_vulkan_rules_relaxed(MemorySegment options, boolean enable) {
        var mh$ = shaderc_compile_options_set_vulkan_rules_relaxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_vulkan_rules_relaxed", options, enable);
            }
            mh$.invokeExact(options, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_invert_y {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_invert_y");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_invert_y(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_invert_y$descriptor() {
        return shaderc_compile_options_set_invert_y.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_invert_y(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_invert_y$handle() {
        return shaderc_compile_options_set_invert_y.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_invert_y(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_invert_y$address() {
        return shaderc_compile_options_set_invert_y.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_invert_y(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static void shaderc_compile_options_set_invert_y(MemorySegment options, boolean enable) {
        var mh$ = shaderc_compile_options_set_invert_y.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_invert_y", options, enable);
            }
            mh$.invokeExact(options, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_options_set_nan_clamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_BOOL
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_options_set_nan_clamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_nan_clamp(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static FunctionDescriptor shaderc_compile_options_set_nan_clamp$descriptor() {
        return shaderc_compile_options_set_nan_clamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_nan_clamp(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MethodHandle shaderc_compile_options_set_nan_clamp$handle() {
        return shaderc_compile_options_set_nan_clamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_compile_options_set_nan_clamp(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static MemorySegment shaderc_compile_options_set_nan_clamp$address() {
        return shaderc_compile_options_set_nan_clamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_compile_options_set_nan_clamp(shaderc_compile_options_t options, bool enable)
     * }
     */
    public static void shaderc_compile_options_set_nan_clamp(MemorySegment options, boolean enable) {
        var mh$ = shaderc_compile_options_set_nan_clamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_options_set_nan_clamp", options, enable);
            }
            mh$.invokeExact(options, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct shaderc_compilation_result *shaderc_compilation_result_t
     * }
     */
    public static final AddressLayout shaderc_compilation_result_t = ShaderC.C_POINTER;

    private static class shaderc_compile_into_spv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_LONG,
            ShaderC.C_INT,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_into_spv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_spv(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static FunctionDescriptor shaderc_compile_into_spv$descriptor() {
        return shaderc_compile_into_spv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_spv(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MethodHandle shaderc_compile_into_spv$handle() {
        return shaderc_compile_into_spv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_spv(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MemorySegment shaderc_compile_into_spv$address() {
        return shaderc_compile_into_spv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_spv(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MemorySegment shaderc_compile_into_spv(MemorySegment compiler, MemorySegment source_text, long source_text_size, int shader_kind, MemorySegment input_file_name, MemorySegment entry_point_name, MemorySegment additional_options) {
        var mh$ = shaderc_compile_into_spv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_into_spv", compiler, source_text, source_text_size, shader_kind, input_file_name, entry_point_name, additional_options);
            }
            return (MemorySegment)mh$.invokeExact(compiler, source_text, source_text_size, shader_kind, input_file_name, entry_point_name, additional_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_into_spv_assembly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_LONG,
            ShaderC.C_INT,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_into_spv_assembly");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_spv_assembly(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static FunctionDescriptor shaderc_compile_into_spv_assembly$descriptor() {
        return shaderc_compile_into_spv_assembly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_spv_assembly(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MethodHandle shaderc_compile_into_spv_assembly$handle() {
        return shaderc_compile_into_spv_assembly.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_spv_assembly(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MemorySegment shaderc_compile_into_spv_assembly$address() {
        return shaderc_compile_into_spv_assembly.ADDR;
    }

    /**
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_spv_assembly(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MemorySegment shaderc_compile_into_spv_assembly(MemorySegment compiler, MemorySegment source_text, long source_text_size, int shader_kind, MemorySegment input_file_name, MemorySegment entry_point_name, MemorySegment additional_options) {
        var mh$ = shaderc_compile_into_spv_assembly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_into_spv_assembly", compiler, source_text, source_text_size, shader_kind, input_file_name, entry_point_name, additional_options);
            }
            return (MemorySegment)mh$.invokeExact(compiler, source_text, source_text_size, shader_kind, input_file_name, entry_point_name, additional_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_compile_into_preprocessed_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_LONG,
            ShaderC.C_INT,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_compile_into_preprocessed_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_preprocessed_text(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static FunctionDescriptor shaderc_compile_into_preprocessed_text$descriptor() {
        return shaderc_compile_into_preprocessed_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_preprocessed_text(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MethodHandle shaderc_compile_into_preprocessed_text$handle() {
        return shaderc_compile_into_preprocessed_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_preprocessed_text(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MemorySegment shaderc_compile_into_preprocessed_text$address() {
        return shaderc_compile_into_preprocessed_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_compile_into_preprocessed_text(const shaderc_compiler_t compiler, const char *source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char *input_file_name, const char *entry_point_name, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MemorySegment shaderc_compile_into_preprocessed_text(MemorySegment compiler, MemorySegment source_text, long source_text_size, int shader_kind, MemorySegment input_file_name, MemorySegment entry_point_name, MemorySegment additional_options) {
        var mh$ = shaderc_compile_into_preprocessed_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_compile_into_preprocessed_text", compiler, source_text, source_text_size, shader_kind, input_file_name, entry_point_name, additional_options);
            }
            return (MemorySegment)mh$.invokeExact(compiler, source_text, source_text_size, shader_kind, input_file_name, entry_point_name, additional_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_assemble_into_spv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_LONG,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_assemble_into_spv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_assemble_into_spv(const shaderc_compiler_t compiler, const char *source_assembly, size_t source_assembly_size, const shaderc_compile_options_t additional_options)
     * }
     */
    public static FunctionDescriptor shaderc_assemble_into_spv$descriptor() {
        return shaderc_assemble_into_spv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_assemble_into_spv(const shaderc_compiler_t compiler, const char *source_assembly, size_t source_assembly_size, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MethodHandle shaderc_assemble_into_spv$handle() {
        return shaderc_assemble_into_spv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_assemble_into_spv(const shaderc_compiler_t compiler, const char *source_assembly, size_t source_assembly_size, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MemorySegment shaderc_assemble_into_spv$address() {
        return shaderc_assemble_into_spv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * shaderc_compilation_result_t shaderc_assemble_into_spv(const shaderc_compiler_t compiler, const char *source_assembly, size_t source_assembly_size, const shaderc_compile_options_t additional_options)
     * }
     */
    public static MemorySegment shaderc_assemble_into_spv(MemorySegment compiler, MemorySegment source_assembly, long source_assembly_size, MemorySegment additional_options) {
        var mh$ = shaderc_assemble_into_spv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_assemble_into_spv", compiler, source_assembly, source_assembly_size, additional_options);
            }
            return (MemorySegment)mh$.invokeExact(compiler, source_assembly, source_assembly_size, additional_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_result_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_result_release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_result_release(shaderc_compilation_result_t result)
     * }
     */
    public static FunctionDescriptor shaderc_result_release$descriptor() {
        return shaderc_result_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_result_release(shaderc_compilation_result_t result)
     * }
     */
    public static MethodHandle shaderc_result_release$handle() {
        return shaderc_result_release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_result_release(shaderc_compilation_result_t result)
     * }
     */
    public static MemorySegment shaderc_result_release$address() {
        return shaderc_result_release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_result_release(shaderc_compilation_result_t result)
     * }
     */
    public static void shaderc_result_release(MemorySegment result) {
        var mh$ = shaderc_result_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_result_release", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_result_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_LONG,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_result_get_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_length(const shaderc_compilation_result_t result)
     * }
     */
    public static FunctionDescriptor shaderc_result_get_length$descriptor() {
        return shaderc_result_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_length(const shaderc_compilation_result_t result)
     * }
     */
    public static MethodHandle shaderc_result_get_length$handle() {
        return shaderc_result_get_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_length(const shaderc_compilation_result_t result)
     * }
     */
    public static MemorySegment shaderc_result_get_length$address() {
        return shaderc_result_get_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t shaderc_result_get_length(const shaderc_compilation_result_t result)
     * }
     */
    public static long shaderc_result_get_length(MemorySegment result) {
        var mh$ = shaderc_result_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_result_get_length", result);
            }
            return (long)mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_result_get_num_warnings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_LONG,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_result_get_num_warnings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_num_warnings(const shaderc_compilation_result_t result)
     * }
     */
    public static FunctionDescriptor shaderc_result_get_num_warnings$descriptor() {
        return shaderc_result_get_num_warnings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_num_warnings(const shaderc_compilation_result_t result)
     * }
     */
    public static MethodHandle shaderc_result_get_num_warnings$handle() {
        return shaderc_result_get_num_warnings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_num_warnings(const shaderc_compilation_result_t result)
     * }
     */
    public static MemorySegment shaderc_result_get_num_warnings$address() {
        return shaderc_result_get_num_warnings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t shaderc_result_get_num_warnings(const shaderc_compilation_result_t result)
     * }
     */
    public static long shaderc_result_get_num_warnings(MemorySegment result) {
        var mh$ = shaderc_result_get_num_warnings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_result_get_num_warnings", result);
            }
            return (long)mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_result_get_num_errors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_LONG,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_result_get_num_errors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_num_errors(const shaderc_compilation_result_t result)
     * }
     */
    public static FunctionDescriptor shaderc_result_get_num_errors$descriptor() {
        return shaderc_result_get_num_errors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_num_errors(const shaderc_compilation_result_t result)
     * }
     */
    public static MethodHandle shaderc_result_get_num_errors$handle() {
        return shaderc_result_get_num_errors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t shaderc_result_get_num_errors(const shaderc_compilation_result_t result)
     * }
     */
    public static MemorySegment shaderc_result_get_num_errors$address() {
        return shaderc_result_get_num_errors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t shaderc_result_get_num_errors(const shaderc_compilation_result_t result)
     * }
     */
    public static long shaderc_result_get_num_errors(MemorySegment result) {
        var mh$ = shaderc_result_get_num_errors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_result_get_num_errors", result);
            }
            return (long)mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_result_get_compilation_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_INT,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_result_get_compilation_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * shaderc_compilation_status shaderc_result_get_compilation_status(const shaderc_compilation_result_t)
     * }
     */
    public static FunctionDescriptor shaderc_result_get_compilation_status$descriptor() {
        return shaderc_result_get_compilation_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * shaderc_compilation_status shaderc_result_get_compilation_status(const shaderc_compilation_result_t)
     * }
     */
    public static MethodHandle shaderc_result_get_compilation_status$handle() {
        return shaderc_result_get_compilation_status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * shaderc_compilation_status shaderc_result_get_compilation_status(const shaderc_compilation_result_t)
     * }
     */
    public static MemorySegment shaderc_result_get_compilation_status$address() {
        return shaderc_result_get_compilation_status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * shaderc_compilation_status shaderc_result_get_compilation_status(const shaderc_compilation_result_t)
     * }
     */
    public static int shaderc_result_get_compilation_status(MemorySegment x0) {
        var mh$ = shaderc_result_get_compilation_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_result_get_compilation_status", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_result_get_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_result_get_bytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *shaderc_result_get_bytes(const shaderc_compilation_result_t result)
     * }
     */
    public static FunctionDescriptor shaderc_result_get_bytes$descriptor() {
        return shaderc_result_get_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *shaderc_result_get_bytes(const shaderc_compilation_result_t result)
     * }
     */
    public static MethodHandle shaderc_result_get_bytes$handle() {
        return shaderc_result_get_bytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *shaderc_result_get_bytes(const shaderc_compilation_result_t result)
     * }
     */
    public static MemorySegment shaderc_result_get_bytes$address() {
        return shaderc_result_get_bytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *shaderc_result_get_bytes(const shaderc_compilation_result_t result)
     * }
     */
    public static MemorySegment shaderc_result_get_bytes(MemorySegment result) {
        var mh$ = shaderc_result_get_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_result_get_bytes", result);
            }
            return (MemorySegment)mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_result_get_error_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_result_get_error_message");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *shaderc_result_get_error_message(const shaderc_compilation_result_t result)
     * }
     */
    public static FunctionDescriptor shaderc_result_get_error_message$descriptor() {
        return shaderc_result_get_error_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *shaderc_result_get_error_message(const shaderc_compilation_result_t result)
     * }
     */
    public static MethodHandle shaderc_result_get_error_message$handle() {
        return shaderc_result_get_error_message.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *shaderc_result_get_error_message(const shaderc_compilation_result_t result)
     * }
     */
    public static MemorySegment shaderc_result_get_error_message$address() {
        return shaderc_result_get_error_message.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *shaderc_result_get_error_message(const shaderc_compilation_result_t result)
     * }
     */
    public static MemorySegment shaderc_result_get_error_message(MemorySegment result) {
        var mh$ = shaderc_result_get_error_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_result_get_error_message", result);
            }
            return (MemorySegment)mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_get_spv_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_get_spv_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void shaderc_get_spv_version(unsigned int *version, unsigned int *revision)
     * }
     */
    public static FunctionDescriptor shaderc_get_spv_version$descriptor() {
        return shaderc_get_spv_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void shaderc_get_spv_version(unsigned int *version, unsigned int *revision)
     * }
     */
    public static MethodHandle shaderc_get_spv_version$handle() {
        return shaderc_get_spv_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void shaderc_get_spv_version(unsigned int *version, unsigned int *revision)
     * }
     */
    public static MemorySegment shaderc_get_spv_version$address() {
        return shaderc_get_spv_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void shaderc_get_spv_version(unsigned int *version, unsigned int *revision)
     * }
     */
    public static void shaderc_get_spv_version(MemorySegment version, MemorySegment revision) {
        var mh$ = shaderc_get_spv_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_get_spv_version", version, revision);
            }
            mh$.invokeExact(version, revision);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shaderc_parse_version_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ShaderC.C_BOOL,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER,
            ShaderC.C_POINTER
        );

        public static final MemorySegment ADDR = ShaderC.findOrThrow("shaderc_parse_version_profile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool shaderc_parse_version_profile(const char *str, int *version, shaderc_profile *profile)
     * }
     */
    public static FunctionDescriptor shaderc_parse_version_profile$descriptor() {
        return shaderc_parse_version_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool shaderc_parse_version_profile(const char *str, int *version, shaderc_profile *profile)
     * }
     */
    public static MethodHandle shaderc_parse_version_profile$handle() {
        return shaderc_parse_version_profile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool shaderc_parse_version_profile(const char *str, int *version, shaderc_profile *profile)
     * }
     */
    public static MemorySegment shaderc_parse_version_profile$address() {
        return shaderc_parse_version_profile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool shaderc_parse_version_profile(const char *str, int *version, shaderc_profile *profile)
     * }
     */
    public static boolean shaderc_parse_version_profile(MemorySegment str, MemorySegment version, MemorySegment profile) {
        var mh$ = shaderc_parse_version_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shaderc_parse_version_profile", str, version, profile);
            }
            return (boolean)mh$.invokeExact(str, version, profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
}

