// Generated by jextract

package au.ikx.glcore;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class glcore extends glcore_1 {

    glcore() {
        // Should not be called directly
    }

    private static class glad_debug_glVertexAttribL1dEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL1dEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DEXTPROC glad_debug_glVertexAttribL1dEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL1dEXT$layout() {
        return glad_debug_glVertexAttribL1dEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DEXTPROC glad_debug_glVertexAttribL1dEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL1dEXT$segment() {
        return glad_debug_glVertexAttribL1dEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DEXTPROC glad_debug_glVertexAttribL1dEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL1dEXT() {
        return glad_debug_glVertexAttribL1dEXT$constants.SEGMENT.get(glad_debug_glVertexAttribL1dEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DEXTPROC glad_debug_glVertexAttribL1dEXT
     * }
     */
    public static void glad_debug_glVertexAttribL1dEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribL1dEXT$constants.SEGMENT.set(glad_debug_glVertexAttribL1dEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL1dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL1dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv
     * }
     */
    public static AddressLayout glad_glVertexAttribL1dv$layout() {
        return glad_glVertexAttribL1dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv
     * }
     */
    public static MemorySegment glad_glVertexAttribL1dv$segment() {
        return glad_glVertexAttribL1dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv
     * }
     */
    public static MemorySegment glad_glVertexAttribL1dv() {
        return glad_glVertexAttribL1dv$constants.SEGMENT.get(glad_glVertexAttribL1dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv
     * }
     */
    public static void glad_glVertexAttribL1dv(MemorySegment varValue) {
        glad_glVertexAttribL1dv$constants.SEGMENT.set(glad_glVertexAttribL1dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL1dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL1dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL1dv$layout() {
        return glad_debug_glVertexAttribL1dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL1dv$segment() {
        return glad_debug_glVertexAttribL1dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL1dv() {
        return glad_debug_glVertexAttribL1dv$constants.SEGMENT.get(glad_debug_glVertexAttribL1dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv
     * }
     */
    public static void glad_debug_glVertexAttribL1dv(MemorySegment varValue) {
        glad_debug_glVertexAttribL1dv$constants.SEGMENT.set(glad_debug_glVertexAttribL1dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL1dvEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL1dvEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVEXTPROC glad_glVertexAttribL1dvEXT
     * }
     */
    public static AddressLayout glad_glVertexAttribL1dvEXT$layout() {
        return glad_glVertexAttribL1dvEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVEXTPROC glad_glVertexAttribL1dvEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL1dvEXT$segment() {
        return glad_glVertexAttribL1dvEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVEXTPROC glad_glVertexAttribL1dvEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL1dvEXT() {
        return glad_glVertexAttribL1dvEXT$constants.SEGMENT.get(glad_glVertexAttribL1dvEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVEXTPROC glad_glVertexAttribL1dvEXT
     * }
     */
    public static void glad_glVertexAttribL1dvEXT(MemorySegment varValue) {
        glad_glVertexAttribL1dvEXT$constants.SEGMENT.set(glad_glVertexAttribL1dvEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL1dvEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL1dvEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVEXTPROC glad_debug_glVertexAttribL1dvEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL1dvEXT$layout() {
        return glad_debug_glVertexAttribL1dvEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVEXTPROC glad_debug_glVertexAttribL1dvEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL1dvEXT$segment() {
        return glad_debug_glVertexAttribL1dvEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVEXTPROC glad_debug_glVertexAttribL1dvEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL1dvEXT() {
        return glad_debug_glVertexAttribL1dvEXT$constants.SEGMENT.get(glad_debug_glVertexAttribL1dvEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL1DVEXTPROC glad_debug_glVertexAttribL1dvEXT
     * }
     */
    public static void glad_debug_glVertexAttribL1dvEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribL1dvEXT$constants.SEGMENT.set(glad_debug_glVertexAttribL1dvEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL2d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL2d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d
     * }
     */
    public static AddressLayout glad_glVertexAttribL2d$layout() {
        return glad_glVertexAttribL2d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d
     * }
     */
    public static MemorySegment glad_glVertexAttribL2d$segment() {
        return glad_glVertexAttribL2d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d
     * }
     */
    public static MemorySegment glad_glVertexAttribL2d() {
        return glad_glVertexAttribL2d$constants.SEGMENT.get(glad_glVertexAttribL2d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d
     * }
     */
    public static void glad_glVertexAttribL2d(MemorySegment varValue) {
        glad_glVertexAttribL2d$constants.SEGMENT.set(glad_glVertexAttribL2d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL2d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL2d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL2d$layout() {
        return glad_debug_glVertexAttribL2d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL2d$segment() {
        return glad_debug_glVertexAttribL2d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL2d() {
        return glad_debug_glVertexAttribL2d$constants.SEGMENT.get(glad_debug_glVertexAttribL2d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d
     * }
     */
    public static void glad_debug_glVertexAttribL2d(MemorySegment varValue) {
        glad_debug_glVertexAttribL2d$constants.SEGMENT.set(glad_debug_glVertexAttribL2d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL2dEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL2dEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DEXTPROC glad_glVertexAttribL2dEXT
     * }
     */
    public static AddressLayout glad_glVertexAttribL2dEXT$layout() {
        return glad_glVertexAttribL2dEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DEXTPROC glad_glVertexAttribL2dEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL2dEXT$segment() {
        return glad_glVertexAttribL2dEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DEXTPROC glad_glVertexAttribL2dEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL2dEXT() {
        return glad_glVertexAttribL2dEXT$constants.SEGMENT.get(glad_glVertexAttribL2dEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DEXTPROC glad_glVertexAttribL2dEXT
     * }
     */
    public static void glad_glVertexAttribL2dEXT(MemorySegment varValue) {
        glad_glVertexAttribL2dEXT$constants.SEGMENT.set(glad_glVertexAttribL2dEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL2dEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL2dEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DEXTPROC glad_debug_glVertexAttribL2dEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL2dEXT$layout() {
        return glad_debug_glVertexAttribL2dEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DEXTPROC glad_debug_glVertexAttribL2dEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL2dEXT$segment() {
        return glad_debug_glVertexAttribL2dEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DEXTPROC glad_debug_glVertexAttribL2dEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL2dEXT() {
        return glad_debug_glVertexAttribL2dEXT$constants.SEGMENT.get(glad_debug_glVertexAttribL2dEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DEXTPROC glad_debug_glVertexAttribL2dEXT
     * }
     */
    public static void glad_debug_glVertexAttribL2dEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribL2dEXT$constants.SEGMENT.set(glad_debug_glVertexAttribL2dEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL2dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL2dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv
     * }
     */
    public static AddressLayout glad_glVertexAttribL2dv$layout() {
        return glad_glVertexAttribL2dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv
     * }
     */
    public static MemorySegment glad_glVertexAttribL2dv$segment() {
        return glad_glVertexAttribL2dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv
     * }
     */
    public static MemorySegment glad_glVertexAttribL2dv() {
        return glad_glVertexAttribL2dv$constants.SEGMENT.get(glad_glVertexAttribL2dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv
     * }
     */
    public static void glad_glVertexAttribL2dv(MemorySegment varValue) {
        glad_glVertexAttribL2dv$constants.SEGMENT.set(glad_glVertexAttribL2dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL2dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL2dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL2dv$layout() {
        return glad_debug_glVertexAttribL2dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL2dv$segment() {
        return glad_debug_glVertexAttribL2dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL2dv() {
        return glad_debug_glVertexAttribL2dv$constants.SEGMENT.get(glad_debug_glVertexAttribL2dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv
     * }
     */
    public static void glad_debug_glVertexAttribL2dv(MemorySegment varValue) {
        glad_debug_glVertexAttribL2dv$constants.SEGMENT.set(glad_debug_glVertexAttribL2dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL2dvEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL2dvEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVEXTPROC glad_glVertexAttribL2dvEXT
     * }
     */
    public static AddressLayout glad_glVertexAttribL2dvEXT$layout() {
        return glad_glVertexAttribL2dvEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVEXTPROC glad_glVertexAttribL2dvEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL2dvEXT$segment() {
        return glad_glVertexAttribL2dvEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVEXTPROC glad_glVertexAttribL2dvEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL2dvEXT() {
        return glad_glVertexAttribL2dvEXT$constants.SEGMENT.get(glad_glVertexAttribL2dvEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVEXTPROC glad_glVertexAttribL2dvEXT
     * }
     */
    public static void glad_glVertexAttribL2dvEXT(MemorySegment varValue) {
        glad_glVertexAttribL2dvEXT$constants.SEGMENT.set(glad_glVertexAttribL2dvEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL2dvEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL2dvEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVEXTPROC glad_debug_glVertexAttribL2dvEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL2dvEXT$layout() {
        return glad_debug_glVertexAttribL2dvEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVEXTPROC glad_debug_glVertexAttribL2dvEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL2dvEXT$segment() {
        return glad_debug_glVertexAttribL2dvEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVEXTPROC glad_debug_glVertexAttribL2dvEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL2dvEXT() {
        return glad_debug_glVertexAttribL2dvEXT$constants.SEGMENT.get(glad_debug_glVertexAttribL2dvEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL2DVEXTPROC glad_debug_glVertexAttribL2dvEXT
     * }
     */
    public static void glad_debug_glVertexAttribL2dvEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribL2dvEXT$constants.SEGMENT.set(glad_debug_glVertexAttribL2dvEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL3d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL3d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d
     * }
     */
    public static AddressLayout glad_glVertexAttribL3d$layout() {
        return glad_glVertexAttribL3d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d
     * }
     */
    public static MemorySegment glad_glVertexAttribL3d$segment() {
        return glad_glVertexAttribL3d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d
     * }
     */
    public static MemorySegment glad_glVertexAttribL3d() {
        return glad_glVertexAttribL3d$constants.SEGMENT.get(glad_glVertexAttribL3d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d
     * }
     */
    public static void glad_glVertexAttribL3d(MemorySegment varValue) {
        glad_glVertexAttribL3d$constants.SEGMENT.set(glad_glVertexAttribL3d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL3d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL3d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL3d$layout() {
        return glad_debug_glVertexAttribL3d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL3d$segment() {
        return glad_debug_glVertexAttribL3d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL3d() {
        return glad_debug_glVertexAttribL3d$constants.SEGMENT.get(glad_debug_glVertexAttribL3d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d
     * }
     */
    public static void glad_debug_glVertexAttribL3d(MemorySegment varValue) {
        glad_debug_glVertexAttribL3d$constants.SEGMENT.set(glad_debug_glVertexAttribL3d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL3dEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL3dEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DEXTPROC glad_glVertexAttribL3dEXT
     * }
     */
    public static AddressLayout glad_glVertexAttribL3dEXT$layout() {
        return glad_glVertexAttribL3dEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DEXTPROC glad_glVertexAttribL3dEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL3dEXT$segment() {
        return glad_glVertexAttribL3dEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DEXTPROC glad_glVertexAttribL3dEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL3dEXT() {
        return glad_glVertexAttribL3dEXT$constants.SEGMENT.get(glad_glVertexAttribL3dEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DEXTPROC glad_glVertexAttribL3dEXT
     * }
     */
    public static void glad_glVertexAttribL3dEXT(MemorySegment varValue) {
        glad_glVertexAttribL3dEXT$constants.SEGMENT.set(glad_glVertexAttribL3dEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL3dEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL3dEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DEXTPROC glad_debug_glVertexAttribL3dEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL3dEXT$layout() {
        return glad_debug_glVertexAttribL3dEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DEXTPROC glad_debug_glVertexAttribL3dEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL3dEXT$segment() {
        return glad_debug_glVertexAttribL3dEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DEXTPROC glad_debug_glVertexAttribL3dEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL3dEXT() {
        return glad_debug_glVertexAttribL3dEXT$constants.SEGMENT.get(glad_debug_glVertexAttribL3dEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DEXTPROC glad_debug_glVertexAttribL3dEXT
     * }
     */
    public static void glad_debug_glVertexAttribL3dEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribL3dEXT$constants.SEGMENT.set(glad_debug_glVertexAttribL3dEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL3dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL3dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv
     * }
     */
    public static AddressLayout glad_glVertexAttribL3dv$layout() {
        return glad_glVertexAttribL3dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv
     * }
     */
    public static MemorySegment glad_glVertexAttribL3dv$segment() {
        return glad_glVertexAttribL3dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv
     * }
     */
    public static MemorySegment glad_glVertexAttribL3dv() {
        return glad_glVertexAttribL3dv$constants.SEGMENT.get(glad_glVertexAttribL3dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv
     * }
     */
    public static void glad_glVertexAttribL3dv(MemorySegment varValue) {
        glad_glVertexAttribL3dv$constants.SEGMENT.set(glad_glVertexAttribL3dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL3dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL3dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL3dv$layout() {
        return glad_debug_glVertexAttribL3dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL3dv$segment() {
        return glad_debug_glVertexAttribL3dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL3dv() {
        return glad_debug_glVertexAttribL3dv$constants.SEGMENT.get(glad_debug_glVertexAttribL3dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv
     * }
     */
    public static void glad_debug_glVertexAttribL3dv(MemorySegment varValue) {
        glad_debug_glVertexAttribL3dv$constants.SEGMENT.set(glad_debug_glVertexAttribL3dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL3dvEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL3dvEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVEXTPROC glad_glVertexAttribL3dvEXT
     * }
     */
    public static AddressLayout glad_glVertexAttribL3dvEXT$layout() {
        return glad_glVertexAttribL3dvEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVEXTPROC glad_glVertexAttribL3dvEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL3dvEXT$segment() {
        return glad_glVertexAttribL3dvEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVEXTPROC glad_glVertexAttribL3dvEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL3dvEXT() {
        return glad_glVertexAttribL3dvEXT$constants.SEGMENT.get(glad_glVertexAttribL3dvEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVEXTPROC glad_glVertexAttribL3dvEXT
     * }
     */
    public static void glad_glVertexAttribL3dvEXT(MemorySegment varValue) {
        glad_glVertexAttribL3dvEXT$constants.SEGMENT.set(glad_glVertexAttribL3dvEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL3dvEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL3dvEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVEXTPROC glad_debug_glVertexAttribL3dvEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL3dvEXT$layout() {
        return glad_debug_glVertexAttribL3dvEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVEXTPROC glad_debug_glVertexAttribL3dvEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL3dvEXT$segment() {
        return glad_debug_glVertexAttribL3dvEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVEXTPROC glad_debug_glVertexAttribL3dvEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL3dvEXT() {
        return glad_debug_glVertexAttribL3dvEXT$constants.SEGMENT.get(glad_debug_glVertexAttribL3dvEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL3DVEXTPROC glad_debug_glVertexAttribL3dvEXT
     * }
     */
    public static void glad_debug_glVertexAttribL3dvEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribL3dvEXT$constants.SEGMENT.set(glad_debug_glVertexAttribL3dvEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL4d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL4d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d
     * }
     */
    public static AddressLayout glad_glVertexAttribL4d$layout() {
        return glad_glVertexAttribL4d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d
     * }
     */
    public static MemorySegment glad_glVertexAttribL4d$segment() {
        return glad_glVertexAttribL4d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d
     * }
     */
    public static MemorySegment glad_glVertexAttribL4d() {
        return glad_glVertexAttribL4d$constants.SEGMENT.get(glad_glVertexAttribL4d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d
     * }
     */
    public static void glad_glVertexAttribL4d(MemorySegment varValue) {
        glad_glVertexAttribL4d$constants.SEGMENT.set(glad_glVertexAttribL4d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL4d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL4d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL4d$layout() {
        return glad_debug_glVertexAttribL4d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL4d$segment() {
        return glad_debug_glVertexAttribL4d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL4d() {
        return glad_debug_glVertexAttribL4d$constants.SEGMENT.get(glad_debug_glVertexAttribL4d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d
     * }
     */
    public static void glad_debug_glVertexAttribL4d(MemorySegment varValue) {
        glad_debug_glVertexAttribL4d$constants.SEGMENT.set(glad_debug_glVertexAttribL4d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL4dEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL4dEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DEXTPROC glad_glVertexAttribL4dEXT
     * }
     */
    public static AddressLayout glad_glVertexAttribL4dEXT$layout() {
        return glad_glVertexAttribL4dEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DEXTPROC glad_glVertexAttribL4dEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL4dEXT$segment() {
        return glad_glVertexAttribL4dEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DEXTPROC glad_glVertexAttribL4dEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL4dEXT() {
        return glad_glVertexAttribL4dEXT$constants.SEGMENT.get(glad_glVertexAttribL4dEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DEXTPROC glad_glVertexAttribL4dEXT
     * }
     */
    public static void glad_glVertexAttribL4dEXT(MemorySegment varValue) {
        glad_glVertexAttribL4dEXT$constants.SEGMENT.set(glad_glVertexAttribL4dEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL4dEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL4dEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DEXTPROC glad_debug_glVertexAttribL4dEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL4dEXT$layout() {
        return glad_debug_glVertexAttribL4dEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DEXTPROC glad_debug_glVertexAttribL4dEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL4dEXT$segment() {
        return glad_debug_glVertexAttribL4dEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DEXTPROC glad_debug_glVertexAttribL4dEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL4dEXT() {
        return glad_debug_glVertexAttribL4dEXT$constants.SEGMENT.get(glad_debug_glVertexAttribL4dEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DEXTPROC glad_debug_glVertexAttribL4dEXT
     * }
     */
    public static void glad_debug_glVertexAttribL4dEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribL4dEXT$constants.SEGMENT.set(glad_debug_glVertexAttribL4dEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL4dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL4dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv
     * }
     */
    public static AddressLayout glad_glVertexAttribL4dv$layout() {
        return glad_glVertexAttribL4dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv
     * }
     */
    public static MemorySegment glad_glVertexAttribL4dv$segment() {
        return glad_glVertexAttribL4dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv
     * }
     */
    public static MemorySegment glad_glVertexAttribL4dv() {
        return glad_glVertexAttribL4dv$constants.SEGMENT.get(glad_glVertexAttribL4dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv
     * }
     */
    public static void glad_glVertexAttribL4dv(MemorySegment varValue) {
        glad_glVertexAttribL4dv$constants.SEGMENT.set(glad_glVertexAttribL4dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL4dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL4dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL4dv$layout() {
        return glad_debug_glVertexAttribL4dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL4dv$segment() {
        return glad_debug_glVertexAttribL4dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL4dv() {
        return glad_debug_glVertexAttribL4dv$constants.SEGMENT.get(glad_debug_glVertexAttribL4dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv
     * }
     */
    public static void glad_debug_glVertexAttribL4dv(MemorySegment varValue) {
        glad_debug_glVertexAttribL4dv$constants.SEGMENT.set(glad_debug_glVertexAttribL4dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribL4dvEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribL4dvEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVEXTPROC glad_glVertexAttribL4dvEXT
     * }
     */
    public static AddressLayout glad_glVertexAttribL4dvEXT$layout() {
        return glad_glVertexAttribL4dvEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVEXTPROC glad_glVertexAttribL4dvEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL4dvEXT$segment() {
        return glad_glVertexAttribL4dvEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVEXTPROC glad_glVertexAttribL4dvEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribL4dvEXT() {
        return glad_glVertexAttribL4dvEXT$constants.SEGMENT.get(glad_glVertexAttribL4dvEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVEXTPROC glad_glVertexAttribL4dvEXT
     * }
     */
    public static void glad_glVertexAttribL4dvEXT(MemorySegment varValue) {
        glad_glVertexAttribL4dvEXT$constants.SEGMENT.set(glad_glVertexAttribL4dvEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribL4dvEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribL4dvEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVEXTPROC glad_debug_glVertexAttribL4dvEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribL4dvEXT$layout() {
        return glad_debug_glVertexAttribL4dvEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVEXTPROC glad_debug_glVertexAttribL4dvEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL4dvEXT$segment() {
        return glad_debug_glVertexAttribL4dvEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVEXTPROC glad_debug_glVertexAttribL4dvEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribL4dvEXT() {
        return glad_debug_glVertexAttribL4dvEXT$constants.SEGMENT.get(glad_debug_glVertexAttribL4dvEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBL4DVEXTPROC glad_debug_glVertexAttribL4dvEXT
     * }
     */
    public static void glad_debug_glVertexAttribL4dvEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribL4dvEXT$constants.SEGMENT.set(glad_debug_glVertexAttribL4dvEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribLFormat$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribLFormat").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat
     * }
     */
    public static AddressLayout glad_glVertexAttribLFormat$layout() {
        return glad_glVertexAttribLFormat$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat
     * }
     */
    public static MemorySegment glad_glVertexAttribLFormat$segment() {
        return glad_glVertexAttribLFormat$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat
     * }
     */
    public static MemorySegment glad_glVertexAttribLFormat() {
        return glad_glVertexAttribLFormat$constants.SEGMENT.get(glad_glVertexAttribLFormat$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat
     * }
     */
    public static void glad_glVertexAttribLFormat(MemorySegment varValue) {
        glad_glVertexAttribLFormat$constants.SEGMENT.set(glad_glVertexAttribLFormat$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribLFormat$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribLFormat").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLFORMATPROC glad_debug_glVertexAttribLFormat
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribLFormat$layout() {
        return glad_debug_glVertexAttribLFormat$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLFORMATPROC glad_debug_glVertexAttribLFormat
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribLFormat$segment() {
        return glad_debug_glVertexAttribLFormat$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLFORMATPROC glad_debug_glVertexAttribLFormat
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribLFormat() {
        return glad_debug_glVertexAttribLFormat$constants.SEGMENT.get(glad_debug_glVertexAttribLFormat$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLFORMATPROC glad_debug_glVertexAttribLFormat
     * }
     */
    public static void glad_debug_glVertexAttribLFormat(MemorySegment varValue) {
        glad_debug_glVertexAttribLFormat$constants.SEGMENT.set(glad_debug_glVertexAttribLFormat$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribLPointer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribLPointer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer
     * }
     */
    public static AddressLayout glad_glVertexAttribLPointer$layout() {
        return glad_glVertexAttribLPointer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer
     * }
     */
    public static MemorySegment glad_glVertexAttribLPointer$segment() {
        return glad_glVertexAttribLPointer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer
     * }
     */
    public static MemorySegment glad_glVertexAttribLPointer() {
        return glad_glVertexAttribLPointer$constants.SEGMENT.get(glad_glVertexAttribLPointer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer
     * }
     */
    public static void glad_glVertexAttribLPointer(MemorySegment varValue) {
        glad_glVertexAttribLPointer$constants.SEGMENT.set(glad_glVertexAttribLPointer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribLPointer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribLPointer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribLPointer$layout() {
        return glad_debug_glVertexAttribLPointer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribLPointer$segment() {
        return glad_debug_glVertexAttribLPointer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribLPointer() {
        return glad_debug_glVertexAttribLPointer$constants.SEGMENT.get(glad_debug_glVertexAttribLPointer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer
     * }
     */
    public static void glad_debug_glVertexAttribLPointer(MemorySegment varValue) {
        glad_debug_glVertexAttribLPointer$constants.SEGMENT.set(glad_debug_glVertexAttribLPointer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribLPointerEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribLPointerEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_glVertexAttribLPointerEXT
     * }
     */
    public static AddressLayout glad_glVertexAttribLPointerEXT$layout() {
        return glad_glVertexAttribLPointerEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_glVertexAttribLPointerEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribLPointerEXT$segment() {
        return glad_glVertexAttribLPointerEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_glVertexAttribLPointerEXT
     * }
     */
    public static MemorySegment glad_glVertexAttribLPointerEXT() {
        return glad_glVertexAttribLPointerEXT$constants.SEGMENT.get(glad_glVertexAttribLPointerEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_glVertexAttribLPointerEXT
     * }
     */
    public static void glad_glVertexAttribLPointerEXT(MemorySegment varValue) {
        glad_glVertexAttribLPointerEXT$constants.SEGMENT.set(glad_glVertexAttribLPointerEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribLPointerEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribLPointerEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_debug_glVertexAttribLPointerEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribLPointerEXT$layout() {
        return glad_debug_glVertexAttribLPointerEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_debug_glVertexAttribLPointerEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribLPointerEXT$segment() {
        return glad_debug_glVertexAttribLPointerEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_debug_glVertexAttribLPointerEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribLPointerEXT() {
        return glad_debug_glVertexAttribLPointerEXT$constants.SEGMENT.get(glad_debug_glVertexAttribLPointerEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_debug_glVertexAttribLPointerEXT
     * }
     */
    public static void glad_debug_glVertexAttribLPointerEXT(MemorySegment varValue) {
        glad_debug_glVertexAttribLPointerEXT$constants.SEGMENT.set(glad_debug_glVertexAttribLPointerEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribP1ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribP1ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui
     * }
     */
    public static AddressLayout glad_glVertexAttribP1ui$layout() {
        return glad_glVertexAttribP1ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui
     * }
     */
    public static MemorySegment glad_glVertexAttribP1ui$segment() {
        return glad_glVertexAttribP1ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui
     * }
     */
    public static MemorySegment glad_glVertexAttribP1ui() {
        return glad_glVertexAttribP1ui$constants.SEGMENT.get(glad_glVertexAttribP1ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui
     * }
     */
    public static void glad_glVertexAttribP1ui(MemorySegment varValue) {
        glad_glVertexAttribP1ui$constants.SEGMENT.set(glad_glVertexAttribP1ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribP1ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribP1ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribP1ui$layout() {
        return glad_debug_glVertexAttribP1ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP1ui$segment() {
        return glad_debug_glVertexAttribP1ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP1ui() {
        return glad_debug_glVertexAttribP1ui$constants.SEGMENT.get(glad_debug_glVertexAttribP1ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui
     * }
     */
    public static void glad_debug_glVertexAttribP1ui(MemorySegment varValue) {
        glad_debug_glVertexAttribP1ui$constants.SEGMENT.set(glad_debug_glVertexAttribP1ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribP1uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribP1uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv
     * }
     */
    public static AddressLayout glad_glVertexAttribP1uiv$layout() {
        return glad_glVertexAttribP1uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv
     * }
     */
    public static MemorySegment glad_glVertexAttribP1uiv$segment() {
        return glad_glVertexAttribP1uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv
     * }
     */
    public static MemorySegment glad_glVertexAttribP1uiv() {
        return glad_glVertexAttribP1uiv$constants.SEGMENT.get(glad_glVertexAttribP1uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv
     * }
     */
    public static void glad_glVertexAttribP1uiv(MemorySegment varValue) {
        glad_glVertexAttribP1uiv$constants.SEGMENT.set(glad_glVertexAttribP1uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribP1uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribP1uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribP1uiv$layout() {
        return glad_debug_glVertexAttribP1uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP1uiv$segment() {
        return glad_debug_glVertexAttribP1uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP1uiv() {
        return glad_debug_glVertexAttribP1uiv$constants.SEGMENT.get(glad_debug_glVertexAttribP1uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv
     * }
     */
    public static void glad_debug_glVertexAttribP1uiv(MemorySegment varValue) {
        glad_debug_glVertexAttribP1uiv$constants.SEGMENT.set(glad_debug_glVertexAttribP1uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribP2ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribP2ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui
     * }
     */
    public static AddressLayout glad_glVertexAttribP2ui$layout() {
        return glad_glVertexAttribP2ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui
     * }
     */
    public static MemorySegment glad_glVertexAttribP2ui$segment() {
        return glad_glVertexAttribP2ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui
     * }
     */
    public static MemorySegment glad_glVertexAttribP2ui() {
        return glad_glVertexAttribP2ui$constants.SEGMENT.get(glad_glVertexAttribP2ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui
     * }
     */
    public static void glad_glVertexAttribP2ui(MemorySegment varValue) {
        glad_glVertexAttribP2ui$constants.SEGMENT.set(glad_glVertexAttribP2ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribP2ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribP2ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribP2ui$layout() {
        return glad_debug_glVertexAttribP2ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP2ui$segment() {
        return glad_debug_glVertexAttribP2ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP2ui() {
        return glad_debug_glVertexAttribP2ui$constants.SEGMENT.get(glad_debug_glVertexAttribP2ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui
     * }
     */
    public static void glad_debug_glVertexAttribP2ui(MemorySegment varValue) {
        glad_debug_glVertexAttribP2ui$constants.SEGMENT.set(glad_debug_glVertexAttribP2ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribP2uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribP2uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv
     * }
     */
    public static AddressLayout glad_glVertexAttribP2uiv$layout() {
        return glad_glVertexAttribP2uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv
     * }
     */
    public static MemorySegment glad_glVertexAttribP2uiv$segment() {
        return glad_glVertexAttribP2uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv
     * }
     */
    public static MemorySegment glad_glVertexAttribP2uiv() {
        return glad_glVertexAttribP2uiv$constants.SEGMENT.get(glad_glVertexAttribP2uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv
     * }
     */
    public static void glad_glVertexAttribP2uiv(MemorySegment varValue) {
        glad_glVertexAttribP2uiv$constants.SEGMENT.set(glad_glVertexAttribP2uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribP2uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribP2uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribP2uiv$layout() {
        return glad_debug_glVertexAttribP2uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP2uiv$segment() {
        return glad_debug_glVertexAttribP2uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP2uiv() {
        return glad_debug_glVertexAttribP2uiv$constants.SEGMENT.get(glad_debug_glVertexAttribP2uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv
     * }
     */
    public static void glad_debug_glVertexAttribP2uiv(MemorySegment varValue) {
        glad_debug_glVertexAttribP2uiv$constants.SEGMENT.set(glad_debug_glVertexAttribP2uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribP3ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribP3ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui
     * }
     */
    public static AddressLayout glad_glVertexAttribP3ui$layout() {
        return glad_glVertexAttribP3ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui
     * }
     */
    public static MemorySegment glad_glVertexAttribP3ui$segment() {
        return glad_glVertexAttribP3ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui
     * }
     */
    public static MemorySegment glad_glVertexAttribP3ui() {
        return glad_glVertexAttribP3ui$constants.SEGMENT.get(glad_glVertexAttribP3ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui
     * }
     */
    public static void glad_glVertexAttribP3ui(MemorySegment varValue) {
        glad_glVertexAttribP3ui$constants.SEGMENT.set(glad_glVertexAttribP3ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribP3ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribP3ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribP3ui$layout() {
        return glad_debug_glVertexAttribP3ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP3ui$segment() {
        return glad_debug_glVertexAttribP3ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP3ui() {
        return glad_debug_glVertexAttribP3ui$constants.SEGMENT.get(glad_debug_glVertexAttribP3ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui
     * }
     */
    public static void glad_debug_glVertexAttribP3ui(MemorySegment varValue) {
        glad_debug_glVertexAttribP3ui$constants.SEGMENT.set(glad_debug_glVertexAttribP3ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribP3uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribP3uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv
     * }
     */
    public static AddressLayout glad_glVertexAttribP3uiv$layout() {
        return glad_glVertexAttribP3uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv
     * }
     */
    public static MemorySegment glad_glVertexAttribP3uiv$segment() {
        return glad_glVertexAttribP3uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv
     * }
     */
    public static MemorySegment glad_glVertexAttribP3uiv() {
        return glad_glVertexAttribP3uiv$constants.SEGMENT.get(glad_glVertexAttribP3uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv
     * }
     */
    public static void glad_glVertexAttribP3uiv(MemorySegment varValue) {
        glad_glVertexAttribP3uiv$constants.SEGMENT.set(glad_glVertexAttribP3uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribP3uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribP3uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribP3uiv$layout() {
        return glad_debug_glVertexAttribP3uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP3uiv$segment() {
        return glad_debug_glVertexAttribP3uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP3uiv() {
        return glad_debug_glVertexAttribP3uiv$constants.SEGMENT.get(glad_debug_glVertexAttribP3uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv
     * }
     */
    public static void glad_debug_glVertexAttribP3uiv(MemorySegment varValue) {
        glad_debug_glVertexAttribP3uiv$constants.SEGMENT.set(glad_debug_glVertexAttribP3uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribP4ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribP4ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui
     * }
     */
    public static AddressLayout glad_glVertexAttribP4ui$layout() {
        return glad_glVertexAttribP4ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui
     * }
     */
    public static MemorySegment glad_glVertexAttribP4ui$segment() {
        return glad_glVertexAttribP4ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui
     * }
     */
    public static MemorySegment glad_glVertexAttribP4ui() {
        return glad_glVertexAttribP4ui$constants.SEGMENT.get(glad_glVertexAttribP4ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui
     * }
     */
    public static void glad_glVertexAttribP4ui(MemorySegment varValue) {
        glad_glVertexAttribP4ui$constants.SEGMENT.set(glad_glVertexAttribP4ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribP4ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribP4ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribP4ui$layout() {
        return glad_debug_glVertexAttribP4ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP4ui$segment() {
        return glad_debug_glVertexAttribP4ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP4ui() {
        return glad_debug_glVertexAttribP4ui$constants.SEGMENT.get(glad_debug_glVertexAttribP4ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui
     * }
     */
    public static void glad_debug_glVertexAttribP4ui(MemorySegment varValue) {
        glad_debug_glVertexAttribP4ui$constants.SEGMENT.set(glad_debug_glVertexAttribP4ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribP4uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribP4uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv
     * }
     */
    public static AddressLayout glad_glVertexAttribP4uiv$layout() {
        return glad_glVertexAttribP4uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv
     * }
     */
    public static MemorySegment glad_glVertexAttribP4uiv$segment() {
        return glad_glVertexAttribP4uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv
     * }
     */
    public static MemorySegment glad_glVertexAttribP4uiv() {
        return glad_glVertexAttribP4uiv$constants.SEGMENT.get(glad_glVertexAttribP4uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv
     * }
     */
    public static void glad_glVertexAttribP4uiv(MemorySegment varValue) {
        glad_glVertexAttribP4uiv$constants.SEGMENT.set(glad_glVertexAttribP4uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribP4uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribP4uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribP4uiv$layout() {
        return glad_debug_glVertexAttribP4uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP4uiv$segment() {
        return glad_debug_glVertexAttribP4uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribP4uiv() {
        return glad_debug_glVertexAttribP4uiv$constants.SEGMENT.get(glad_debug_glVertexAttribP4uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv
     * }
     */
    public static void glad_debug_glVertexAttribP4uiv(MemorySegment varValue) {
        glad_debug_glVertexAttribP4uiv$constants.SEGMENT.set(glad_debug_glVertexAttribP4uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribPointer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribPointer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer
     * }
     */
    public static AddressLayout glad_glVertexAttribPointer$layout() {
        return glad_glVertexAttribPointer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer
     * }
     */
    public static MemorySegment glad_glVertexAttribPointer$segment() {
        return glad_glVertexAttribPointer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer
     * }
     */
    public static MemorySegment glad_glVertexAttribPointer() {
        return glad_glVertexAttribPointer$constants.SEGMENT.get(glad_glVertexAttribPointer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer
     * }
     */
    public static void glad_glVertexAttribPointer(MemorySegment varValue) {
        glad_glVertexAttribPointer$constants.SEGMENT.set(glad_glVertexAttribPointer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribPointer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribPointer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribPointer$layout() {
        return glad_debug_glVertexAttribPointer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribPointer$segment() {
        return glad_debug_glVertexAttribPointer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribPointer() {
        return glad_debug_glVertexAttribPointer$constants.SEGMENT.get(glad_debug_glVertexAttribPointer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer
     * }
     */
    public static void glad_debug_glVertexAttribPointer(MemorySegment varValue) {
        glad_debug_glVertexAttribPointer$constants.SEGMENT.set(glad_debug_glVertexAttribPointer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribPointerARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribPointerARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB
     * }
     */
    public static AddressLayout glad_glVertexAttribPointerARB$layout() {
        return glad_glVertexAttribPointerARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB
     * }
     */
    public static MemorySegment glad_glVertexAttribPointerARB$segment() {
        return glad_glVertexAttribPointerARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB
     * }
     */
    public static MemorySegment glad_glVertexAttribPointerARB() {
        return glad_glVertexAttribPointerARB$constants.SEGMENT.get(glad_glVertexAttribPointerARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB
     * }
     */
    public static void glad_glVertexAttribPointerARB(MemorySegment varValue) {
        glad_glVertexAttribPointerARB$constants.SEGMENT.set(glad_glVertexAttribPointerARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribPointerARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribPointerARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_debug_glVertexAttribPointerARB
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribPointerARB$layout() {
        return glad_debug_glVertexAttribPointerARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_debug_glVertexAttribPointerARB
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribPointerARB$segment() {
        return glad_debug_glVertexAttribPointerARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_debug_glVertexAttribPointerARB
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribPointerARB() {
        return glad_debug_glVertexAttribPointerARB$constants.SEGMENT.get(glad_debug_glVertexAttribPointerARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_debug_glVertexAttribPointerARB
     * }
     */
    public static void glad_debug_glVertexAttribPointerARB(MemorySegment varValue) {
        glad_debug_glVertexAttribPointerARB$constants.SEGMENT.set(glad_debug_glVertexAttribPointerARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribPointerNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribPointerNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERNVPROC glad_glVertexAttribPointerNV
     * }
     */
    public static AddressLayout glad_glVertexAttribPointerNV$layout() {
        return glad_glVertexAttribPointerNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERNVPROC glad_glVertexAttribPointerNV
     * }
     */
    public static MemorySegment glad_glVertexAttribPointerNV$segment() {
        return glad_glVertexAttribPointerNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERNVPROC glad_glVertexAttribPointerNV
     * }
     */
    public static MemorySegment glad_glVertexAttribPointerNV() {
        return glad_glVertexAttribPointerNV$constants.SEGMENT.get(glad_glVertexAttribPointerNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERNVPROC glad_glVertexAttribPointerNV
     * }
     */
    public static void glad_glVertexAttribPointerNV(MemorySegment varValue) {
        glad_glVertexAttribPointerNV$constants.SEGMENT.set(glad_glVertexAttribPointerNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribPointerNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribPointerNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERNVPROC glad_debug_glVertexAttribPointerNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribPointerNV$layout() {
        return glad_debug_glVertexAttribPointerNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERNVPROC glad_debug_glVertexAttribPointerNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribPointerNV$segment() {
        return glad_debug_glVertexAttribPointerNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERNVPROC glad_debug_glVertexAttribPointerNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribPointerNV() {
        return glad_debug_glVertexAttribPointerNV$constants.SEGMENT.get(glad_debug_glVertexAttribPointerNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBPOINTERNVPROC glad_debug_glVertexAttribPointerNV
     * }
     */
    public static void glad_debug_glVertexAttribPointerNV(MemorySegment varValue) {
        glad_debug_glVertexAttribPointerNV$constants.SEGMENT.set(glad_debug_glVertexAttribPointerNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs1dvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs1dvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1DVNVPROC glad_glVertexAttribs1dvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs1dvNV$layout() {
        return glad_glVertexAttribs1dvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1DVNVPROC glad_glVertexAttribs1dvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs1dvNV$segment() {
        return glad_glVertexAttribs1dvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1DVNVPROC glad_glVertexAttribs1dvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs1dvNV() {
        return glad_glVertexAttribs1dvNV$constants.SEGMENT.get(glad_glVertexAttribs1dvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1DVNVPROC glad_glVertexAttribs1dvNV
     * }
     */
    public static void glad_glVertexAttribs1dvNV(MemorySegment varValue) {
        glad_glVertexAttribs1dvNV$constants.SEGMENT.set(glad_glVertexAttribs1dvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs1dvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs1dvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1DVNVPROC glad_debug_glVertexAttribs1dvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs1dvNV$layout() {
        return glad_debug_glVertexAttribs1dvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1DVNVPROC glad_debug_glVertexAttribs1dvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs1dvNV$segment() {
        return glad_debug_glVertexAttribs1dvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1DVNVPROC glad_debug_glVertexAttribs1dvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs1dvNV() {
        return glad_debug_glVertexAttribs1dvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs1dvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1DVNVPROC glad_debug_glVertexAttribs1dvNV
     * }
     */
    public static void glad_debug_glVertexAttribs1dvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs1dvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs1dvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs1fvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs1fvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1FVNVPROC glad_glVertexAttribs1fvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs1fvNV$layout() {
        return glad_glVertexAttribs1fvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1FVNVPROC glad_glVertexAttribs1fvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs1fvNV$segment() {
        return glad_glVertexAttribs1fvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1FVNVPROC glad_glVertexAttribs1fvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs1fvNV() {
        return glad_glVertexAttribs1fvNV$constants.SEGMENT.get(glad_glVertexAttribs1fvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1FVNVPROC glad_glVertexAttribs1fvNV
     * }
     */
    public static void glad_glVertexAttribs1fvNV(MemorySegment varValue) {
        glad_glVertexAttribs1fvNV$constants.SEGMENT.set(glad_glVertexAttribs1fvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs1fvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs1fvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1FVNVPROC glad_debug_glVertexAttribs1fvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs1fvNV$layout() {
        return glad_debug_glVertexAttribs1fvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1FVNVPROC glad_debug_glVertexAttribs1fvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs1fvNV$segment() {
        return glad_debug_glVertexAttribs1fvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1FVNVPROC glad_debug_glVertexAttribs1fvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs1fvNV() {
        return glad_debug_glVertexAttribs1fvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs1fvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1FVNVPROC glad_debug_glVertexAttribs1fvNV
     * }
     */
    public static void glad_debug_glVertexAttribs1fvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs1fvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs1fvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs1svNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs1svNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1SVNVPROC glad_glVertexAttribs1svNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs1svNV$layout() {
        return glad_glVertexAttribs1svNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1SVNVPROC glad_glVertexAttribs1svNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs1svNV$segment() {
        return glad_glVertexAttribs1svNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1SVNVPROC glad_glVertexAttribs1svNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs1svNV() {
        return glad_glVertexAttribs1svNV$constants.SEGMENT.get(glad_glVertexAttribs1svNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1SVNVPROC glad_glVertexAttribs1svNV
     * }
     */
    public static void glad_glVertexAttribs1svNV(MemorySegment varValue) {
        glad_glVertexAttribs1svNV$constants.SEGMENT.set(glad_glVertexAttribs1svNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs1svNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs1svNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1SVNVPROC glad_debug_glVertexAttribs1svNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs1svNV$layout() {
        return glad_debug_glVertexAttribs1svNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1SVNVPROC glad_debug_glVertexAttribs1svNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs1svNV$segment() {
        return glad_debug_glVertexAttribs1svNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1SVNVPROC glad_debug_glVertexAttribs1svNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs1svNV() {
        return glad_debug_glVertexAttribs1svNV$constants.SEGMENT.get(glad_debug_glVertexAttribs1svNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS1SVNVPROC glad_debug_glVertexAttribs1svNV
     * }
     */
    public static void glad_debug_glVertexAttribs1svNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs1svNV$constants.SEGMENT.set(glad_debug_glVertexAttribs1svNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs2dvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs2dvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2DVNVPROC glad_glVertexAttribs2dvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs2dvNV$layout() {
        return glad_glVertexAttribs2dvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2DVNVPROC glad_glVertexAttribs2dvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs2dvNV$segment() {
        return glad_glVertexAttribs2dvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2DVNVPROC glad_glVertexAttribs2dvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs2dvNV() {
        return glad_glVertexAttribs2dvNV$constants.SEGMENT.get(glad_glVertexAttribs2dvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2DVNVPROC glad_glVertexAttribs2dvNV
     * }
     */
    public static void glad_glVertexAttribs2dvNV(MemorySegment varValue) {
        glad_glVertexAttribs2dvNV$constants.SEGMENT.set(glad_glVertexAttribs2dvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs2dvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs2dvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2DVNVPROC glad_debug_glVertexAttribs2dvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs2dvNV$layout() {
        return glad_debug_glVertexAttribs2dvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2DVNVPROC glad_debug_glVertexAttribs2dvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs2dvNV$segment() {
        return glad_debug_glVertexAttribs2dvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2DVNVPROC glad_debug_glVertexAttribs2dvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs2dvNV() {
        return glad_debug_glVertexAttribs2dvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs2dvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2DVNVPROC glad_debug_glVertexAttribs2dvNV
     * }
     */
    public static void glad_debug_glVertexAttribs2dvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs2dvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs2dvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs2fvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs2fvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2FVNVPROC glad_glVertexAttribs2fvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs2fvNV$layout() {
        return glad_glVertexAttribs2fvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2FVNVPROC glad_glVertexAttribs2fvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs2fvNV$segment() {
        return glad_glVertexAttribs2fvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2FVNVPROC glad_glVertexAttribs2fvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs2fvNV() {
        return glad_glVertexAttribs2fvNV$constants.SEGMENT.get(glad_glVertexAttribs2fvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2FVNVPROC glad_glVertexAttribs2fvNV
     * }
     */
    public static void glad_glVertexAttribs2fvNV(MemorySegment varValue) {
        glad_glVertexAttribs2fvNV$constants.SEGMENT.set(glad_glVertexAttribs2fvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs2fvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs2fvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2FVNVPROC glad_debug_glVertexAttribs2fvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs2fvNV$layout() {
        return glad_debug_glVertexAttribs2fvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2FVNVPROC glad_debug_glVertexAttribs2fvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs2fvNV$segment() {
        return glad_debug_glVertexAttribs2fvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2FVNVPROC glad_debug_glVertexAttribs2fvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs2fvNV() {
        return glad_debug_glVertexAttribs2fvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs2fvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2FVNVPROC glad_debug_glVertexAttribs2fvNV
     * }
     */
    public static void glad_debug_glVertexAttribs2fvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs2fvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs2fvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs2svNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs2svNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2SVNVPROC glad_glVertexAttribs2svNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs2svNV$layout() {
        return glad_glVertexAttribs2svNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2SVNVPROC glad_glVertexAttribs2svNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs2svNV$segment() {
        return glad_glVertexAttribs2svNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2SVNVPROC glad_glVertexAttribs2svNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs2svNV() {
        return glad_glVertexAttribs2svNV$constants.SEGMENT.get(glad_glVertexAttribs2svNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2SVNVPROC glad_glVertexAttribs2svNV
     * }
     */
    public static void glad_glVertexAttribs2svNV(MemorySegment varValue) {
        glad_glVertexAttribs2svNV$constants.SEGMENT.set(glad_glVertexAttribs2svNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs2svNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs2svNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2SVNVPROC glad_debug_glVertexAttribs2svNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs2svNV$layout() {
        return glad_debug_glVertexAttribs2svNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2SVNVPROC glad_debug_glVertexAttribs2svNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs2svNV$segment() {
        return glad_debug_glVertexAttribs2svNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2SVNVPROC glad_debug_glVertexAttribs2svNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs2svNV() {
        return glad_debug_glVertexAttribs2svNV$constants.SEGMENT.get(glad_debug_glVertexAttribs2svNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS2SVNVPROC glad_debug_glVertexAttribs2svNV
     * }
     */
    public static void glad_debug_glVertexAttribs2svNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs2svNV$constants.SEGMENT.set(glad_debug_glVertexAttribs2svNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs3dvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs3dvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3DVNVPROC glad_glVertexAttribs3dvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs3dvNV$layout() {
        return glad_glVertexAttribs3dvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3DVNVPROC glad_glVertexAttribs3dvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs3dvNV$segment() {
        return glad_glVertexAttribs3dvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3DVNVPROC glad_glVertexAttribs3dvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs3dvNV() {
        return glad_glVertexAttribs3dvNV$constants.SEGMENT.get(glad_glVertexAttribs3dvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3DVNVPROC glad_glVertexAttribs3dvNV
     * }
     */
    public static void glad_glVertexAttribs3dvNV(MemorySegment varValue) {
        glad_glVertexAttribs3dvNV$constants.SEGMENT.set(glad_glVertexAttribs3dvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs3dvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs3dvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3DVNVPROC glad_debug_glVertexAttribs3dvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs3dvNV$layout() {
        return glad_debug_glVertexAttribs3dvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3DVNVPROC glad_debug_glVertexAttribs3dvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs3dvNV$segment() {
        return glad_debug_glVertexAttribs3dvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3DVNVPROC glad_debug_glVertexAttribs3dvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs3dvNV() {
        return glad_debug_glVertexAttribs3dvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs3dvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3DVNVPROC glad_debug_glVertexAttribs3dvNV
     * }
     */
    public static void glad_debug_glVertexAttribs3dvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs3dvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs3dvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs3fvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs3fvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3FVNVPROC glad_glVertexAttribs3fvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs3fvNV$layout() {
        return glad_glVertexAttribs3fvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3FVNVPROC glad_glVertexAttribs3fvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs3fvNV$segment() {
        return glad_glVertexAttribs3fvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3FVNVPROC glad_glVertexAttribs3fvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs3fvNV() {
        return glad_glVertexAttribs3fvNV$constants.SEGMENT.get(glad_glVertexAttribs3fvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3FVNVPROC glad_glVertexAttribs3fvNV
     * }
     */
    public static void glad_glVertexAttribs3fvNV(MemorySegment varValue) {
        glad_glVertexAttribs3fvNV$constants.SEGMENT.set(glad_glVertexAttribs3fvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs3fvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs3fvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3FVNVPROC glad_debug_glVertexAttribs3fvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs3fvNV$layout() {
        return glad_debug_glVertexAttribs3fvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3FVNVPROC glad_debug_glVertexAttribs3fvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs3fvNV$segment() {
        return glad_debug_glVertexAttribs3fvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3FVNVPROC glad_debug_glVertexAttribs3fvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs3fvNV() {
        return glad_debug_glVertexAttribs3fvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs3fvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3FVNVPROC glad_debug_glVertexAttribs3fvNV
     * }
     */
    public static void glad_debug_glVertexAttribs3fvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs3fvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs3fvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs3svNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs3svNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3SVNVPROC glad_glVertexAttribs3svNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs3svNV$layout() {
        return glad_glVertexAttribs3svNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3SVNVPROC glad_glVertexAttribs3svNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs3svNV$segment() {
        return glad_glVertexAttribs3svNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3SVNVPROC glad_glVertexAttribs3svNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs3svNV() {
        return glad_glVertexAttribs3svNV$constants.SEGMENT.get(glad_glVertexAttribs3svNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3SVNVPROC glad_glVertexAttribs3svNV
     * }
     */
    public static void glad_glVertexAttribs3svNV(MemorySegment varValue) {
        glad_glVertexAttribs3svNV$constants.SEGMENT.set(glad_glVertexAttribs3svNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs3svNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs3svNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3SVNVPROC glad_debug_glVertexAttribs3svNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs3svNV$layout() {
        return glad_debug_glVertexAttribs3svNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3SVNVPROC glad_debug_glVertexAttribs3svNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs3svNV$segment() {
        return glad_debug_glVertexAttribs3svNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3SVNVPROC glad_debug_glVertexAttribs3svNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs3svNV() {
        return glad_debug_glVertexAttribs3svNV$constants.SEGMENT.get(glad_debug_glVertexAttribs3svNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS3SVNVPROC glad_debug_glVertexAttribs3svNV
     * }
     */
    public static void glad_debug_glVertexAttribs3svNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs3svNV$constants.SEGMENT.set(glad_debug_glVertexAttribs3svNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs4dvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs4dvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4DVNVPROC glad_glVertexAttribs4dvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs4dvNV$layout() {
        return glad_glVertexAttribs4dvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4DVNVPROC glad_glVertexAttribs4dvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs4dvNV$segment() {
        return glad_glVertexAttribs4dvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4DVNVPROC glad_glVertexAttribs4dvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs4dvNV() {
        return glad_glVertexAttribs4dvNV$constants.SEGMENT.get(glad_glVertexAttribs4dvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4DVNVPROC glad_glVertexAttribs4dvNV
     * }
     */
    public static void glad_glVertexAttribs4dvNV(MemorySegment varValue) {
        glad_glVertexAttribs4dvNV$constants.SEGMENT.set(glad_glVertexAttribs4dvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs4dvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs4dvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4DVNVPROC glad_debug_glVertexAttribs4dvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs4dvNV$layout() {
        return glad_debug_glVertexAttribs4dvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4DVNVPROC glad_debug_glVertexAttribs4dvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs4dvNV$segment() {
        return glad_debug_glVertexAttribs4dvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4DVNVPROC glad_debug_glVertexAttribs4dvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs4dvNV() {
        return glad_debug_glVertexAttribs4dvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs4dvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4DVNVPROC glad_debug_glVertexAttribs4dvNV
     * }
     */
    public static void glad_debug_glVertexAttribs4dvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs4dvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs4dvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs4fvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs4fvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4FVNVPROC glad_glVertexAttribs4fvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs4fvNV$layout() {
        return glad_glVertexAttribs4fvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4FVNVPROC glad_glVertexAttribs4fvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs4fvNV$segment() {
        return glad_glVertexAttribs4fvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4FVNVPROC glad_glVertexAttribs4fvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs4fvNV() {
        return glad_glVertexAttribs4fvNV$constants.SEGMENT.get(glad_glVertexAttribs4fvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4FVNVPROC glad_glVertexAttribs4fvNV
     * }
     */
    public static void glad_glVertexAttribs4fvNV(MemorySegment varValue) {
        glad_glVertexAttribs4fvNV$constants.SEGMENT.set(glad_glVertexAttribs4fvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs4fvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs4fvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4FVNVPROC glad_debug_glVertexAttribs4fvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs4fvNV$layout() {
        return glad_debug_glVertexAttribs4fvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4FVNVPROC glad_debug_glVertexAttribs4fvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs4fvNV$segment() {
        return glad_debug_glVertexAttribs4fvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4FVNVPROC glad_debug_glVertexAttribs4fvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs4fvNV() {
        return glad_debug_glVertexAttribs4fvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs4fvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4FVNVPROC glad_debug_glVertexAttribs4fvNV
     * }
     */
    public static void glad_debug_glVertexAttribs4fvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs4fvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs4fvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs4svNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs4svNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4SVNVPROC glad_glVertexAttribs4svNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs4svNV$layout() {
        return glad_glVertexAttribs4svNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4SVNVPROC glad_glVertexAttribs4svNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs4svNV$segment() {
        return glad_glVertexAttribs4svNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4SVNVPROC glad_glVertexAttribs4svNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs4svNV() {
        return glad_glVertexAttribs4svNV$constants.SEGMENT.get(glad_glVertexAttribs4svNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4SVNVPROC glad_glVertexAttribs4svNV
     * }
     */
    public static void glad_glVertexAttribs4svNV(MemorySegment varValue) {
        glad_glVertexAttribs4svNV$constants.SEGMENT.set(glad_glVertexAttribs4svNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs4svNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs4svNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4SVNVPROC glad_debug_glVertexAttribs4svNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs4svNV$layout() {
        return glad_debug_glVertexAttribs4svNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4SVNVPROC glad_debug_glVertexAttribs4svNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs4svNV$segment() {
        return glad_debug_glVertexAttribs4svNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4SVNVPROC glad_debug_glVertexAttribs4svNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs4svNV() {
        return glad_debug_glVertexAttribs4svNV$constants.SEGMENT.get(glad_debug_glVertexAttribs4svNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4SVNVPROC glad_debug_glVertexAttribs4svNV
     * }
     */
    public static void glad_debug_glVertexAttribs4svNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs4svNV$constants.SEGMENT.set(glad_debug_glVertexAttribs4svNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexAttribs4ubvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexAttribs4ubvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4UBVNVPROC glad_glVertexAttribs4ubvNV
     * }
     */
    public static AddressLayout glad_glVertexAttribs4ubvNV$layout() {
        return glad_glVertexAttribs4ubvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4UBVNVPROC glad_glVertexAttribs4ubvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs4ubvNV$segment() {
        return glad_glVertexAttribs4ubvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4UBVNVPROC glad_glVertexAttribs4ubvNV
     * }
     */
    public static MemorySegment glad_glVertexAttribs4ubvNV() {
        return glad_glVertexAttribs4ubvNV$constants.SEGMENT.get(glad_glVertexAttribs4ubvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4UBVNVPROC glad_glVertexAttribs4ubvNV
     * }
     */
    public static void glad_glVertexAttribs4ubvNV(MemorySegment varValue) {
        glad_glVertexAttribs4ubvNV$constants.SEGMENT.set(glad_glVertexAttribs4ubvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexAttribs4ubvNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexAttribs4ubvNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4UBVNVPROC glad_debug_glVertexAttribs4ubvNV
     * }
     */
    public static AddressLayout glad_debug_glVertexAttribs4ubvNV$layout() {
        return glad_debug_glVertexAttribs4ubvNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4UBVNVPROC glad_debug_glVertexAttribs4ubvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs4ubvNV$segment() {
        return glad_debug_glVertexAttribs4ubvNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4UBVNVPROC glad_debug_glVertexAttribs4ubvNV
     * }
     */
    public static MemorySegment glad_debug_glVertexAttribs4ubvNV() {
        return glad_debug_glVertexAttribs4ubvNV$constants.SEGMENT.get(glad_debug_glVertexAttribs4ubvNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXATTRIBS4UBVNVPROC glad_debug_glVertexAttribs4ubvNV
     * }
     */
    public static void glad_debug_glVertexAttribs4ubvNV(MemorySegment varValue) {
        glad_debug_glVertexAttribs4ubvNV$constants.SEGMENT.set(glad_debug_glVertexAttribs4ubvNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexBindingDivisor$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexBindingDivisor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor
     * }
     */
    public static AddressLayout glad_glVertexBindingDivisor$layout() {
        return glad_glVertexBindingDivisor$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor
     * }
     */
    public static MemorySegment glad_glVertexBindingDivisor$segment() {
        return glad_glVertexBindingDivisor$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor
     * }
     */
    public static MemorySegment glad_glVertexBindingDivisor() {
        return glad_glVertexBindingDivisor$constants.SEGMENT.get(glad_glVertexBindingDivisor$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor
     * }
     */
    public static void glad_glVertexBindingDivisor(MemorySegment varValue) {
        glad_glVertexBindingDivisor$constants.SEGMENT.set(glad_glVertexBindingDivisor$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexBindingDivisor$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexBindingDivisor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXBINDINGDIVISORPROC glad_debug_glVertexBindingDivisor
     * }
     */
    public static AddressLayout glad_debug_glVertexBindingDivisor$layout() {
        return glad_debug_glVertexBindingDivisor$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXBINDINGDIVISORPROC glad_debug_glVertexBindingDivisor
     * }
     */
    public static MemorySegment glad_debug_glVertexBindingDivisor$segment() {
        return glad_debug_glVertexBindingDivisor$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXBINDINGDIVISORPROC glad_debug_glVertexBindingDivisor
     * }
     */
    public static MemorySegment glad_debug_glVertexBindingDivisor() {
        return glad_debug_glVertexBindingDivisor$constants.SEGMENT.get(glad_debug_glVertexBindingDivisor$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXBINDINGDIVISORPROC glad_debug_glVertexBindingDivisor
     * }
     */
    public static void glad_debug_glVertexBindingDivisor(MemorySegment varValue) {
        glad_debug_glVertexBindingDivisor$constants.SEGMENT.set(glad_debug_glVertexBindingDivisor$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexP2ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexP2ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIPROC glad_glVertexP2ui
     * }
     */
    public static AddressLayout glad_glVertexP2ui$layout() {
        return glad_glVertexP2ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIPROC glad_glVertexP2ui
     * }
     */
    public static MemorySegment glad_glVertexP2ui$segment() {
        return glad_glVertexP2ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIPROC glad_glVertexP2ui
     * }
     */
    public static MemorySegment glad_glVertexP2ui() {
        return glad_glVertexP2ui$constants.SEGMENT.get(glad_glVertexP2ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIPROC glad_glVertexP2ui
     * }
     */
    public static void glad_glVertexP2ui(MemorySegment varValue) {
        glad_glVertexP2ui$constants.SEGMENT.set(glad_glVertexP2ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexP2ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexP2ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIPROC glad_debug_glVertexP2ui
     * }
     */
    public static AddressLayout glad_debug_glVertexP2ui$layout() {
        return glad_debug_glVertexP2ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIPROC glad_debug_glVertexP2ui
     * }
     */
    public static MemorySegment glad_debug_glVertexP2ui$segment() {
        return glad_debug_glVertexP2ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIPROC glad_debug_glVertexP2ui
     * }
     */
    public static MemorySegment glad_debug_glVertexP2ui() {
        return glad_debug_glVertexP2ui$constants.SEGMENT.get(glad_debug_glVertexP2ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIPROC glad_debug_glVertexP2ui
     * }
     */
    public static void glad_debug_glVertexP2ui(MemorySegment varValue) {
        glad_debug_glVertexP2ui$constants.SEGMENT.set(glad_debug_glVertexP2ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexP2uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexP2uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv
     * }
     */
    public static AddressLayout glad_glVertexP2uiv$layout() {
        return glad_glVertexP2uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv
     * }
     */
    public static MemorySegment glad_glVertexP2uiv$segment() {
        return glad_glVertexP2uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv
     * }
     */
    public static MemorySegment glad_glVertexP2uiv() {
        return glad_glVertexP2uiv$constants.SEGMENT.get(glad_glVertexP2uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv
     * }
     */
    public static void glad_glVertexP2uiv(MemorySegment varValue) {
        glad_glVertexP2uiv$constants.SEGMENT.set(glad_glVertexP2uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexP2uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexP2uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIVPROC glad_debug_glVertexP2uiv
     * }
     */
    public static AddressLayout glad_debug_glVertexP2uiv$layout() {
        return glad_debug_glVertexP2uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIVPROC glad_debug_glVertexP2uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexP2uiv$segment() {
        return glad_debug_glVertexP2uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIVPROC glad_debug_glVertexP2uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexP2uiv() {
        return glad_debug_glVertexP2uiv$constants.SEGMENT.get(glad_debug_glVertexP2uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP2UIVPROC glad_debug_glVertexP2uiv
     * }
     */
    public static void glad_debug_glVertexP2uiv(MemorySegment varValue) {
        glad_debug_glVertexP2uiv$constants.SEGMENT.set(glad_debug_glVertexP2uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexP3ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexP3ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIPROC glad_glVertexP3ui
     * }
     */
    public static AddressLayout glad_glVertexP3ui$layout() {
        return glad_glVertexP3ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIPROC glad_glVertexP3ui
     * }
     */
    public static MemorySegment glad_glVertexP3ui$segment() {
        return glad_glVertexP3ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIPROC glad_glVertexP3ui
     * }
     */
    public static MemorySegment glad_glVertexP3ui() {
        return glad_glVertexP3ui$constants.SEGMENT.get(glad_glVertexP3ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIPROC glad_glVertexP3ui
     * }
     */
    public static void glad_glVertexP3ui(MemorySegment varValue) {
        glad_glVertexP3ui$constants.SEGMENT.set(glad_glVertexP3ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexP3ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexP3ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIPROC glad_debug_glVertexP3ui
     * }
     */
    public static AddressLayout glad_debug_glVertexP3ui$layout() {
        return glad_debug_glVertexP3ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIPROC glad_debug_glVertexP3ui
     * }
     */
    public static MemorySegment glad_debug_glVertexP3ui$segment() {
        return glad_debug_glVertexP3ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIPROC glad_debug_glVertexP3ui
     * }
     */
    public static MemorySegment glad_debug_glVertexP3ui() {
        return glad_debug_glVertexP3ui$constants.SEGMENT.get(glad_debug_glVertexP3ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIPROC glad_debug_glVertexP3ui
     * }
     */
    public static void glad_debug_glVertexP3ui(MemorySegment varValue) {
        glad_debug_glVertexP3ui$constants.SEGMENT.set(glad_debug_glVertexP3ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexP3uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexP3uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv
     * }
     */
    public static AddressLayout glad_glVertexP3uiv$layout() {
        return glad_glVertexP3uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv
     * }
     */
    public static MemorySegment glad_glVertexP3uiv$segment() {
        return glad_glVertexP3uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv
     * }
     */
    public static MemorySegment glad_glVertexP3uiv() {
        return glad_glVertexP3uiv$constants.SEGMENT.get(glad_glVertexP3uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv
     * }
     */
    public static void glad_glVertexP3uiv(MemorySegment varValue) {
        glad_glVertexP3uiv$constants.SEGMENT.set(glad_glVertexP3uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexP3uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexP3uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIVPROC glad_debug_glVertexP3uiv
     * }
     */
    public static AddressLayout glad_debug_glVertexP3uiv$layout() {
        return glad_debug_glVertexP3uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIVPROC glad_debug_glVertexP3uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexP3uiv$segment() {
        return glad_debug_glVertexP3uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIVPROC glad_debug_glVertexP3uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexP3uiv() {
        return glad_debug_glVertexP3uiv$constants.SEGMENT.get(glad_debug_glVertexP3uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP3UIVPROC glad_debug_glVertexP3uiv
     * }
     */
    public static void glad_debug_glVertexP3uiv(MemorySegment varValue) {
        glad_debug_glVertexP3uiv$constants.SEGMENT.set(glad_debug_glVertexP3uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexP4ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexP4ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIPROC glad_glVertexP4ui
     * }
     */
    public static AddressLayout glad_glVertexP4ui$layout() {
        return glad_glVertexP4ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIPROC glad_glVertexP4ui
     * }
     */
    public static MemorySegment glad_glVertexP4ui$segment() {
        return glad_glVertexP4ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIPROC glad_glVertexP4ui
     * }
     */
    public static MemorySegment glad_glVertexP4ui() {
        return glad_glVertexP4ui$constants.SEGMENT.get(glad_glVertexP4ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIPROC glad_glVertexP4ui
     * }
     */
    public static void glad_glVertexP4ui(MemorySegment varValue) {
        glad_glVertexP4ui$constants.SEGMENT.set(glad_glVertexP4ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexP4ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexP4ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIPROC glad_debug_glVertexP4ui
     * }
     */
    public static AddressLayout glad_debug_glVertexP4ui$layout() {
        return glad_debug_glVertexP4ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIPROC glad_debug_glVertexP4ui
     * }
     */
    public static MemorySegment glad_debug_glVertexP4ui$segment() {
        return glad_debug_glVertexP4ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIPROC glad_debug_glVertexP4ui
     * }
     */
    public static MemorySegment glad_debug_glVertexP4ui() {
        return glad_debug_glVertexP4ui$constants.SEGMENT.get(glad_debug_glVertexP4ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIPROC glad_debug_glVertexP4ui
     * }
     */
    public static void glad_debug_glVertexP4ui(MemorySegment varValue) {
        glad_debug_glVertexP4ui$constants.SEGMENT.set(glad_debug_glVertexP4ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexP4uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexP4uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv
     * }
     */
    public static AddressLayout glad_glVertexP4uiv$layout() {
        return glad_glVertexP4uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv
     * }
     */
    public static MemorySegment glad_glVertexP4uiv$segment() {
        return glad_glVertexP4uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv
     * }
     */
    public static MemorySegment glad_glVertexP4uiv() {
        return glad_glVertexP4uiv$constants.SEGMENT.get(glad_glVertexP4uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv
     * }
     */
    public static void glad_glVertexP4uiv(MemorySegment varValue) {
        glad_glVertexP4uiv$constants.SEGMENT.set(glad_glVertexP4uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexP4uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexP4uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIVPROC glad_debug_glVertexP4uiv
     * }
     */
    public static AddressLayout glad_debug_glVertexP4uiv$layout() {
        return glad_debug_glVertexP4uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIVPROC glad_debug_glVertexP4uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexP4uiv$segment() {
        return glad_debug_glVertexP4uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIVPROC glad_debug_glVertexP4uiv
     * }
     */
    public static MemorySegment glad_debug_glVertexP4uiv() {
        return glad_debug_glVertexP4uiv$constants.SEGMENT.get(glad_debug_glVertexP4uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXP4UIVPROC glad_debug_glVertexP4uiv
     * }
     */
    public static void glad_debug_glVertexP4uiv(MemorySegment varValue) {
        glad_debug_glVertexP4uiv$constants.SEGMENT.set(glad_debug_glVertexP4uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexPointer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexPointer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTERPROC glad_glVertexPointer
     * }
     */
    public static AddressLayout glad_glVertexPointer$layout() {
        return glad_glVertexPointer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTERPROC glad_glVertexPointer
     * }
     */
    public static MemorySegment glad_glVertexPointer$segment() {
        return glad_glVertexPointer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTERPROC glad_glVertexPointer
     * }
     */
    public static MemorySegment glad_glVertexPointer() {
        return glad_glVertexPointer$constants.SEGMENT.get(glad_glVertexPointer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTERPROC glad_glVertexPointer
     * }
     */
    public static void glad_glVertexPointer(MemorySegment varValue) {
        glad_glVertexPointer$constants.SEGMENT.set(glad_glVertexPointer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexPointer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexPointer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTERPROC glad_debug_glVertexPointer
     * }
     */
    public static AddressLayout glad_debug_glVertexPointer$layout() {
        return glad_debug_glVertexPointer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTERPROC glad_debug_glVertexPointer
     * }
     */
    public static MemorySegment glad_debug_glVertexPointer$segment() {
        return glad_debug_glVertexPointer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTERPROC glad_debug_glVertexPointer
     * }
     */
    public static MemorySegment glad_debug_glVertexPointer() {
        return glad_debug_glVertexPointer$constants.SEGMENT.get(glad_debug_glVertexPointer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTERPROC glad_debug_glVertexPointer
     * }
     */
    public static void glad_debug_glVertexPointer(MemorySegment varValue) {
        glad_debug_glVertexPointer$constants.SEGMENT.set(glad_debug_glVertexPointer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glVertexPointerEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glVertexPointerEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTEREXTPROC glad_glVertexPointerEXT
     * }
     */
    public static AddressLayout glad_glVertexPointerEXT$layout() {
        return glad_glVertexPointerEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTEREXTPROC glad_glVertexPointerEXT
     * }
     */
    public static MemorySegment glad_glVertexPointerEXT$segment() {
        return glad_glVertexPointerEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTEREXTPROC glad_glVertexPointerEXT
     * }
     */
    public static MemorySegment glad_glVertexPointerEXT() {
        return glad_glVertexPointerEXT$constants.SEGMENT.get(glad_glVertexPointerEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTEREXTPROC glad_glVertexPointerEXT
     * }
     */
    public static void glad_glVertexPointerEXT(MemorySegment varValue) {
        glad_glVertexPointerEXT$constants.SEGMENT.set(glad_glVertexPointerEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glVertexPointerEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glVertexPointerEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTEREXTPROC glad_debug_glVertexPointerEXT
     * }
     */
    public static AddressLayout glad_debug_glVertexPointerEXT$layout() {
        return glad_debug_glVertexPointerEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTEREXTPROC glad_debug_glVertexPointerEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexPointerEXT$segment() {
        return glad_debug_glVertexPointerEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTEREXTPROC glad_debug_glVertexPointerEXT
     * }
     */
    public static MemorySegment glad_debug_glVertexPointerEXT() {
        return glad_debug_glVertexPointerEXT$constants.SEGMENT.get(glad_debug_glVertexPointerEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVERTEXPOINTEREXTPROC glad_debug_glVertexPointerEXT
     * }
     */
    public static void glad_debug_glVertexPointerEXT(MemorySegment varValue) {
        glad_debug_glVertexPointerEXT$constants.SEGMENT.set(glad_debug_glVertexPointerEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glViewport$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glViewport").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTPROC glad_glViewport
     * }
     */
    public static AddressLayout glad_glViewport$layout() {
        return glad_glViewport$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTPROC glad_glViewport
     * }
     */
    public static MemorySegment glad_glViewport$segment() {
        return glad_glViewport$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTPROC glad_glViewport
     * }
     */
    public static MemorySegment glad_glViewport() {
        return glad_glViewport$constants.SEGMENT.get(glad_glViewport$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTPROC glad_glViewport
     * }
     */
    public static void glad_glViewport(MemorySegment varValue) {
        glad_glViewport$constants.SEGMENT.set(glad_glViewport$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glViewport$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glViewport").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTPROC glad_debug_glViewport
     * }
     */
    public static AddressLayout glad_debug_glViewport$layout() {
        return glad_debug_glViewport$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTPROC glad_debug_glViewport
     * }
     */
    public static MemorySegment glad_debug_glViewport$segment() {
        return glad_debug_glViewport$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTPROC glad_debug_glViewport
     * }
     */
    public static MemorySegment glad_debug_glViewport() {
        return glad_debug_glViewport$constants.SEGMENT.get(glad_debug_glViewport$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTPROC glad_debug_glViewport
     * }
     */
    public static void glad_debug_glViewport(MemorySegment varValue) {
        glad_debug_glViewport$constants.SEGMENT.set(glad_debug_glViewport$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glViewportArrayv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glViewportArrayv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv
     * }
     */
    public static AddressLayout glad_glViewportArrayv$layout() {
        return glad_glViewportArrayv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv
     * }
     */
    public static MemorySegment glad_glViewportArrayv$segment() {
        return glad_glViewportArrayv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv
     * }
     */
    public static MemorySegment glad_glViewportArrayv() {
        return glad_glViewportArrayv$constants.SEGMENT.get(glad_glViewportArrayv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv
     * }
     */
    public static void glad_glViewportArrayv(MemorySegment varValue) {
        glad_glViewportArrayv$constants.SEGMENT.set(glad_glViewportArrayv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glViewportArrayv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glViewportArrayv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv
     * }
     */
    public static AddressLayout glad_debug_glViewportArrayv$layout() {
        return glad_debug_glViewportArrayv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv
     * }
     */
    public static MemorySegment glad_debug_glViewportArrayv$segment() {
        return glad_debug_glViewportArrayv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv
     * }
     */
    public static MemorySegment glad_debug_glViewportArrayv() {
        return glad_debug_glViewportArrayv$constants.SEGMENT.get(glad_debug_glViewportArrayv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv
     * }
     */
    public static void glad_debug_glViewportArrayv(MemorySegment varValue) {
        glad_debug_glViewportArrayv$constants.SEGMENT.set(glad_debug_glViewportArrayv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glViewportIndexedf$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glViewportIndexedf").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf
     * }
     */
    public static AddressLayout glad_glViewportIndexedf$layout() {
        return glad_glViewportIndexedf$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf
     * }
     */
    public static MemorySegment glad_glViewportIndexedf$segment() {
        return glad_glViewportIndexedf$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf
     * }
     */
    public static MemorySegment glad_glViewportIndexedf() {
        return glad_glViewportIndexedf$constants.SEGMENT.get(glad_glViewportIndexedf$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf
     * }
     */
    public static void glad_glViewportIndexedf(MemorySegment varValue) {
        glad_glViewportIndexedf$constants.SEGMENT.set(glad_glViewportIndexedf$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glViewportIndexedf$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glViewportIndexedf").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf
     * }
     */
    public static AddressLayout glad_debug_glViewportIndexedf$layout() {
        return glad_debug_glViewportIndexedf$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf
     * }
     */
    public static MemorySegment glad_debug_glViewportIndexedf$segment() {
        return glad_debug_glViewportIndexedf$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf
     * }
     */
    public static MemorySegment glad_debug_glViewportIndexedf() {
        return glad_debug_glViewportIndexedf$constants.SEGMENT.get(glad_debug_glViewportIndexedf$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf
     * }
     */
    public static void glad_debug_glViewportIndexedf(MemorySegment varValue) {
        glad_debug_glViewportIndexedf$constants.SEGMENT.set(glad_debug_glViewportIndexedf$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glViewportIndexedfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glViewportIndexedfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv
     * }
     */
    public static AddressLayout glad_glViewportIndexedfv$layout() {
        return glad_glViewportIndexedfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv
     * }
     */
    public static MemorySegment glad_glViewportIndexedfv$segment() {
        return glad_glViewportIndexedfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv
     * }
     */
    public static MemorySegment glad_glViewportIndexedfv() {
        return glad_glViewportIndexedfv$constants.SEGMENT.get(glad_glViewportIndexedfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv
     * }
     */
    public static void glad_glViewportIndexedfv(MemorySegment varValue) {
        glad_glViewportIndexedfv$constants.SEGMENT.set(glad_glViewportIndexedfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glViewportIndexedfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glViewportIndexedfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv
     * }
     */
    public static AddressLayout glad_debug_glViewportIndexedfv$layout() {
        return glad_debug_glViewportIndexedfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv
     * }
     */
    public static MemorySegment glad_debug_glViewportIndexedfv$segment() {
        return glad_debug_glViewportIndexedfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv
     * }
     */
    public static MemorySegment glad_debug_glViewportIndexedfv() {
        return glad_debug_glViewportIndexedfv$constants.SEGMENT.get(glad_debug_glViewportIndexedfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv
     * }
     */
    public static void glad_debug_glViewportIndexedfv(MemorySegment varValue) {
        glad_debug_glViewportIndexedfv$constants.SEGMENT.set(glad_debug_glViewportIndexedfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWaitSync$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWaitSync").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWAITSYNCPROC glad_glWaitSync
     * }
     */
    public static AddressLayout glad_glWaitSync$layout() {
        return glad_glWaitSync$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWAITSYNCPROC glad_glWaitSync
     * }
     */
    public static MemorySegment glad_glWaitSync$segment() {
        return glad_glWaitSync$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWAITSYNCPROC glad_glWaitSync
     * }
     */
    public static MemorySegment glad_glWaitSync() {
        return glad_glWaitSync$constants.SEGMENT.get(glad_glWaitSync$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWAITSYNCPROC glad_glWaitSync
     * }
     */
    public static void glad_glWaitSync(MemorySegment varValue) {
        glad_glWaitSync$constants.SEGMENT.set(glad_glWaitSync$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWaitSync$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWaitSync").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWAITSYNCPROC glad_debug_glWaitSync
     * }
     */
    public static AddressLayout glad_debug_glWaitSync$layout() {
        return glad_debug_glWaitSync$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWAITSYNCPROC glad_debug_glWaitSync
     * }
     */
    public static MemorySegment glad_debug_glWaitSync$segment() {
        return glad_debug_glWaitSync$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWAITSYNCPROC glad_debug_glWaitSync
     * }
     */
    public static MemorySegment glad_debug_glWaitSync() {
        return glad_debug_glWaitSync$constants.SEGMENT.get(glad_debug_glWaitSync$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWAITSYNCPROC glad_debug_glWaitSync
     * }
     */
    public static void glad_debug_glWaitSync(MemorySegment varValue) {
        glad_debug_glWaitSync$constants.SEGMENT.set(glad_debug_glWaitSync$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DPROC glad_glWindowPos2d
     * }
     */
    public static AddressLayout glad_glWindowPos2d$layout() {
        return glad_glWindowPos2d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DPROC glad_glWindowPos2d
     * }
     */
    public static MemorySegment glad_glWindowPos2d$segment() {
        return glad_glWindowPos2d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DPROC glad_glWindowPos2d
     * }
     */
    public static MemorySegment glad_glWindowPos2d() {
        return glad_glWindowPos2d$constants.SEGMENT.get(glad_glWindowPos2d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DPROC glad_glWindowPos2d
     * }
     */
    public static void glad_glWindowPos2d(MemorySegment varValue) {
        glad_glWindowPos2d$constants.SEGMENT.set(glad_glWindowPos2d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DPROC glad_debug_glWindowPos2d
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2d$layout() {
        return glad_debug_glWindowPos2d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DPROC glad_debug_glWindowPos2d
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2d$segment() {
        return glad_debug_glWindowPos2d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DPROC glad_debug_glWindowPos2d
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2d() {
        return glad_debug_glWindowPos2d$constants.SEGMENT.get(glad_debug_glWindowPos2d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DPROC glad_debug_glWindowPos2d
     * }
     */
    public static void glad_debug_glWindowPos2d(MemorySegment varValue) {
        glad_debug_glWindowPos2d$constants.SEGMENT.set(glad_debug_glWindowPos2d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2dARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2dARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB
     * }
     */
    public static AddressLayout glad_glWindowPos2dARB$layout() {
        return glad_glWindowPos2dARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB
     * }
     */
    public static MemorySegment glad_glWindowPos2dARB$segment() {
        return glad_glWindowPos2dARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB
     * }
     */
    public static MemorySegment glad_glWindowPos2dARB() {
        return glad_glWindowPos2dARB$constants.SEGMENT.get(glad_glWindowPos2dARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB
     * }
     */
    public static void glad_glWindowPos2dARB(MemorySegment varValue) {
        glad_glWindowPos2dARB$constants.SEGMENT.set(glad_glWindowPos2dARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2dARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2dARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DARBPROC glad_debug_glWindowPos2dARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2dARB$layout() {
        return glad_debug_glWindowPos2dARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DARBPROC glad_debug_glWindowPos2dARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dARB$segment() {
        return glad_debug_glWindowPos2dARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DARBPROC glad_debug_glWindowPos2dARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dARB() {
        return glad_debug_glWindowPos2dARB$constants.SEGMENT.get(glad_debug_glWindowPos2dARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DARBPROC glad_debug_glWindowPos2dARB
     * }
     */
    public static void glad_debug_glWindowPos2dARB(MemorySegment varValue) {
        glad_debug_glWindowPos2dARB$constants.SEGMENT.set(glad_debug_glWindowPos2dARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2dMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2dMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DMESAPROC glad_glWindowPos2dMESA
     * }
     */
    public static AddressLayout glad_glWindowPos2dMESA$layout() {
        return glad_glWindowPos2dMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DMESAPROC glad_glWindowPos2dMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2dMESA$segment() {
        return glad_glWindowPos2dMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DMESAPROC glad_glWindowPos2dMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2dMESA() {
        return glad_glWindowPos2dMESA$constants.SEGMENT.get(glad_glWindowPos2dMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DMESAPROC glad_glWindowPos2dMESA
     * }
     */
    public static void glad_glWindowPos2dMESA(MemorySegment varValue) {
        glad_glWindowPos2dMESA$constants.SEGMENT.set(glad_glWindowPos2dMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2dMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2dMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DMESAPROC glad_debug_glWindowPos2dMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2dMESA$layout() {
        return glad_debug_glWindowPos2dMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DMESAPROC glad_debug_glWindowPos2dMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dMESA$segment() {
        return glad_debug_glWindowPos2dMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DMESAPROC glad_debug_glWindowPos2dMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dMESA() {
        return glad_debug_glWindowPos2dMESA$constants.SEGMENT.get(glad_debug_glWindowPos2dMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DMESAPROC glad_debug_glWindowPos2dMESA
     * }
     */
    public static void glad_debug_glWindowPos2dMESA(MemorySegment varValue) {
        glad_debug_glWindowPos2dMESA$constants.SEGMENT.set(glad_debug_glWindowPos2dMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv
     * }
     */
    public static AddressLayout glad_glWindowPos2dv$layout() {
        return glad_glWindowPos2dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv
     * }
     */
    public static MemorySegment glad_glWindowPos2dv$segment() {
        return glad_glWindowPos2dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv
     * }
     */
    public static MemorySegment glad_glWindowPos2dv() {
        return glad_glWindowPos2dv$constants.SEGMENT.get(glad_glWindowPos2dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv
     * }
     */
    public static void glad_glWindowPos2dv(MemorySegment varValue) {
        glad_glWindowPos2dv$constants.SEGMENT.set(glad_glWindowPos2dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVPROC glad_debug_glWindowPos2dv
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2dv$layout() {
        return glad_debug_glWindowPos2dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVPROC glad_debug_glWindowPos2dv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dv$segment() {
        return glad_debug_glWindowPos2dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVPROC glad_debug_glWindowPos2dv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dv() {
        return glad_debug_glWindowPos2dv$constants.SEGMENT.get(glad_debug_glWindowPos2dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVPROC glad_debug_glWindowPos2dv
     * }
     */
    public static void glad_debug_glWindowPos2dv(MemorySegment varValue) {
        glad_debug_glWindowPos2dv$constants.SEGMENT.set(glad_debug_glWindowPos2dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2dvARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2dvARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB
     * }
     */
    public static AddressLayout glad_glWindowPos2dvARB$layout() {
        return glad_glWindowPos2dvARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB
     * }
     */
    public static MemorySegment glad_glWindowPos2dvARB$segment() {
        return glad_glWindowPos2dvARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB
     * }
     */
    public static MemorySegment glad_glWindowPos2dvARB() {
        return glad_glWindowPos2dvARB$constants.SEGMENT.get(glad_glWindowPos2dvARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB
     * }
     */
    public static void glad_glWindowPos2dvARB(MemorySegment varValue) {
        glad_glWindowPos2dvARB$constants.SEGMENT.set(glad_glWindowPos2dvARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2dvARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2dvARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVARBPROC glad_debug_glWindowPos2dvARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2dvARB$layout() {
        return glad_debug_glWindowPos2dvARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVARBPROC glad_debug_glWindowPos2dvARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dvARB$segment() {
        return glad_debug_glWindowPos2dvARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVARBPROC glad_debug_glWindowPos2dvARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dvARB() {
        return glad_debug_glWindowPos2dvARB$constants.SEGMENT.get(glad_debug_glWindowPos2dvARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVARBPROC glad_debug_glWindowPos2dvARB
     * }
     */
    public static void glad_debug_glWindowPos2dvARB(MemorySegment varValue) {
        glad_debug_glWindowPos2dvARB$constants.SEGMENT.set(glad_debug_glWindowPos2dvARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2dvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2dvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVMESAPROC glad_glWindowPos2dvMESA
     * }
     */
    public static AddressLayout glad_glWindowPos2dvMESA$layout() {
        return glad_glWindowPos2dvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVMESAPROC glad_glWindowPos2dvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2dvMESA$segment() {
        return glad_glWindowPos2dvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVMESAPROC glad_glWindowPos2dvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2dvMESA() {
        return glad_glWindowPos2dvMESA$constants.SEGMENT.get(glad_glWindowPos2dvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVMESAPROC glad_glWindowPos2dvMESA
     * }
     */
    public static void glad_glWindowPos2dvMESA(MemorySegment varValue) {
        glad_glWindowPos2dvMESA$constants.SEGMENT.set(glad_glWindowPos2dvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2dvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2dvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVMESAPROC glad_debug_glWindowPos2dvMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2dvMESA$layout() {
        return glad_debug_glWindowPos2dvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVMESAPROC glad_debug_glWindowPos2dvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dvMESA$segment() {
        return glad_debug_glWindowPos2dvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVMESAPROC glad_debug_glWindowPos2dvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2dvMESA() {
        return glad_debug_glWindowPos2dvMESA$constants.SEGMENT.get(glad_debug_glWindowPos2dvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2DVMESAPROC glad_debug_glWindowPos2dvMESA
     * }
     */
    public static void glad_debug_glWindowPos2dvMESA(MemorySegment varValue) {
        glad_debug_glWindowPos2dvMESA$constants.SEGMENT.set(glad_debug_glWindowPos2dvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2f$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2f").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FPROC glad_glWindowPos2f
     * }
     */
    public static AddressLayout glad_glWindowPos2f$layout() {
        return glad_glWindowPos2f$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FPROC glad_glWindowPos2f
     * }
     */
    public static MemorySegment glad_glWindowPos2f$segment() {
        return glad_glWindowPos2f$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FPROC glad_glWindowPos2f
     * }
     */
    public static MemorySegment glad_glWindowPos2f() {
        return glad_glWindowPos2f$constants.SEGMENT.get(glad_glWindowPos2f$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FPROC glad_glWindowPos2f
     * }
     */
    public static void glad_glWindowPos2f(MemorySegment varValue) {
        glad_glWindowPos2f$constants.SEGMENT.set(glad_glWindowPos2f$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2f$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2f").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FPROC glad_debug_glWindowPos2f
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2f$layout() {
        return glad_debug_glWindowPos2f$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FPROC glad_debug_glWindowPos2f
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2f$segment() {
        return glad_debug_glWindowPos2f$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FPROC glad_debug_glWindowPos2f
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2f() {
        return glad_debug_glWindowPos2f$constants.SEGMENT.get(glad_debug_glWindowPos2f$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FPROC glad_debug_glWindowPos2f
     * }
     */
    public static void glad_debug_glWindowPos2f(MemorySegment varValue) {
        glad_debug_glWindowPos2f$constants.SEGMENT.set(glad_debug_glWindowPos2f$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2fARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2fARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB
     * }
     */
    public static AddressLayout glad_glWindowPos2fARB$layout() {
        return glad_glWindowPos2fARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB
     * }
     */
    public static MemorySegment glad_glWindowPos2fARB$segment() {
        return glad_glWindowPos2fARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB
     * }
     */
    public static MemorySegment glad_glWindowPos2fARB() {
        return glad_glWindowPos2fARB$constants.SEGMENT.get(glad_glWindowPos2fARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB
     * }
     */
    public static void glad_glWindowPos2fARB(MemorySegment varValue) {
        glad_glWindowPos2fARB$constants.SEGMENT.set(glad_glWindowPos2fARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2fARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2fARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FARBPROC glad_debug_glWindowPos2fARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2fARB$layout() {
        return glad_debug_glWindowPos2fARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FARBPROC glad_debug_glWindowPos2fARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fARB$segment() {
        return glad_debug_glWindowPos2fARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FARBPROC glad_debug_glWindowPos2fARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fARB() {
        return glad_debug_glWindowPos2fARB$constants.SEGMENT.get(glad_debug_glWindowPos2fARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FARBPROC glad_debug_glWindowPos2fARB
     * }
     */
    public static void glad_debug_glWindowPos2fARB(MemorySegment varValue) {
        glad_debug_glWindowPos2fARB$constants.SEGMENT.set(glad_debug_glWindowPos2fARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2fMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2fMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FMESAPROC glad_glWindowPos2fMESA
     * }
     */
    public static AddressLayout glad_glWindowPos2fMESA$layout() {
        return glad_glWindowPos2fMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FMESAPROC glad_glWindowPos2fMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2fMESA$segment() {
        return glad_glWindowPos2fMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FMESAPROC glad_glWindowPos2fMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2fMESA() {
        return glad_glWindowPos2fMESA$constants.SEGMENT.get(glad_glWindowPos2fMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FMESAPROC glad_glWindowPos2fMESA
     * }
     */
    public static void glad_glWindowPos2fMESA(MemorySegment varValue) {
        glad_glWindowPos2fMESA$constants.SEGMENT.set(glad_glWindowPos2fMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2fMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2fMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FMESAPROC glad_debug_glWindowPos2fMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2fMESA$layout() {
        return glad_debug_glWindowPos2fMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FMESAPROC glad_debug_glWindowPos2fMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fMESA$segment() {
        return glad_debug_glWindowPos2fMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FMESAPROC glad_debug_glWindowPos2fMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fMESA() {
        return glad_debug_glWindowPos2fMESA$constants.SEGMENT.get(glad_debug_glWindowPos2fMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FMESAPROC glad_debug_glWindowPos2fMESA
     * }
     */
    public static void glad_debug_glWindowPos2fMESA(MemorySegment varValue) {
        glad_debug_glWindowPos2fMESA$constants.SEGMENT.set(glad_debug_glWindowPos2fMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2fv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2fv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv
     * }
     */
    public static AddressLayout glad_glWindowPos2fv$layout() {
        return glad_glWindowPos2fv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv
     * }
     */
    public static MemorySegment glad_glWindowPos2fv$segment() {
        return glad_glWindowPos2fv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv
     * }
     */
    public static MemorySegment glad_glWindowPos2fv() {
        return glad_glWindowPos2fv$constants.SEGMENT.get(glad_glWindowPos2fv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv
     * }
     */
    public static void glad_glWindowPos2fv(MemorySegment varValue) {
        glad_glWindowPos2fv$constants.SEGMENT.set(glad_glWindowPos2fv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2fv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2fv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVPROC glad_debug_glWindowPos2fv
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2fv$layout() {
        return glad_debug_glWindowPos2fv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVPROC glad_debug_glWindowPos2fv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fv$segment() {
        return glad_debug_glWindowPos2fv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVPROC glad_debug_glWindowPos2fv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fv() {
        return glad_debug_glWindowPos2fv$constants.SEGMENT.get(glad_debug_glWindowPos2fv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVPROC glad_debug_glWindowPos2fv
     * }
     */
    public static void glad_debug_glWindowPos2fv(MemorySegment varValue) {
        glad_debug_glWindowPos2fv$constants.SEGMENT.set(glad_debug_glWindowPos2fv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2fvARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2fvARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB
     * }
     */
    public static AddressLayout glad_glWindowPos2fvARB$layout() {
        return glad_glWindowPos2fvARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB
     * }
     */
    public static MemorySegment glad_glWindowPos2fvARB$segment() {
        return glad_glWindowPos2fvARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB
     * }
     */
    public static MemorySegment glad_glWindowPos2fvARB() {
        return glad_glWindowPos2fvARB$constants.SEGMENT.get(glad_glWindowPos2fvARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB
     * }
     */
    public static void glad_glWindowPos2fvARB(MemorySegment varValue) {
        glad_glWindowPos2fvARB$constants.SEGMENT.set(glad_glWindowPos2fvARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2fvARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2fvARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVARBPROC glad_debug_glWindowPos2fvARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2fvARB$layout() {
        return glad_debug_glWindowPos2fvARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVARBPROC glad_debug_glWindowPos2fvARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fvARB$segment() {
        return glad_debug_glWindowPos2fvARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVARBPROC glad_debug_glWindowPos2fvARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fvARB() {
        return glad_debug_glWindowPos2fvARB$constants.SEGMENT.get(glad_debug_glWindowPos2fvARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVARBPROC glad_debug_glWindowPos2fvARB
     * }
     */
    public static void glad_debug_glWindowPos2fvARB(MemorySegment varValue) {
        glad_debug_glWindowPos2fvARB$constants.SEGMENT.set(glad_debug_glWindowPos2fvARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2fvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2fvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVMESAPROC glad_glWindowPos2fvMESA
     * }
     */
    public static AddressLayout glad_glWindowPos2fvMESA$layout() {
        return glad_glWindowPos2fvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVMESAPROC glad_glWindowPos2fvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2fvMESA$segment() {
        return glad_glWindowPos2fvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVMESAPROC glad_glWindowPos2fvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2fvMESA() {
        return glad_glWindowPos2fvMESA$constants.SEGMENT.get(glad_glWindowPos2fvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVMESAPROC glad_glWindowPos2fvMESA
     * }
     */
    public static void glad_glWindowPos2fvMESA(MemorySegment varValue) {
        glad_glWindowPos2fvMESA$constants.SEGMENT.set(glad_glWindowPos2fvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2fvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2fvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVMESAPROC glad_debug_glWindowPos2fvMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2fvMESA$layout() {
        return glad_debug_glWindowPos2fvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVMESAPROC glad_debug_glWindowPos2fvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fvMESA$segment() {
        return glad_debug_glWindowPos2fvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVMESAPROC glad_debug_glWindowPos2fvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2fvMESA() {
        return glad_debug_glWindowPos2fvMESA$constants.SEGMENT.get(glad_debug_glWindowPos2fvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2FVMESAPROC glad_debug_glWindowPos2fvMESA
     * }
     */
    public static void glad_debug_glWindowPos2fvMESA(MemorySegment varValue) {
        glad_debug_glWindowPos2fvMESA$constants.SEGMENT.set(glad_debug_glWindowPos2fvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2i$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2i").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IPROC glad_glWindowPos2i
     * }
     */
    public static AddressLayout glad_glWindowPos2i$layout() {
        return glad_glWindowPos2i$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IPROC glad_glWindowPos2i
     * }
     */
    public static MemorySegment glad_glWindowPos2i$segment() {
        return glad_glWindowPos2i$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IPROC glad_glWindowPos2i
     * }
     */
    public static MemorySegment glad_glWindowPos2i() {
        return glad_glWindowPos2i$constants.SEGMENT.get(glad_glWindowPos2i$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IPROC glad_glWindowPos2i
     * }
     */
    public static void glad_glWindowPos2i(MemorySegment varValue) {
        glad_glWindowPos2i$constants.SEGMENT.set(glad_glWindowPos2i$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2i$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2i").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IPROC glad_debug_glWindowPos2i
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2i$layout() {
        return glad_debug_glWindowPos2i$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IPROC glad_debug_glWindowPos2i
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2i$segment() {
        return glad_debug_glWindowPos2i$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IPROC glad_debug_glWindowPos2i
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2i() {
        return glad_debug_glWindowPos2i$constants.SEGMENT.get(glad_debug_glWindowPos2i$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IPROC glad_debug_glWindowPos2i
     * }
     */
    public static void glad_debug_glWindowPos2i(MemorySegment varValue) {
        glad_debug_glWindowPos2i$constants.SEGMENT.set(glad_debug_glWindowPos2i$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2iARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2iARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB
     * }
     */
    public static AddressLayout glad_glWindowPos2iARB$layout() {
        return glad_glWindowPos2iARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB
     * }
     */
    public static MemorySegment glad_glWindowPos2iARB$segment() {
        return glad_glWindowPos2iARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB
     * }
     */
    public static MemorySegment glad_glWindowPos2iARB() {
        return glad_glWindowPos2iARB$constants.SEGMENT.get(glad_glWindowPos2iARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB
     * }
     */
    public static void glad_glWindowPos2iARB(MemorySegment varValue) {
        glad_glWindowPos2iARB$constants.SEGMENT.set(glad_glWindowPos2iARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2iARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2iARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IARBPROC glad_debug_glWindowPos2iARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2iARB$layout() {
        return glad_debug_glWindowPos2iARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IARBPROC glad_debug_glWindowPos2iARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2iARB$segment() {
        return glad_debug_glWindowPos2iARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IARBPROC glad_debug_glWindowPos2iARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2iARB() {
        return glad_debug_glWindowPos2iARB$constants.SEGMENT.get(glad_debug_glWindowPos2iARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IARBPROC glad_debug_glWindowPos2iARB
     * }
     */
    public static void glad_debug_glWindowPos2iARB(MemorySegment varValue) {
        glad_debug_glWindowPos2iARB$constants.SEGMENT.set(glad_debug_glWindowPos2iARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2iMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2iMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IMESAPROC glad_glWindowPos2iMESA
     * }
     */
    public static AddressLayout glad_glWindowPos2iMESA$layout() {
        return glad_glWindowPos2iMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IMESAPROC glad_glWindowPos2iMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2iMESA$segment() {
        return glad_glWindowPos2iMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IMESAPROC glad_glWindowPos2iMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2iMESA() {
        return glad_glWindowPos2iMESA$constants.SEGMENT.get(glad_glWindowPos2iMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IMESAPROC glad_glWindowPos2iMESA
     * }
     */
    public static void glad_glWindowPos2iMESA(MemorySegment varValue) {
        glad_glWindowPos2iMESA$constants.SEGMENT.set(glad_glWindowPos2iMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2iMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2iMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IMESAPROC glad_debug_glWindowPos2iMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2iMESA$layout() {
        return glad_debug_glWindowPos2iMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IMESAPROC glad_debug_glWindowPos2iMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2iMESA$segment() {
        return glad_debug_glWindowPos2iMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IMESAPROC glad_debug_glWindowPos2iMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2iMESA() {
        return glad_debug_glWindowPos2iMESA$constants.SEGMENT.get(glad_debug_glWindowPos2iMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IMESAPROC glad_debug_glWindowPos2iMESA
     * }
     */
    public static void glad_debug_glWindowPos2iMESA(MemorySegment varValue) {
        glad_debug_glWindowPos2iMESA$constants.SEGMENT.set(glad_debug_glWindowPos2iMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2iv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2iv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv
     * }
     */
    public static AddressLayout glad_glWindowPos2iv$layout() {
        return glad_glWindowPos2iv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv
     * }
     */
    public static MemorySegment glad_glWindowPos2iv$segment() {
        return glad_glWindowPos2iv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv
     * }
     */
    public static MemorySegment glad_glWindowPos2iv() {
        return glad_glWindowPos2iv$constants.SEGMENT.get(glad_glWindowPos2iv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv
     * }
     */
    public static void glad_glWindowPos2iv(MemorySegment varValue) {
        glad_glWindowPos2iv$constants.SEGMENT.set(glad_glWindowPos2iv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2iv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2iv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVPROC glad_debug_glWindowPos2iv
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2iv$layout() {
        return glad_debug_glWindowPos2iv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVPROC glad_debug_glWindowPos2iv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2iv$segment() {
        return glad_debug_glWindowPos2iv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVPROC glad_debug_glWindowPos2iv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2iv() {
        return glad_debug_glWindowPos2iv$constants.SEGMENT.get(glad_debug_glWindowPos2iv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVPROC glad_debug_glWindowPos2iv
     * }
     */
    public static void glad_debug_glWindowPos2iv(MemorySegment varValue) {
        glad_debug_glWindowPos2iv$constants.SEGMENT.set(glad_debug_glWindowPos2iv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2ivARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2ivARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB
     * }
     */
    public static AddressLayout glad_glWindowPos2ivARB$layout() {
        return glad_glWindowPos2ivARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB
     * }
     */
    public static MemorySegment glad_glWindowPos2ivARB$segment() {
        return glad_glWindowPos2ivARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB
     * }
     */
    public static MemorySegment glad_glWindowPos2ivARB() {
        return glad_glWindowPos2ivARB$constants.SEGMENT.get(glad_glWindowPos2ivARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB
     * }
     */
    public static void glad_glWindowPos2ivARB(MemorySegment varValue) {
        glad_glWindowPos2ivARB$constants.SEGMENT.set(glad_glWindowPos2ivARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2ivARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2ivARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVARBPROC glad_debug_glWindowPos2ivARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2ivARB$layout() {
        return glad_debug_glWindowPos2ivARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVARBPROC glad_debug_glWindowPos2ivARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2ivARB$segment() {
        return glad_debug_glWindowPos2ivARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVARBPROC glad_debug_glWindowPos2ivARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2ivARB() {
        return glad_debug_glWindowPos2ivARB$constants.SEGMENT.get(glad_debug_glWindowPos2ivARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVARBPROC glad_debug_glWindowPos2ivARB
     * }
     */
    public static void glad_debug_glWindowPos2ivARB(MemorySegment varValue) {
        glad_debug_glWindowPos2ivARB$constants.SEGMENT.set(glad_debug_glWindowPos2ivARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2ivMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2ivMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVMESAPROC glad_glWindowPos2ivMESA
     * }
     */
    public static AddressLayout glad_glWindowPos2ivMESA$layout() {
        return glad_glWindowPos2ivMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVMESAPROC glad_glWindowPos2ivMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2ivMESA$segment() {
        return glad_glWindowPos2ivMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVMESAPROC glad_glWindowPos2ivMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2ivMESA() {
        return glad_glWindowPos2ivMESA$constants.SEGMENT.get(glad_glWindowPos2ivMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVMESAPROC glad_glWindowPos2ivMESA
     * }
     */
    public static void glad_glWindowPos2ivMESA(MemorySegment varValue) {
        glad_glWindowPos2ivMESA$constants.SEGMENT.set(glad_glWindowPos2ivMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2ivMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2ivMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVMESAPROC glad_debug_glWindowPos2ivMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2ivMESA$layout() {
        return glad_debug_glWindowPos2ivMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVMESAPROC glad_debug_glWindowPos2ivMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2ivMESA$segment() {
        return glad_debug_glWindowPos2ivMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVMESAPROC glad_debug_glWindowPos2ivMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2ivMESA() {
        return glad_debug_glWindowPos2ivMESA$constants.SEGMENT.get(glad_debug_glWindowPos2ivMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2IVMESAPROC glad_debug_glWindowPos2ivMESA
     * }
     */
    public static void glad_debug_glWindowPos2ivMESA(MemorySegment varValue) {
        glad_debug_glWindowPos2ivMESA$constants.SEGMENT.set(glad_debug_glWindowPos2ivMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2s$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2s").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SPROC glad_glWindowPos2s
     * }
     */
    public static AddressLayout glad_glWindowPos2s$layout() {
        return glad_glWindowPos2s$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SPROC glad_glWindowPos2s
     * }
     */
    public static MemorySegment glad_glWindowPos2s$segment() {
        return glad_glWindowPos2s$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SPROC glad_glWindowPos2s
     * }
     */
    public static MemorySegment glad_glWindowPos2s() {
        return glad_glWindowPos2s$constants.SEGMENT.get(glad_glWindowPos2s$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SPROC glad_glWindowPos2s
     * }
     */
    public static void glad_glWindowPos2s(MemorySegment varValue) {
        glad_glWindowPos2s$constants.SEGMENT.set(glad_glWindowPos2s$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2s$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2s").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SPROC glad_debug_glWindowPos2s
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2s$layout() {
        return glad_debug_glWindowPos2s$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SPROC glad_debug_glWindowPos2s
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2s$segment() {
        return glad_debug_glWindowPos2s$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SPROC glad_debug_glWindowPos2s
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2s() {
        return glad_debug_glWindowPos2s$constants.SEGMENT.get(glad_debug_glWindowPos2s$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SPROC glad_debug_glWindowPos2s
     * }
     */
    public static void glad_debug_glWindowPos2s(MemorySegment varValue) {
        glad_debug_glWindowPos2s$constants.SEGMENT.set(glad_debug_glWindowPos2s$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2sARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2sARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB
     * }
     */
    public static AddressLayout glad_glWindowPos2sARB$layout() {
        return glad_glWindowPos2sARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB
     * }
     */
    public static MemorySegment glad_glWindowPos2sARB$segment() {
        return glad_glWindowPos2sARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB
     * }
     */
    public static MemorySegment glad_glWindowPos2sARB() {
        return glad_glWindowPos2sARB$constants.SEGMENT.get(glad_glWindowPos2sARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB
     * }
     */
    public static void glad_glWindowPos2sARB(MemorySegment varValue) {
        glad_glWindowPos2sARB$constants.SEGMENT.set(glad_glWindowPos2sARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2sARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2sARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SARBPROC glad_debug_glWindowPos2sARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2sARB$layout() {
        return glad_debug_glWindowPos2sARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SARBPROC glad_debug_glWindowPos2sARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2sARB$segment() {
        return glad_debug_glWindowPos2sARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SARBPROC glad_debug_glWindowPos2sARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2sARB() {
        return glad_debug_glWindowPos2sARB$constants.SEGMENT.get(glad_debug_glWindowPos2sARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SARBPROC glad_debug_glWindowPos2sARB
     * }
     */
    public static void glad_debug_glWindowPos2sARB(MemorySegment varValue) {
        glad_debug_glWindowPos2sARB$constants.SEGMENT.set(glad_debug_glWindowPos2sARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2sMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2sMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SMESAPROC glad_glWindowPos2sMESA
     * }
     */
    public static AddressLayout glad_glWindowPos2sMESA$layout() {
        return glad_glWindowPos2sMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SMESAPROC glad_glWindowPos2sMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2sMESA$segment() {
        return glad_glWindowPos2sMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SMESAPROC glad_glWindowPos2sMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2sMESA() {
        return glad_glWindowPos2sMESA$constants.SEGMENT.get(glad_glWindowPos2sMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SMESAPROC glad_glWindowPos2sMESA
     * }
     */
    public static void glad_glWindowPos2sMESA(MemorySegment varValue) {
        glad_glWindowPos2sMESA$constants.SEGMENT.set(glad_glWindowPos2sMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2sMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2sMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SMESAPROC glad_debug_glWindowPos2sMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2sMESA$layout() {
        return glad_debug_glWindowPos2sMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SMESAPROC glad_debug_glWindowPos2sMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2sMESA$segment() {
        return glad_debug_glWindowPos2sMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SMESAPROC glad_debug_glWindowPos2sMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2sMESA() {
        return glad_debug_glWindowPos2sMESA$constants.SEGMENT.get(glad_debug_glWindowPos2sMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SMESAPROC glad_debug_glWindowPos2sMESA
     * }
     */
    public static void glad_debug_glWindowPos2sMESA(MemorySegment varValue) {
        glad_debug_glWindowPos2sMESA$constants.SEGMENT.set(glad_debug_glWindowPos2sMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2sv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2sv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv
     * }
     */
    public static AddressLayout glad_glWindowPos2sv$layout() {
        return glad_glWindowPos2sv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv
     * }
     */
    public static MemorySegment glad_glWindowPos2sv$segment() {
        return glad_glWindowPos2sv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv
     * }
     */
    public static MemorySegment glad_glWindowPos2sv() {
        return glad_glWindowPos2sv$constants.SEGMENT.get(glad_glWindowPos2sv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv
     * }
     */
    public static void glad_glWindowPos2sv(MemorySegment varValue) {
        glad_glWindowPos2sv$constants.SEGMENT.set(glad_glWindowPos2sv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2sv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2sv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVPROC glad_debug_glWindowPos2sv
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2sv$layout() {
        return glad_debug_glWindowPos2sv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVPROC glad_debug_glWindowPos2sv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2sv$segment() {
        return glad_debug_glWindowPos2sv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVPROC glad_debug_glWindowPos2sv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2sv() {
        return glad_debug_glWindowPos2sv$constants.SEGMENT.get(glad_debug_glWindowPos2sv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVPROC glad_debug_glWindowPos2sv
     * }
     */
    public static void glad_debug_glWindowPos2sv(MemorySegment varValue) {
        glad_debug_glWindowPos2sv$constants.SEGMENT.set(glad_debug_glWindowPos2sv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2svARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2svARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB
     * }
     */
    public static AddressLayout glad_glWindowPos2svARB$layout() {
        return glad_glWindowPos2svARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB
     * }
     */
    public static MemorySegment glad_glWindowPos2svARB$segment() {
        return glad_glWindowPos2svARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB
     * }
     */
    public static MemorySegment glad_glWindowPos2svARB() {
        return glad_glWindowPos2svARB$constants.SEGMENT.get(glad_glWindowPos2svARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB
     * }
     */
    public static void glad_glWindowPos2svARB(MemorySegment varValue) {
        glad_glWindowPos2svARB$constants.SEGMENT.set(glad_glWindowPos2svARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2svARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2svARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVARBPROC glad_debug_glWindowPos2svARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2svARB$layout() {
        return glad_debug_glWindowPos2svARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVARBPROC glad_debug_glWindowPos2svARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2svARB$segment() {
        return glad_debug_glWindowPos2svARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVARBPROC glad_debug_glWindowPos2svARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2svARB() {
        return glad_debug_glWindowPos2svARB$constants.SEGMENT.get(glad_debug_glWindowPos2svARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVARBPROC glad_debug_glWindowPos2svARB
     * }
     */
    public static void glad_debug_glWindowPos2svARB(MemorySegment varValue) {
        glad_debug_glWindowPos2svARB$constants.SEGMENT.set(glad_debug_glWindowPos2svARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos2svMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos2svMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVMESAPROC glad_glWindowPos2svMESA
     * }
     */
    public static AddressLayout glad_glWindowPos2svMESA$layout() {
        return glad_glWindowPos2svMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVMESAPROC glad_glWindowPos2svMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2svMESA$segment() {
        return glad_glWindowPos2svMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVMESAPROC glad_glWindowPos2svMESA
     * }
     */
    public static MemorySegment glad_glWindowPos2svMESA() {
        return glad_glWindowPos2svMESA$constants.SEGMENT.get(glad_glWindowPos2svMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVMESAPROC glad_glWindowPos2svMESA
     * }
     */
    public static void glad_glWindowPos2svMESA(MemorySegment varValue) {
        glad_glWindowPos2svMESA$constants.SEGMENT.set(glad_glWindowPos2svMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos2svMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos2svMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVMESAPROC glad_debug_glWindowPos2svMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos2svMESA$layout() {
        return glad_debug_glWindowPos2svMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVMESAPROC glad_debug_glWindowPos2svMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2svMESA$segment() {
        return glad_debug_glWindowPos2svMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVMESAPROC glad_debug_glWindowPos2svMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos2svMESA() {
        return glad_debug_glWindowPos2svMESA$constants.SEGMENT.get(glad_debug_glWindowPos2svMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS2SVMESAPROC glad_debug_glWindowPos2svMESA
     * }
     */
    public static void glad_debug_glWindowPos2svMESA(MemorySegment varValue) {
        glad_debug_glWindowPos2svMESA$constants.SEGMENT.set(glad_debug_glWindowPos2svMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DPROC glad_glWindowPos3d
     * }
     */
    public static AddressLayout glad_glWindowPos3d$layout() {
        return glad_glWindowPos3d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DPROC glad_glWindowPos3d
     * }
     */
    public static MemorySegment glad_glWindowPos3d$segment() {
        return glad_glWindowPos3d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DPROC glad_glWindowPos3d
     * }
     */
    public static MemorySegment glad_glWindowPos3d() {
        return glad_glWindowPos3d$constants.SEGMENT.get(glad_glWindowPos3d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DPROC glad_glWindowPos3d
     * }
     */
    public static void glad_glWindowPos3d(MemorySegment varValue) {
        glad_glWindowPos3d$constants.SEGMENT.set(glad_glWindowPos3d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DPROC glad_debug_glWindowPos3d
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3d$layout() {
        return glad_debug_glWindowPos3d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DPROC glad_debug_glWindowPos3d
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3d$segment() {
        return glad_debug_glWindowPos3d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DPROC glad_debug_glWindowPos3d
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3d() {
        return glad_debug_glWindowPos3d$constants.SEGMENT.get(glad_debug_glWindowPos3d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DPROC glad_debug_glWindowPos3d
     * }
     */
    public static void glad_debug_glWindowPos3d(MemorySegment varValue) {
        glad_debug_glWindowPos3d$constants.SEGMENT.set(glad_debug_glWindowPos3d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3dARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3dARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB
     * }
     */
    public static AddressLayout glad_glWindowPos3dARB$layout() {
        return glad_glWindowPos3dARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB
     * }
     */
    public static MemorySegment glad_glWindowPos3dARB$segment() {
        return glad_glWindowPos3dARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB
     * }
     */
    public static MemorySegment glad_glWindowPos3dARB() {
        return glad_glWindowPos3dARB$constants.SEGMENT.get(glad_glWindowPos3dARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB
     * }
     */
    public static void glad_glWindowPos3dARB(MemorySegment varValue) {
        glad_glWindowPos3dARB$constants.SEGMENT.set(glad_glWindowPos3dARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3dARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3dARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DARBPROC glad_debug_glWindowPos3dARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3dARB$layout() {
        return glad_debug_glWindowPos3dARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DARBPROC glad_debug_glWindowPos3dARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dARB$segment() {
        return glad_debug_glWindowPos3dARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DARBPROC glad_debug_glWindowPos3dARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dARB() {
        return glad_debug_glWindowPos3dARB$constants.SEGMENT.get(glad_debug_glWindowPos3dARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DARBPROC glad_debug_glWindowPos3dARB
     * }
     */
    public static void glad_debug_glWindowPos3dARB(MemorySegment varValue) {
        glad_debug_glWindowPos3dARB$constants.SEGMENT.set(glad_debug_glWindowPos3dARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3dMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3dMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DMESAPROC glad_glWindowPos3dMESA
     * }
     */
    public static AddressLayout glad_glWindowPos3dMESA$layout() {
        return glad_glWindowPos3dMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DMESAPROC glad_glWindowPos3dMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3dMESA$segment() {
        return glad_glWindowPos3dMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DMESAPROC glad_glWindowPos3dMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3dMESA() {
        return glad_glWindowPos3dMESA$constants.SEGMENT.get(glad_glWindowPos3dMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DMESAPROC glad_glWindowPos3dMESA
     * }
     */
    public static void glad_glWindowPos3dMESA(MemorySegment varValue) {
        glad_glWindowPos3dMESA$constants.SEGMENT.set(glad_glWindowPos3dMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3dMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3dMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DMESAPROC glad_debug_glWindowPos3dMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3dMESA$layout() {
        return glad_debug_glWindowPos3dMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DMESAPROC glad_debug_glWindowPos3dMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dMESA$segment() {
        return glad_debug_glWindowPos3dMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DMESAPROC glad_debug_glWindowPos3dMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dMESA() {
        return glad_debug_glWindowPos3dMESA$constants.SEGMENT.get(glad_debug_glWindowPos3dMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DMESAPROC glad_debug_glWindowPos3dMESA
     * }
     */
    public static void glad_debug_glWindowPos3dMESA(MemorySegment varValue) {
        glad_debug_glWindowPos3dMESA$constants.SEGMENT.set(glad_debug_glWindowPos3dMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv
     * }
     */
    public static AddressLayout glad_glWindowPos3dv$layout() {
        return glad_glWindowPos3dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv
     * }
     */
    public static MemorySegment glad_glWindowPos3dv$segment() {
        return glad_glWindowPos3dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv
     * }
     */
    public static MemorySegment glad_glWindowPos3dv() {
        return glad_glWindowPos3dv$constants.SEGMENT.get(glad_glWindowPos3dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv
     * }
     */
    public static void glad_glWindowPos3dv(MemorySegment varValue) {
        glad_glWindowPos3dv$constants.SEGMENT.set(glad_glWindowPos3dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVPROC glad_debug_glWindowPos3dv
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3dv$layout() {
        return glad_debug_glWindowPos3dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVPROC glad_debug_glWindowPos3dv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dv$segment() {
        return glad_debug_glWindowPos3dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVPROC glad_debug_glWindowPos3dv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dv() {
        return glad_debug_glWindowPos3dv$constants.SEGMENT.get(glad_debug_glWindowPos3dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVPROC glad_debug_glWindowPos3dv
     * }
     */
    public static void glad_debug_glWindowPos3dv(MemorySegment varValue) {
        glad_debug_glWindowPos3dv$constants.SEGMENT.set(glad_debug_glWindowPos3dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3dvARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3dvARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB
     * }
     */
    public static AddressLayout glad_glWindowPos3dvARB$layout() {
        return glad_glWindowPos3dvARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB
     * }
     */
    public static MemorySegment glad_glWindowPos3dvARB$segment() {
        return glad_glWindowPos3dvARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB
     * }
     */
    public static MemorySegment glad_glWindowPos3dvARB() {
        return glad_glWindowPos3dvARB$constants.SEGMENT.get(glad_glWindowPos3dvARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB
     * }
     */
    public static void glad_glWindowPos3dvARB(MemorySegment varValue) {
        glad_glWindowPos3dvARB$constants.SEGMENT.set(glad_glWindowPos3dvARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3dvARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3dvARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVARBPROC glad_debug_glWindowPos3dvARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3dvARB$layout() {
        return glad_debug_glWindowPos3dvARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVARBPROC glad_debug_glWindowPos3dvARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dvARB$segment() {
        return glad_debug_glWindowPos3dvARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVARBPROC glad_debug_glWindowPos3dvARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dvARB() {
        return glad_debug_glWindowPos3dvARB$constants.SEGMENT.get(glad_debug_glWindowPos3dvARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVARBPROC glad_debug_glWindowPos3dvARB
     * }
     */
    public static void glad_debug_glWindowPos3dvARB(MemorySegment varValue) {
        glad_debug_glWindowPos3dvARB$constants.SEGMENT.set(glad_debug_glWindowPos3dvARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3dvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3dvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVMESAPROC glad_glWindowPos3dvMESA
     * }
     */
    public static AddressLayout glad_glWindowPos3dvMESA$layout() {
        return glad_glWindowPos3dvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVMESAPROC glad_glWindowPos3dvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3dvMESA$segment() {
        return glad_glWindowPos3dvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVMESAPROC glad_glWindowPos3dvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3dvMESA() {
        return glad_glWindowPos3dvMESA$constants.SEGMENT.get(glad_glWindowPos3dvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVMESAPROC glad_glWindowPos3dvMESA
     * }
     */
    public static void glad_glWindowPos3dvMESA(MemorySegment varValue) {
        glad_glWindowPos3dvMESA$constants.SEGMENT.set(glad_glWindowPos3dvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3dvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3dvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVMESAPROC glad_debug_glWindowPos3dvMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3dvMESA$layout() {
        return glad_debug_glWindowPos3dvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVMESAPROC glad_debug_glWindowPos3dvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dvMESA$segment() {
        return glad_debug_glWindowPos3dvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVMESAPROC glad_debug_glWindowPos3dvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3dvMESA() {
        return glad_debug_glWindowPos3dvMESA$constants.SEGMENT.get(glad_debug_glWindowPos3dvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3DVMESAPROC glad_debug_glWindowPos3dvMESA
     * }
     */
    public static void glad_debug_glWindowPos3dvMESA(MemorySegment varValue) {
        glad_debug_glWindowPos3dvMESA$constants.SEGMENT.set(glad_debug_glWindowPos3dvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3f$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3f").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FPROC glad_glWindowPos3f
     * }
     */
    public static AddressLayout glad_glWindowPos3f$layout() {
        return glad_glWindowPos3f$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FPROC glad_glWindowPos3f
     * }
     */
    public static MemorySegment glad_glWindowPos3f$segment() {
        return glad_glWindowPos3f$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FPROC glad_glWindowPos3f
     * }
     */
    public static MemorySegment glad_glWindowPos3f() {
        return glad_glWindowPos3f$constants.SEGMENT.get(glad_glWindowPos3f$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FPROC glad_glWindowPos3f
     * }
     */
    public static void glad_glWindowPos3f(MemorySegment varValue) {
        glad_glWindowPos3f$constants.SEGMENT.set(glad_glWindowPos3f$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3f$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3f").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FPROC glad_debug_glWindowPos3f
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3f$layout() {
        return glad_debug_glWindowPos3f$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FPROC glad_debug_glWindowPos3f
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3f$segment() {
        return glad_debug_glWindowPos3f$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FPROC glad_debug_glWindowPos3f
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3f() {
        return glad_debug_glWindowPos3f$constants.SEGMENT.get(glad_debug_glWindowPos3f$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FPROC glad_debug_glWindowPos3f
     * }
     */
    public static void glad_debug_glWindowPos3f(MemorySegment varValue) {
        glad_debug_glWindowPos3f$constants.SEGMENT.set(glad_debug_glWindowPos3f$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3fARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3fARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB
     * }
     */
    public static AddressLayout glad_glWindowPos3fARB$layout() {
        return glad_glWindowPos3fARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB
     * }
     */
    public static MemorySegment glad_glWindowPos3fARB$segment() {
        return glad_glWindowPos3fARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB
     * }
     */
    public static MemorySegment glad_glWindowPos3fARB() {
        return glad_glWindowPos3fARB$constants.SEGMENT.get(glad_glWindowPos3fARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB
     * }
     */
    public static void glad_glWindowPos3fARB(MemorySegment varValue) {
        glad_glWindowPos3fARB$constants.SEGMENT.set(glad_glWindowPos3fARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3fARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3fARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FARBPROC glad_debug_glWindowPos3fARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3fARB$layout() {
        return glad_debug_glWindowPos3fARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FARBPROC glad_debug_glWindowPos3fARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fARB$segment() {
        return glad_debug_glWindowPos3fARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FARBPROC glad_debug_glWindowPos3fARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fARB() {
        return glad_debug_glWindowPos3fARB$constants.SEGMENT.get(glad_debug_glWindowPos3fARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FARBPROC glad_debug_glWindowPos3fARB
     * }
     */
    public static void glad_debug_glWindowPos3fARB(MemorySegment varValue) {
        glad_debug_glWindowPos3fARB$constants.SEGMENT.set(glad_debug_glWindowPos3fARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3fMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3fMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FMESAPROC glad_glWindowPos3fMESA
     * }
     */
    public static AddressLayout glad_glWindowPos3fMESA$layout() {
        return glad_glWindowPos3fMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FMESAPROC glad_glWindowPos3fMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3fMESA$segment() {
        return glad_glWindowPos3fMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FMESAPROC glad_glWindowPos3fMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3fMESA() {
        return glad_glWindowPos3fMESA$constants.SEGMENT.get(glad_glWindowPos3fMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FMESAPROC glad_glWindowPos3fMESA
     * }
     */
    public static void glad_glWindowPos3fMESA(MemorySegment varValue) {
        glad_glWindowPos3fMESA$constants.SEGMENT.set(glad_glWindowPos3fMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3fMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3fMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FMESAPROC glad_debug_glWindowPos3fMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3fMESA$layout() {
        return glad_debug_glWindowPos3fMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FMESAPROC glad_debug_glWindowPos3fMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fMESA$segment() {
        return glad_debug_glWindowPos3fMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FMESAPROC glad_debug_glWindowPos3fMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fMESA() {
        return glad_debug_glWindowPos3fMESA$constants.SEGMENT.get(glad_debug_glWindowPos3fMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FMESAPROC glad_debug_glWindowPos3fMESA
     * }
     */
    public static void glad_debug_glWindowPos3fMESA(MemorySegment varValue) {
        glad_debug_glWindowPos3fMESA$constants.SEGMENT.set(glad_debug_glWindowPos3fMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3fv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3fv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv
     * }
     */
    public static AddressLayout glad_glWindowPos3fv$layout() {
        return glad_glWindowPos3fv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv
     * }
     */
    public static MemorySegment glad_glWindowPos3fv$segment() {
        return glad_glWindowPos3fv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv
     * }
     */
    public static MemorySegment glad_glWindowPos3fv() {
        return glad_glWindowPos3fv$constants.SEGMENT.get(glad_glWindowPos3fv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv
     * }
     */
    public static void glad_glWindowPos3fv(MemorySegment varValue) {
        glad_glWindowPos3fv$constants.SEGMENT.set(glad_glWindowPos3fv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3fv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3fv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVPROC glad_debug_glWindowPos3fv
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3fv$layout() {
        return glad_debug_glWindowPos3fv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVPROC glad_debug_glWindowPos3fv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fv$segment() {
        return glad_debug_glWindowPos3fv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVPROC glad_debug_glWindowPos3fv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fv() {
        return glad_debug_glWindowPos3fv$constants.SEGMENT.get(glad_debug_glWindowPos3fv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVPROC glad_debug_glWindowPos3fv
     * }
     */
    public static void glad_debug_glWindowPos3fv(MemorySegment varValue) {
        glad_debug_glWindowPos3fv$constants.SEGMENT.set(glad_debug_glWindowPos3fv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3fvARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3fvARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB
     * }
     */
    public static AddressLayout glad_glWindowPos3fvARB$layout() {
        return glad_glWindowPos3fvARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB
     * }
     */
    public static MemorySegment glad_glWindowPos3fvARB$segment() {
        return glad_glWindowPos3fvARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB
     * }
     */
    public static MemorySegment glad_glWindowPos3fvARB() {
        return glad_glWindowPos3fvARB$constants.SEGMENT.get(glad_glWindowPos3fvARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB
     * }
     */
    public static void glad_glWindowPos3fvARB(MemorySegment varValue) {
        glad_glWindowPos3fvARB$constants.SEGMENT.set(glad_glWindowPos3fvARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3fvARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3fvARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVARBPROC glad_debug_glWindowPos3fvARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3fvARB$layout() {
        return glad_debug_glWindowPos3fvARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVARBPROC glad_debug_glWindowPos3fvARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fvARB$segment() {
        return glad_debug_glWindowPos3fvARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVARBPROC glad_debug_glWindowPos3fvARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fvARB() {
        return glad_debug_glWindowPos3fvARB$constants.SEGMENT.get(glad_debug_glWindowPos3fvARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVARBPROC glad_debug_glWindowPos3fvARB
     * }
     */
    public static void glad_debug_glWindowPos3fvARB(MemorySegment varValue) {
        glad_debug_glWindowPos3fvARB$constants.SEGMENT.set(glad_debug_glWindowPos3fvARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3fvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3fvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVMESAPROC glad_glWindowPos3fvMESA
     * }
     */
    public static AddressLayout glad_glWindowPos3fvMESA$layout() {
        return glad_glWindowPos3fvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVMESAPROC glad_glWindowPos3fvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3fvMESA$segment() {
        return glad_glWindowPos3fvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVMESAPROC glad_glWindowPos3fvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3fvMESA() {
        return glad_glWindowPos3fvMESA$constants.SEGMENT.get(glad_glWindowPos3fvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVMESAPROC glad_glWindowPos3fvMESA
     * }
     */
    public static void glad_glWindowPos3fvMESA(MemorySegment varValue) {
        glad_glWindowPos3fvMESA$constants.SEGMENT.set(glad_glWindowPos3fvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3fvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3fvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVMESAPROC glad_debug_glWindowPos3fvMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3fvMESA$layout() {
        return glad_debug_glWindowPos3fvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVMESAPROC glad_debug_glWindowPos3fvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fvMESA$segment() {
        return glad_debug_glWindowPos3fvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVMESAPROC glad_debug_glWindowPos3fvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3fvMESA() {
        return glad_debug_glWindowPos3fvMESA$constants.SEGMENT.get(glad_debug_glWindowPos3fvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3FVMESAPROC glad_debug_glWindowPos3fvMESA
     * }
     */
    public static void glad_debug_glWindowPos3fvMESA(MemorySegment varValue) {
        glad_debug_glWindowPos3fvMESA$constants.SEGMENT.set(glad_debug_glWindowPos3fvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3i$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3i").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IPROC glad_glWindowPos3i
     * }
     */
    public static AddressLayout glad_glWindowPos3i$layout() {
        return glad_glWindowPos3i$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IPROC glad_glWindowPos3i
     * }
     */
    public static MemorySegment glad_glWindowPos3i$segment() {
        return glad_glWindowPos3i$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IPROC glad_glWindowPos3i
     * }
     */
    public static MemorySegment glad_glWindowPos3i() {
        return glad_glWindowPos3i$constants.SEGMENT.get(glad_glWindowPos3i$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IPROC glad_glWindowPos3i
     * }
     */
    public static void glad_glWindowPos3i(MemorySegment varValue) {
        glad_glWindowPos3i$constants.SEGMENT.set(glad_glWindowPos3i$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3i$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3i").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IPROC glad_debug_glWindowPos3i
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3i$layout() {
        return glad_debug_glWindowPos3i$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IPROC glad_debug_glWindowPos3i
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3i$segment() {
        return glad_debug_glWindowPos3i$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IPROC glad_debug_glWindowPos3i
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3i() {
        return glad_debug_glWindowPos3i$constants.SEGMENT.get(glad_debug_glWindowPos3i$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IPROC glad_debug_glWindowPos3i
     * }
     */
    public static void glad_debug_glWindowPos3i(MemorySegment varValue) {
        glad_debug_glWindowPos3i$constants.SEGMENT.set(glad_debug_glWindowPos3i$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3iARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3iARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB
     * }
     */
    public static AddressLayout glad_glWindowPos3iARB$layout() {
        return glad_glWindowPos3iARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB
     * }
     */
    public static MemorySegment glad_glWindowPos3iARB$segment() {
        return glad_glWindowPos3iARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB
     * }
     */
    public static MemorySegment glad_glWindowPos3iARB() {
        return glad_glWindowPos3iARB$constants.SEGMENT.get(glad_glWindowPos3iARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB
     * }
     */
    public static void glad_glWindowPos3iARB(MemorySegment varValue) {
        glad_glWindowPos3iARB$constants.SEGMENT.set(glad_glWindowPos3iARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3iARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3iARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IARBPROC glad_debug_glWindowPos3iARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3iARB$layout() {
        return glad_debug_glWindowPos3iARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IARBPROC glad_debug_glWindowPos3iARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3iARB$segment() {
        return glad_debug_glWindowPos3iARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IARBPROC glad_debug_glWindowPos3iARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3iARB() {
        return glad_debug_glWindowPos3iARB$constants.SEGMENT.get(glad_debug_glWindowPos3iARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IARBPROC glad_debug_glWindowPos3iARB
     * }
     */
    public static void glad_debug_glWindowPos3iARB(MemorySegment varValue) {
        glad_debug_glWindowPos3iARB$constants.SEGMENT.set(glad_debug_glWindowPos3iARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3iMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3iMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IMESAPROC glad_glWindowPos3iMESA
     * }
     */
    public static AddressLayout glad_glWindowPos3iMESA$layout() {
        return glad_glWindowPos3iMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IMESAPROC glad_glWindowPos3iMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3iMESA$segment() {
        return glad_glWindowPos3iMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IMESAPROC glad_glWindowPos3iMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3iMESA() {
        return glad_glWindowPos3iMESA$constants.SEGMENT.get(glad_glWindowPos3iMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IMESAPROC glad_glWindowPos3iMESA
     * }
     */
    public static void glad_glWindowPos3iMESA(MemorySegment varValue) {
        glad_glWindowPos3iMESA$constants.SEGMENT.set(glad_glWindowPos3iMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3iMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3iMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IMESAPROC glad_debug_glWindowPos3iMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3iMESA$layout() {
        return glad_debug_glWindowPos3iMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IMESAPROC glad_debug_glWindowPos3iMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3iMESA$segment() {
        return glad_debug_glWindowPos3iMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IMESAPROC glad_debug_glWindowPos3iMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3iMESA() {
        return glad_debug_glWindowPos3iMESA$constants.SEGMENT.get(glad_debug_glWindowPos3iMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IMESAPROC glad_debug_glWindowPos3iMESA
     * }
     */
    public static void glad_debug_glWindowPos3iMESA(MemorySegment varValue) {
        glad_debug_glWindowPos3iMESA$constants.SEGMENT.set(glad_debug_glWindowPos3iMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3iv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3iv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv
     * }
     */
    public static AddressLayout glad_glWindowPos3iv$layout() {
        return glad_glWindowPos3iv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv
     * }
     */
    public static MemorySegment glad_glWindowPos3iv$segment() {
        return glad_glWindowPos3iv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv
     * }
     */
    public static MemorySegment glad_glWindowPos3iv() {
        return glad_glWindowPos3iv$constants.SEGMENT.get(glad_glWindowPos3iv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv
     * }
     */
    public static void glad_glWindowPos3iv(MemorySegment varValue) {
        glad_glWindowPos3iv$constants.SEGMENT.set(glad_glWindowPos3iv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3iv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3iv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVPROC glad_debug_glWindowPos3iv
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3iv$layout() {
        return glad_debug_glWindowPos3iv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVPROC glad_debug_glWindowPos3iv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3iv$segment() {
        return glad_debug_glWindowPos3iv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVPROC glad_debug_glWindowPos3iv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3iv() {
        return glad_debug_glWindowPos3iv$constants.SEGMENT.get(glad_debug_glWindowPos3iv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVPROC glad_debug_glWindowPos3iv
     * }
     */
    public static void glad_debug_glWindowPos3iv(MemorySegment varValue) {
        glad_debug_glWindowPos3iv$constants.SEGMENT.set(glad_debug_glWindowPos3iv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3ivARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3ivARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB
     * }
     */
    public static AddressLayout glad_glWindowPos3ivARB$layout() {
        return glad_glWindowPos3ivARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB
     * }
     */
    public static MemorySegment glad_glWindowPos3ivARB$segment() {
        return glad_glWindowPos3ivARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB
     * }
     */
    public static MemorySegment glad_glWindowPos3ivARB() {
        return glad_glWindowPos3ivARB$constants.SEGMENT.get(glad_glWindowPos3ivARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB
     * }
     */
    public static void glad_glWindowPos3ivARB(MemorySegment varValue) {
        glad_glWindowPos3ivARB$constants.SEGMENT.set(glad_glWindowPos3ivARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3ivARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3ivARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVARBPROC glad_debug_glWindowPos3ivARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3ivARB$layout() {
        return glad_debug_glWindowPos3ivARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVARBPROC glad_debug_glWindowPos3ivARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3ivARB$segment() {
        return glad_debug_glWindowPos3ivARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVARBPROC glad_debug_glWindowPos3ivARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3ivARB() {
        return glad_debug_glWindowPos3ivARB$constants.SEGMENT.get(glad_debug_glWindowPos3ivARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVARBPROC glad_debug_glWindowPos3ivARB
     * }
     */
    public static void glad_debug_glWindowPos3ivARB(MemorySegment varValue) {
        glad_debug_glWindowPos3ivARB$constants.SEGMENT.set(glad_debug_glWindowPos3ivARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3ivMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3ivMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVMESAPROC glad_glWindowPos3ivMESA
     * }
     */
    public static AddressLayout glad_glWindowPos3ivMESA$layout() {
        return glad_glWindowPos3ivMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVMESAPROC glad_glWindowPos3ivMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3ivMESA$segment() {
        return glad_glWindowPos3ivMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVMESAPROC glad_glWindowPos3ivMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3ivMESA() {
        return glad_glWindowPos3ivMESA$constants.SEGMENT.get(glad_glWindowPos3ivMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVMESAPROC glad_glWindowPos3ivMESA
     * }
     */
    public static void glad_glWindowPos3ivMESA(MemorySegment varValue) {
        glad_glWindowPos3ivMESA$constants.SEGMENT.set(glad_glWindowPos3ivMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3ivMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3ivMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVMESAPROC glad_debug_glWindowPos3ivMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3ivMESA$layout() {
        return glad_debug_glWindowPos3ivMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVMESAPROC glad_debug_glWindowPos3ivMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3ivMESA$segment() {
        return glad_debug_glWindowPos3ivMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVMESAPROC glad_debug_glWindowPos3ivMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3ivMESA() {
        return glad_debug_glWindowPos3ivMESA$constants.SEGMENT.get(glad_debug_glWindowPos3ivMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3IVMESAPROC glad_debug_glWindowPos3ivMESA
     * }
     */
    public static void glad_debug_glWindowPos3ivMESA(MemorySegment varValue) {
        glad_debug_glWindowPos3ivMESA$constants.SEGMENT.set(glad_debug_glWindowPos3ivMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3s$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3s").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SPROC glad_glWindowPos3s
     * }
     */
    public static AddressLayout glad_glWindowPos3s$layout() {
        return glad_glWindowPos3s$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SPROC glad_glWindowPos3s
     * }
     */
    public static MemorySegment glad_glWindowPos3s$segment() {
        return glad_glWindowPos3s$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SPROC glad_glWindowPos3s
     * }
     */
    public static MemorySegment glad_glWindowPos3s() {
        return glad_glWindowPos3s$constants.SEGMENT.get(glad_glWindowPos3s$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SPROC glad_glWindowPos3s
     * }
     */
    public static void glad_glWindowPos3s(MemorySegment varValue) {
        glad_glWindowPos3s$constants.SEGMENT.set(glad_glWindowPos3s$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3s$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3s").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SPROC glad_debug_glWindowPos3s
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3s$layout() {
        return glad_debug_glWindowPos3s$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SPROC glad_debug_glWindowPos3s
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3s$segment() {
        return glad_debug_glWindowPos3s$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SPROC glad_debug_glWindowPos3s
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3s() {
        return glad_debug_glWindowPos3s$constants.SEGMENT.get(glad_debug_glWindowPos3s$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SPROC glad_debug_glWindowPos3s
     * }
     */
    public static void glad_debug_glWindowPos3s(MemorySegment varValue) {
        glad_debug_glWindowPos3s$constants.SEGMENT.set(glad_debug_glWindowPos3s$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3sARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3sARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB
     * }
     */
    public static AddressLayout glad_glWindowPos3sARB$layout() {
        return glad_glWindowPos3sARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB
     * }
     */
    public static MemorySegment glad_glWindowPos3sARB$segment() {
        return glad_glWindowPos3sARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB
     * }
     */
    public static MemorySegment glad_glWindowPos3sARB() {
        return glad_glWindowPos3sARB$constants.SEGMENT.get(glad_glWindowPos3sARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB
     * }
     */
    public static void glad_glWindowPos3sARB(MemorySegment varValue) {
        glad_glWindowPos3sARB$constants.SEGMENT.set(glad_glWindowPos3sARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3sARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3sARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SARBPROC glad_debug_glWindowPos3sARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3sARB$layout() {
        return glad_debug_glWindowPos3sARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SARBPROC glad_debug_glWindowPos3sARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3sARB$segment() {
        return glad_debug_glWindowPos3sARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SARBPROC glad_debug_glWindowPos3sARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3sARB() {
        return glad_debug_glWindowPos3sARB$constants.SEGMENT.get(glad_debug_glWindowPos3sARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SARBPROC glad_debug_glWindowPos3sARB
     * }
     */
    public static void glad_debug_glWindowPos3sARB(MemorySegment varValue) {
        glad_debug_glWindowPos3sARB$constants.SEGMENT.set(glad_debug_glWindowPos3sARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3sMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3sMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SMESAPROC glad_glWindowPos3sMESA
     * }
     */
    public static AddressLayout glad_glWindowPos3sMESA$layout() {
        return glad_glWindowPos3sMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SMESAPROC glad_glWindowPos3sMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3sMESA$segment() {
        return glad_glWindowPos3sMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SMESAPROC glad_glWindowPos3sMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3sMESA() {
        return glad_glWindowPos3sMESA$constants.SEGMENT.get(glad_glWindowPos3sMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SMESAPROC glad_glWindowPos3sMESA
     * }
     */
    public static void glad_glWindowPos3sMESA(MemorySegment varValue) {
        glad_glWindowPos3sMESA$constants.SEGMENT.set(glad_glWindowPos3sMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3sMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3sMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SMESAPROC glad_debug_glWindowPos3sMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3sMESA$layout() {
        return glad_debug_glWindowPos3sMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SMESAPROC glad_debug_glWindowPos3sMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3sMESA$segment() {
        return glad_debug_glWindowPos3sMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SMESAPROC glad_debug_glWindowPos3sMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3sMESA() {
        return glad_debug_glWindowPos3sMESA$constants.SEGMENT.get(glad_debug_glWindowPos3sMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SMESAPROC glad_debug_glWindowPos3sMESA
     * }
     */
    public static void glad_debug_glWindowPos3sMESA(MemorySegment varValue) {
        glad_debug_glWindowPos3sMESA$constants.SEGMENT.set(glad_debug_glWindowPos3sMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3sv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3sv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv
     * }
     */
    public static AddressLayout glad_glWindowPos3sv$layout() {
        return glad_glWindowPos3sv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv
     * }
     */
    public static MemorySegment glad_glWindowPos3sv$segment() {
        return glad_glWindowPos3sv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv
     * }
     */
    public static MemorySegment glad_glWindowPos3sv() {
        return glad_glWindowPos3sv$constants.SEGMENT.get(glad_glWindowPos3sv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv
     * }
     */
    public static void glad_glWindowPos3sv(MemorySegment varValue) {
        glad_glWindowPos3sv$constants.SEGMENT.set(glad_glWindowPos3sv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3sv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3sv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVPROC glad_debug_glWindowPos3sv
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3sv$layout() {
        return glad_debug_glWindowPos3sv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVPROC glad_debug_glWindowPos3sv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3sv$segment() {
        return glad_debug_glWindowPos3sv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVPROC glad_debug_glWindowPos3sv
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3sv() {
        return glad_debug_glWindowPos3sv$constants.SEGMENT.get(glad_debug_glWindowPos3sv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVPROC glad_debug_glWindowPos3sv
     * }
     */
    public static void glad_debug_glWindowPos3sv(MemorySegment varValue) {
        glad_debug_glWindowPos3sv$constants.SEGMENT.set(glad_debug_glWindowPos3sv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3svARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3svARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB
     * }
     */
    public static AddressLayout glad_glWindowPos3svARB$layout() {
        return glad_glWindowPos3svARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB
     * }
     */
    public static MemorySegment glad_glWindowPos3svARB$segment() {
        return glad_glWindowPos3svARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB
     * }
     */
    public static MemorySegment glad_glWindowPos3svARB() {
        return glad_glWindowPos3svARB$constants.SEGMENT.get(glad_glWindowPos3svARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB
     * }
     */
    public static void glad_glWindowPos3svARB(MemorySegment varValue) {
        glad_glWindowPos3svARB$constants.SEGMENT.set(glad_glWindowPos3svARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3svARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3svARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVARBPROC glad_debug_glWindowPos3svARB
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3svARB$layout() {
        return glad_debug_glWindowPos3svARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVARBPROC glad_debug_glWindowPos3svARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3svARB$segment() {
        return glad_debug_glWindowPos3svARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVARBPROC glad_debug_glWindowPos3svARB
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3svARB() {
        return glad_debug_glWindowPos3svARB$constants.SEGMENT.get(glad_debug_glWindowPos3svARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVARBPROC glad_debug_glWindowPos3svARB
     * }
     */
    public static void glad_debug_glWindowPos3svARB(MemorySegment varValue) {
        glad_debug_glWindowPos3svARB$constants.SEGMENT.set(glad_debug_glWindowPos3svARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos3svMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos3svMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVMESAPROC glad_glWindowPos3svMESA
     * }
     */
    public static AddressLayout glad_glWindowPos3svMESA$layout() {
        return glad_glWindowPos3svMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVMESAPROC glad_glWindowPos3svMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3svMESA$segment() {
        return glad_glWindowPos3svMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVMESAPROC glad_glWindowPos3svMESA
     * }
     */
    public static MemorySegment glad_glWindowPos3svMESA() {
        return glad_glWindowPos3svMESA$constants.SEGMENT.get(glad_glWindowPos3svMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVMESAPROC glad_glWindowPos3svMESA
     * }
     */
    public static void glad_glWindowPos3svMESA(MemorySegment varValue) {
        glad_glWindowPos3svMESA$constants.SEGMENT.set(glad_glWindowPos3svMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos3svMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos3svMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVMESAPROC glad_debug_glWindowPos3svMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos3svMESA$layout() {
        return glad_debug_glWindowPos3svMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVMESAPROC glad_debug_glWindowPos3svMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3svMESA$segment() {
        return glad_debug_glWindowPos3svMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVMESAPROC glad_debug_glWindowPos3svMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos3svMESA() {
        return glad_debug_glWindowPos3svMESA$constants.SEGMENT.get(glad_debug_glWindowPos3svMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS3SVMESAPROC glad_debug_glWindowPos3svMESA
     * }
     */
    public static void glad_debug_glWindowPos3svMESA(MemorySegment varValue) {
        glad_debug_glWindowPos3svMESA$constants.SEGMENT.set(glad_debug_glWindowPos3svMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos4dMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos4dMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DMESAPROC glad_glWindowPos4dMESA
     * }
     */
    public static AddressLayout glad_glWindowPos4dMESA$layout() {
        return glad_glWindowPos4dMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DMESAPROC glad_glWindowPos4dMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4dMESA$segment() {
        return glad_glWindowPos4dMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DMESAPROC glad_glWindowPos4dMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4dMESA() {
        return glad_glWindowPos4dMESA$constants.SEGMENT.get(glad_glWindowPos4dMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DMESAPROC glad_glWindowPos4dMESA
     * }
     */
    public static void glad_glWindowPos4dMESA(MemorySegment varValue) {
        glad_glWindowPos4dMESA$constants.SEGMENT.set(glad_glWindowPos4dMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos4dMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos4dMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DMESAPROC glad_debug_glWindowPos4dMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos4dMESA$layout() {
        return glad_debug_glWindowPos4dMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DMESAPROC glad_debug_glWindowPos4dMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4dMESA$segment() {
        return glad_debug_glWindowPos4dMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DMESAPROC glad_debug_glWindowPos4dMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4dMESA() {
        return glad_debug_glWindowPos4dMESA$constants.SEGMENT.get(glad_debug_glWindowPos4dMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DMESAPROC glad_debug_glWindowPos4dMESA
     * }
     */
    public static void glad_debug_glWindowPos4dMESA(MemorySegment varValue) {
        glad_debug_glWindowPos4dMESA$constants.SEGMENT.set(glad_debug_glWindowPos4dMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos4dvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos4dvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DVMESAPROC glad_glWindowPos4dvMESA
     * }
     */
    public static AddressLayout glad_glWindowPos4dvMESA$layout() {
        return glad_glWindowPos4dvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DVMESAPROC glad_glWindowPos4dvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4dvMESA$segment() {
        return glad_glWindowPos4dvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DVMESAPROC glad_glWindowPos4dvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4dvMESA() {
        return glad_glWindowPos4dvMESA$constants.SEGMENT.get(glad_glWindowPos4dvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DVMESAPROC glad_glWindowPos4dvMESA
     * }
     */
    public static void glad_glWindowPos4dvMESA(MemorySegment varValue) {
        glad_glWindowPos4dvMESA$constants.SEGMENT.set(glad_glWindowPos4dvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos4dvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos4dvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DVMESAPROC glad_debug_glWindowPos4dvMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos4dvMESA$layout() {
        return glad_debug_glWindowPos4dvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DVMESAPROC glad_debug_glWindowPos4dvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4dvMESA$segment() {
        return glad_debug_glWindowPos4dvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DVMESAPROC glad_debug_glWindowPos4dvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4dvMESA() {
        return glad_debug_glWindowPos4dvMESA$constants.SEGMENT.get(glad_debug_glWindowPos4dvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4DVMESAPROC glad_debug_glWindowPos4dvMESA
     * }
     */
    public static void glad_debug_glWindowPos4dvMESA(MemorySegment varValue) {
        glad_debug_glWindowPos4dvMESA$constants.SEGMENT.set(glad_debug_glWindowPos4dvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos4fMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos4fMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FMESAPROC glad_glWindowPos4fMESA
     * }
     */
    public static AddressLayout glad_glWindowPos4fMESA$layout() {
        return glad_glWindowPos4fMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FMESAPROC glad_glWindowPos4fMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4fMESA$segment() {
        return glad_glWindowPos4fMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FMESAPROC glad_glWindowPos4fMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4fMESA() {
        return glad_glWindowPos4fMESA$constants.SEGMENT.get(glad_glWindowPos4fMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FMESAPROC glad_glWindowPos4fMESA
     * }
     */
    public static void glad_glWindowPos4fMESA(MemorySegment varValue) {
        glad_glWindowPos4fMESA$constants.SEGMENT.set(glad_glWindowPos4fMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos4fMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos4fMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FMESAPROC glad_debug_glWindowPos4fMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos4fMESA$layout() {
        return glad_debug_glWindowPos4fMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FMESAPROC glad_debug_glWindowPos4fMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4fMESA$segment() {
        return glad_debug_glWindowPos4fMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FMESAPROC glad_debug_glWindowPos4fMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4fMESA() {
        return glad_debug_glWindowPos4fMESA$constants.SEGMENT.get(glad_debug_glWindowPos4fMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FMESAPROC glad_debug_glWindowPos4fMESA
     * }
     */
    public static void glad_debug_glWindowPos4fMESA(MemorySegment varValue) {
        glad_debug_glWindowPos4fMESA$constants.SEGMENT.set(glad_debug_glWindowPos4fMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos4fvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos4fvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FVMESAPROC glad_glWindowPos4fvMESA
     * }
     */
    public static AddressLayout glad_glWindowPos4fvMESA$layout() {
        return glad_glWindowPos4fvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FVMESAPROC glad_glWindowPos4fvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4fvMESA$segment() {
        return glad_glWindowPos4fvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FVMESAPROC glad_glWindowPos4fvMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4fvMESA() {
        return glad_glWindowPos4fvMESA$constants.SEGMENT.get(glad_glWindowPos4fvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FVMESAPROC glad_glWindowPos4fvMESA
     * }
     */
    public static void glad_glWindowPos4fvMESA(MemorySegment varValue) {
        glad_glWindowPos4fvMESA$constants.SEGMENT.set(glad_glWindowPos4fvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos4fvMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos4fvMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FVMESAPROC glad_debug_glWindowPos4fvMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos4fvMESA$layout() {
        return glad_debug_glWindowPos4fvMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FVMESAPROC glad_debug_glWindowPos4fvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4fvMESA$segment() {
        return glad_debug_glWindowPos4fvMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FVMESAPROC glad_debug_glWindowPos4fvMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4fvMESA() {
        return glad_debug_glWindowPos4fvMESA$constants.SEGMENT.get(glad_debug_glWindowPos4fvMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4FVMESAPROC glad_debug_glWindowPos4fvMESA
     * }
     */
    public static void glad_debug_glWindowPos4fvMESA(MemorySegment varValue) {
        glad_debug_glWindowPos4fvMESA$constants.SEGMENT.set(glad_debug_glWindowPos4fvMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos4iMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos4iMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IMESAPROC glad_glWindowPos4iMESA
     * }
     */
    public static AddressLayout glad_glWindowPos4iMESA$layout() {
        return glad_glWindowPos4iMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IMESAPROC glad_glWindowPos4iMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4iMESA$segment() {
        return glad_glWindowPos4iMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IMESAPROC glad_glWindowPos4iMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4iMESA() {
        return glad_glWindowPos4iMESA$constants.SEGMENT.get(glad_glWindowPos4iMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IMESAPROC glad_glWindowPos4iMESA
     * }
     */
    public static void glad_glWindowPos4iMESA(MemorySegment varValue) {
        glad_glWindowPos4iMESA$constants.SEGMENT.set(glad_glWindowPos4iMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos4iMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos4iMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IMESAPROC glad_debug_glWindowPos4iMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos4iMESA$layout() {
        return glad_debug_glWindowPos4iMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IMESAPROC glad_debug_glWindowPos4iMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4iMESA$segment() {
        return glad_debug_glWindowPos4iMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IMESAPROC glad_debug_glWindowPos4iMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4iMESA() {
        return glad_debug_glWindowPos4iMESA$constants.SEGMENT.get(glad_debug_glWindowPos4iMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IMESAPROC glad_debug_glWindowPos4iMESA
     * }
     */
    public static void glad_debug_glWindowPos4iMESA(MemorySegment varValue) {
        glad_debug_glWindowPos4iMESA$constants.SEGMENT.set(glad_debug_glWindowPos4iMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos4ivMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos4ivMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IVMESAPROC glad_glWindowPos4ivMESA
     * }
     */
    public static AddressLayout glad_glWindowPos4ivMESA$layout() {
        return glad_glWindowPos4ivMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IVMESAPROC glad_glWindowPos4ivMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4ivMESA$segment() {
        return glad_glWindowPos4ivMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IVMESAPROC glad_glWindowPos4ivMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4ivMESA() {
        return glad_glWindowPos4ivMESA$constants.SEGMENT.get(glad_glWindowPos4ivMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IVMESAPROC glad_glWindowPos4ivMESA
     * }
     */
    public static void glad_glWindowPos4ivMESA(MemorySegment varValue) {
        glad_glWindowPos4ivMESA$constants.SEGMENT.set(glad_glWindowPos4ivMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos4ivMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos4ivMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IVMESAPROC glad_debug_glWindowPos4ivMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos4ivMESA$layout() {
        return glad_debug_glWindowPos4ivMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IVMESAPROC glad_debug_glWindowPos4ivMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4ivMESA$segment() {
        return glad_debug_glWindowPos4ivMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IVMESAPROC glad_debug_glWindowPos4ivMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4ivMESA() {
        return glad_debug_glWindowPos4ivMESA$constants.SEGMENT.get(glad_debug_glWindowPos4ivMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4IVMESAPROC glad_debug_glWindowPos4ivMESA
     * }
     */
    public static void glad_debug_glWindowPos4ivMESA(MemorySegment varValue) {
        glad_debug_glWindowPos4ivMESA$constants.SEGMENT.set(glad_debug_glWindowPos4ivMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos4sMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos4sMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SMESAPROC glad_glWindowPos4sMESA
     * }
     */
    public static AddressLayout glad_glWindowPos4sMESA$layout() {
        return glad_glWindowPos4sMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SMESAPROC glad_glWindowPos4sMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4sMESA$segment() {
        return glad_glWindowPos4sMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SMESAPROC glad_glWindowPos4sMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4sMESA() {
        return glad_glWindowPos4sMESA$constants.SEGMENT.get(glad_glWindowPos4sMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SMESAPROC glad_glWindowPos4sMESA
     * }
     */
    public static void glad_glWindowPos4sMESA(MemorySegment varValue) {
        glad_glWindowPos4sMESA$constants.SEGMENT.set(glad_glWindowPos4sMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos4sMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos4sMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SMESAPROC glad_debug_glWindowPos4sMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos4sMESA$layout() {
        return glad_debug_glWindowPos4sMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SMESAPROC glad_debug_glWindowPos4sMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4sMESA$segment() {
        return glad_debug_glWindowPos4sMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SMESAPROC glad_debug_glWindowPos4sMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4sMESA() {
        return glad_debug_glWindowPos4sMESA$constants.SEGMENT.get(glad_debug_glWindowPos4sMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SMESAPROC glad_debug_glWindowPos4sMESA
     * }
     */
    public static void glad_debug_glWindowPos4sMESA(MemorySegment varValue) {
        glad_debug_glWindowPos4sMESA$constants.SEGMENT.set(glad_debug_glWindowPos4sMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glWindowPos4svMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glWindowPos4svMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SVMESAPROC glad_glWindowPos4svMESA
     * }
     */
    public static AddressLayout glad_glWindowPos4svMESA$layout() {
        return glad_glWindowPos4svMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SVMESAPROC glad_glWindowPos4svMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4svMESA$segment() {
        return glad_glWindowPos4svMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SVMESAPROC glad_glWindowPos4svMESA
     * }
     */
    public static MemorySegment glad_glWindowPos4svMESA() {
        return glad_glWindowPos4svMESA$constants.SEGMENT.get(glad_glWindowPos4svMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SVMESAPROC glad_glWindowPos4svMESA
     * }
     */
    public static void glad_glWindowPos4svMESA(MemorySegment varValue) {
        glad_glWindowPos4svMESA$constants.SEGMENT.set(glad_glWindowPos4svMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glWindowPos4svMESA$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glWindowPos4svMESA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SVMESAPROC glad_debug_glWindowPos4svMESA
     * }
     */
    public static AddressLayout glad_debug_glWindowPos4svMESA$layout() {
        return glad_debug_glWindowPos4svMESA$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SVMESAPROC glad_debug_glWindowPos4svMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4svMESA$segment() {
        return glad_debug_glWindowPos4svMESA$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SVMESAPROC glad_debug_glWindowPos4svMESA
     * }
     */
    public static MemorySegment glad_debug_glWindowPos4svMESA() {
        return glad_debug_glWindowPos4svMESA$constants.SEGMENT.get(glad_debug_glWindowPos4svMESA$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLWINDOWPOS4SVMESAPROC glad_debug_glWindowPos4svMESA
     * }
     */
    public static void glad_debug_glWindowPos4svMESA(MemorySegment varValue) {
        glad_debug_glWindowPos4svMESA$constants.SEGMENT.set(glad_debug_glWindowPos4svMESA$constants.LAYOUT, 0L, varValue);
    }

    private static class gladSetGLPreCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("gladSetGLPreCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gladSetGLPreCallback(GLADprecallback cb)
     * }
     */
    public static FunctionDescriptor gladSetGLPreCallback$descriptor() {
        return gladSetGLPreCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gladSetGLPreCallback(GLADprecallback cb)
     * }
     */
    public static MethodHandle gladSetGLPreCallback$handle() {
        return gladSetGLPreCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gladSetGLPreCallback(GLADprecallback cb)
     * }
     */
    public static MemorySegment gladSetGLPreCallback$address() {
        return gladSetGLPreCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gladSetGLPreCallback(GLADprecallback cb)
     * }
     */
    public static void gladSetGLPreCallback(MemorySegment cb) {
        var mh$ = gladSetGLPreCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gladSetGLPreCallback", cb);
            }
            mh$.invokeExact(cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gladSetGLPostCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("gladSetGLPostCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gladSetGLPostCallback(GLADpostcallback cb)
     * }
     */
    public static FunctionDescriptor gladSetGLPostCallback$descriptor() {
        return gladSetGLPostCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gladSetGLPostCallback(GLADpostcallback cb)
     * }
     */
    public static MethodHandle gladSetGLPostCallback$handle() {
        return gladSetGLPostCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gladSetGLPostCallback(GLADpostcallback cb)
     * }
     */
    public static MemorySegment gladSetGLPostCallback$address() {
        return gladSetGLPostCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gladSetGLPostCallback(GLADpostcallback cb)
     * }
     */
    public static void gladSetGLPostCallback(MemorySegment cb) {
        var mh$ = gladSetGLPostCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gladSetGLPostCallback", cb);
            }
            mh$.invokeExact(cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gladInstallGLDebug {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glcore.findOrThrow("gladInstallGLDebug");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gladInstallGLDebug()
     * }
     */
    public static FunctionDescriptor gladInstallGLDebug$descriptor() {
        return gladInstallGLDebug.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gladInstallGLDebug()
     * }
     */
    public static MethodHandle gladInstallGLDebug$handle() {
        return gladInstallGLDebug.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gladInstallGLDebug()
     * }
     */
    public static MemorySegment gladInstallGLDebug$address() {
        return gladInstallGLDebug.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gladInstallGLDebug()
     * }
     */
    public static void gladInstallGLDebug() {
        var mh$ = gladInstallGLDebug.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gladInstallGLDebug");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gladUninstallGLDebug {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glcore.findOrThrow("gladUninstallGLDebug");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gladUninstallGLDebug()
     * }
     */
    public static FunctionDescriptor gladUninstallGLDebug$descriptor() {
        return gladUninstallGLDebug.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gladUninstallGLDebug()
     * }
     */
    public static MethodHandle gladUninstallGLDebug$handle() {
        return gladUninstallGLDebug.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gladUninstallGLDebug()
     * }
     */
    public static MemorySegment gladUninstallGLDebug$address() {
        return gladUninstallGLDebug.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gladUninstallGLDebug()
     * }
     */
    public static void gladUninstallGLDebug() {
        var mh$ = gladUninstallGLDebug.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gladUninstallGLDebug");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gladLoadGLUserPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("gladLoadGLUserPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gladLoadGLUserPtr(GLADuserptrloadfunc load, void *userptr)
     * }
     */
    public static FunctionDescriptor gladLoadGLUserPtr$descriptor() {
        return gladLoadGLUserPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gladLoadGLUserPtr(GLADuserptrloadfunc load, void *userptr)
     * }
     */
    public static MethodHandle gladLoadGLUserPtr$handle() {
        return gladLoadGLUserPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int gladLoadGLUserPtr(GLADuserptrloadfunc load, void *userptr)
     * }
     */
    public static MemorySegment gladLoadGLUserPtr$address() {
        return gladLoadGLUserPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int gladLoadGLUserPtr(GLADuserptrloadfunc load, void *userptr)
     * }
     */
    public static int gladLoadGLUserPtr(MemorySegment load, MemorySegment userptr) {
        var mh$ = gladLoadGLUserPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gladLoadGLUserPtr", load, userptr);
            }
            return (int)mh$.invokeExact(load, userptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gladLoadGL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("gladLoadGL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gladLoadGL(GLADloadfunc load)
     * }
     */
    public static FunctionDescriptor gladLoadGL$descriptor() {
        return gladLoadGL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gladLoadGL(GLADloadfunc load)
     * }
     */
    public static MethodHandle gladLoadGL$handle() {
        return gladLoadGL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int gladLoadGL(GLADloadfunc load)
     * }
     */
    public static MemorySegment gladLoadGL$address() {
        return gladLoadGL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int gladLoadGL(GLADloadfunc load)
     * }
     */
    public static int gladLoadGL(MemorySegment load) {
        var mh$ = gladLoadGL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gladLoadGL", load);
            }
            return (int)mh$.invokeExact(load);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gladLoaderLoadGL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT    );

        public static final MemorySegment ADDR = glcore.findOrThrow("gladLoaderLoadGL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gladLoaderLoadGL()
     * }
     */
    public static FunctionDescriptor gladLoaderLoadGL$descriptor() {
        return gladLoaderLoadGL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gladLoaderLoadGL()
     * }
     */
    public static MethodHandle gladLoaderLoadGL$handle() {
        return gladLoaderLoadGL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int gladLoaderLoadGL()
     * }
     */
    public static MemorySegment gladLoaderLoadGL$address() {
        return gladLoaderLoadGL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int gladLoaderLoadGL()
     * }
     */
    public static int gladLoaderLoadGL() {
        var mh$ = gladLoaderLoadGL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gladLoaderLoadGL");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gladLoaderUnloadGL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glcore.findOrThrow("gladLoaderUnloadGL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gladLoaderUnloadGL()
     * }
     */
    public static FunctionDescriptor gladLoaderUnloadGL$descriptor() {
        return gladLoaderUnloadGL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gladLoaderUnloadGL()
     * }
     */
    public static MethodHandle gladLoaderUnloadGL$handle() {
        return gladLoaderUnloadGL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gladLoaderUnloadGL()
     * }
     */
    public static MemorySegment gladLoaderUnloadGL$address() {
        return gladLoaderUnloadGL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gladLoaderUnloadGL()
     * }
     */
    public static void gladLoaderUnloadGL() {
        var mh$ = gladLoaderUnloadGL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gladLoaderUnloadGL");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = glcore.C_INT;

    private static class glfwInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwInit()
     * }
     */
    public static FunctionDescriptor glfwInit$descriptor() {
        return glfwInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwInit()
     * }
     */
    public static MethodHandle glfwInit$handle() {
        return glfwInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwInit()
     * }
     */
    public static MemorySegment glfwInit$address() {
        return glfwInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwInit()
     * }
     */
    public static int glfwInit() {
        var mh$ = glfwInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwInit");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwTerminate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwTerminate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwTerminate()
     * }
     */
    public static FunctionDescriptor glfwTerminate$descriptor() {
        return glfwTerminate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwTerminate()
     * }
     */
    public static MethodHandle glfwTerminate$handle() {
        return glfwTerminate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwTerminate()
     * }
     */
    public static MemorySegment glfwTerminate$address() {
        return glfwTerminate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwTerminate()
     * }
     */
    public static void glfwTerminate() {
        var mh$ = glfwTerminate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwTerminate");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwInitHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwInitHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwInitHint(int hint, int value)
     * }
     */
    public static FunctionDescriptor glfwInitHint$descriptor() {
        return glfwInitHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwInitHint(int hint, int value)
     * }
     */
    public static MethodHandle glfwInitHint$handle() {
        return glfwInitHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwInitHint(int hint, int value)
     * }
     */
    public static MemorySegment glfwInitHint$address() {
        return glfwInitHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwInitHint(int hint, int value)
     * }
     */
    public static void glfwInitHint(int hint, int value) {
        var mh$ = glfwInitHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwInitHint", hint, value);
            }
            mh$.invokeExact(hint, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwInitAllocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwInitAllocator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwInitAllocator(const GLFWallocator *allocator)
     * }
     */
    public static FunctionDescriptor glfwInitAllocator$descriptor() {
        return glfwInitAllocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwInitAllocator(const GLFWallocator *allocator)
     * }
     */
    public static MethodHandle glfwInitAllocator$handle() {
        return glfwInitAllocator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwInitAllocator(const GLFWallocator *allocator)
     * }
     */
    public static MemorySegment glfwInitAllocator$address() {
        return glfwInitAllocator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwInitAllocator(const GLFWallocator *allocator)
     * }
     */
    public static void glfwInitAllocator(MemorySegment allocator) {
        var mh$ = glfwInitAllocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwInitAllocator", allocator);
            }
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetVersion(int *major, int *minor, int *rev)
     * }
     */
    public static FunctionDescriptor glfwGetVersion$descriptor() {
        return glfwGetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetVersion(int *major, int *minor, int *rev)
     * }
     */
    public static MethodHandle glfwGetVersion$handle() {
        return glfwGetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetVersion(int *major, int *minor, int *rev)
     * }
     */
    public static MemorySegment glfwGetVersion$address() {
        return glfwGetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetVersion(int *major, int *minor, int *rev)
     * }
     */
    public static void glfwGetVersion(MemorySegment major, MemorySegment minor, MemorySegment rev) {
        var mh$ = glfwGetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetVersion", major, minor, rev);
            }
            mh$.invokeExact(major, minor, rev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetVersionString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetVersionString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *glfwGetVersionString()
     * }
     */
    public static FunctionDescriptor glfwGetVersionString$descriptor() {
        return glfwGetVersionString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *glfwGetVersionString()
     * }
     */
    public static MethodHandle glfwGetVersionString$handle() {
        return glfwGetVersionString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *glfwGetVersionString()
     * }
     */
    public static MemorySegment glfwGetVersionString$address() {
        return glfwGetVersionString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *glfwGetVersionString()
     * }
     */
    public static MemorySegment glfwGetVersionString() {
        var mh$ = glfwGetVersionString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetVersionString");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwGetError(const char **description)
     * }
     */
    public static FunctionDescriptor glfwGetError$descriptor() {
        return glfwGetError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwGetError(const char **description)
     * }
     */
    public static MethodHandle glfwGetError$handle() {
        return glfwGetError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwGetError(const char **description)
     * }
     */
    public static MemorySegment glfwGetError$address() {
        return glfwGetError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwGetError(const char **description)
     * }
     */
    public static int glfwGetError(MemorySegment description) {
        var mh$ = glfwGetError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetError", description);
            }
            return (int)mh$.invokeExact(description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetErrorCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetErrorCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetErrorCallback$descriptor() {
        return glfwSetErrorCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback)
     * }
     */
    public static MethodHandle glfwSetErrorCallback$handle() {
        return glfwSetErrorCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback)
     * }
     */
    public static MemorySegment glfwSetErrorCallback$address() {
        return glfwSetErrorCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback)
     * }
     */
    public static MemorySegment glfwSetErrorCallback(MemorySegment callback) {
        var mh$ = glfwSetErrorCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetErrorCallback", callback);
            }
            return (MemorySegment)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetPlatform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetPlatform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwGetPlatform()
     * }
     */
    public static FunctionDescriptor glfwGetPlatform$descriptor() {
        return glfwGetPlatform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwGetPlatform()
     * }
     */
    public static MethodHandle glfwGetPlatform$handle() {
        return glfwGetPlatform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwGetPlatform()
     * }
     */
    public static MemorySegment glfwGetPlatform$address() {
        return glfwGetPlatform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwGetPlatform()
     * }
     */
    public static int glfwGetPlatform() {
        var mh$ = glfwGetPlatform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetPlatform");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwPlatformSupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwPlatformSupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwPlatformSupported(int platform)
     * }
     */
    public static FunctionDescriptor glfwPlatformSupported$descriptor() {
        return glfwPlatformSupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwPlatformSupported(int platform)
     * }
     */
    public static MethodHandle glfwPlatformSupported$handle() {
        return glfwPlatformSupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwPlatformSupported(int platform)
     * }
     */
    public static MemorySegment glfwPlatformSupported$address() {
        return glfwPlatformSupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwPlatformSupported(int platform)
     * }
     */
    public static int glfwPlatformSupported(int platform) {
        var mh$ = glfwPlatformSupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwPlatformSupported", platform);
            }
            return (int)mh$.invokeExact(platform);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetMonitors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetMonitors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWmonitor **glfwGetMonitors(int *count)
     * }
     */
    public static FunctionDescriptor glfwGetMonitors$descriptor() {
        return glfwGetMonitors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWmonitor **glfwGetMonitors(int *count)
     * }
     */
    public static MethodHandle glfwGetMonitors$handle() {
        return glfwGetMonitors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWmonitor **glfwGetMonitors(int *count)
     * }
     */
    public static MemorySegment glfwGetMonitors$address() {
        return glfwGetMonitors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWmonitor **glfwGetMonitors(int *count)
     * }
     */
    public static MemorySegment glfwGetMonitors(MemorySegment count) {
        var mh$ = glfwGetMonitors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetMonitors", count);
            }
            return (MemorySegment)mh$.invokeExact(count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetPrimaryMonitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetPrimaryMonitor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWmonitor *glfwGetPrimaryMonitor()
     * }
     */
    public static FunctionDescriptor glfwGetPrimaryMonitor$descriptor() {
        return glfwGetPrimaryMonitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWmonitor *glfwGetPrimaryMonitor()
     * }
     */
    public static MethodHandle glfwGetPrimaryMonitor$handle() {
        return glfwGetPrimaryMonitor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWmonitor *glfwGetPrimaryMonitor()
     * }
     */
    public static MemorySegment glfwGetPrimaryMonitor$address() {
        return glfwGetPrimaryMonitor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWmonitor *glfwGetPrimaryMonitor()
     * }
     */
    public static MemorySegment glfwGetPrimaryMonitor() {
        var mh$ = glfwGetPrimaryMonitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetPrimaryMonitor");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetMonitorPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetMonitorPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetMonitorPos(GLFWmonitor *monitor, int *xpos, int *ypos)
     * }
     */
    public static FunctionDescriptor glfwGetMonitorPos$descriptor() {
        return glfwGetMonitorPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetMonitorPos(GLFWmonitor *monitor, int *xpos, int *ypos)
     * }
     */
    public static MethodHandle glfwGetMonitorPos$handle() {
        return glfwGetMonitorPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetMonitorPos(GLFWmonitor *monitor, int *xpos, int *ypos)
     * }
     */
    public static MemorySegment glfwGetMonitorPos$address() {
        return glfwGetMonitorPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetMonitorPos(GLFWmonitor *monitor, int *xpos, int *ypos)
     * }
     */
    public static void glfwGetMonitorPos(MemorySegment monitor, MemorySegment xpos, MemorySegment ypos) {
        var mh$ = glfwGetMonitorPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetMonitorPos", monitor, xpos, ypos);
            }
            mh$.invokeExact(monitor, xpos, ypos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetMonitorWorkarea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetMonitorWorkarea");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetMonitorWorkarea(GLFWmonitor *monitor, int *xpos, int *ypos, int *width, int *height)
     * }
     */
    public static FunctionDescriptor glfwGetMonitorWorkarea$descriptor() {
        return glfwGetMonitorWorkarea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetMonitorWorkarea(GLFWmonitor *monitor, int *xpos, int *ypos, int *width, int *height)
     * }
     */
    public static MethodHandle glfwGetMonitorWorkarea$handle() {
        return glfwGetMonitorWorkarea.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetMonitorWorkarea(GLFWmonitor *monitor, int *xpos, int *ypos, int *width, int *height)
     * }
     */
    public static MemorySegment glfwGetMonitorWorkarea$address() {
        return glfwGetMonitorWorkarea.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetMonitorWorkarea(GLFWmonitor *monitor, int *xpos, int *ypos, int *width, int *height)
     * }
     */
    public static void glfwGetMonitorWorkarea(MemorySegment monitor, MemorySegment xpos, MemorySegment ypos, MemorySegment width, MemorySegment height) {
        var mh$ = glfwGetMonitorWorkarea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetMonitorWorkarea", monitor, xpos, ypos, width, height);
            }
            mh$.invokeExact(monitor, xpos, ypos, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetMonitorPhysicalSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetMonitorPhysicalSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetMonitorPhysicalSize(GLFWmonitor *monitor, int *widthMM, int *heightMM)
     * }
     */
    public static FunctionDescriptor glfwGetMonitorPhysicalSize$descriptor() {
        return glfwGetMonitorPhysicalSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetMonitorPhysicalSize(GLFWmonitor *monitor, int *widthMM, int *heightMM)
     * }
     */
    public static MethodHandle glfwGetMonitorPhysicalSize$handle() {
        return glfwGetMonitorPhysicalSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetMonitorPhysicalSize(GLFWmonitor *monitor, int *widthMM, int *heightMM)
     * }
     */
    public static MemorySegment glfwGetMonitorPhysicalSize$address() {
        return glfwGetMonitorPhysicalSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetMonitorPhysicalSize(GLFWmonitor *monitor, int *widthMM, int *heightMM)
     * }
     */
    public static void glfwGetMonitorPhysicalSize(MemorySegment monitor, MemorySegment widthMM, MemorySegment heightMM) {
        var mh$ = glfwGetMonitorPhysicalSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetMonitorPhysicalSize", monitor, widthMM, heightMM);
            }
            mh$.invokeExact(monitor, widthMM, heightMM);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetMonitorContentScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetMonitorContentScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetMonitorContentScale(GLFWmonitor *monitor, float *xscale, float *yscale)
     * }
     */
    public static FunctionDescriptor glfwGetMonitorContentScale$descriptor() {
        return glfwGetMonitorContentScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetMonitorContentScale(GLFWmonitor *monitor, float *xscale, float *yscale)
     * }
     */
    public static MethodHandle glfwGetMonitorContentScale$handle() {
        return glfwGetMonitorContentScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetMonitorContentScale(GLFWmonitor *monitor, float *xscale, float *yscale)
     * }
     */
    public static MemorySegment glfwGetMonitorContentScale$address() {
        return glfwGetMonitorContentScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetMonitorContentScale(GLFWmonitor *monitor, float *xscale, float *yscale)
     * }
     */
    public static void glfwGetMonitorContentScale(MemorySegment monitor, MemorySegment xscale, MemorySegment yscale) {
        var mh$ = glfwGetMonitorContentScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetMonitorContentScale", monitor, xscale, yscale);
            }
            mh$.invokeExact(monitor, xscale, yscale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetMonitorName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetMonitorName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *glfwGetMonitorName(GLFWmonitor *monitor)
     * }
     */
    public static FunctionDescriptor glfwGetMonitorName$descriptor() {
        return glfwGetMonitorName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *glfwGetMonitorName(GLFWmonitor *monitor)
     * }
     */
    public static MethodHandle glfwGetMonitorName$handle() {
        return glfwGetMonitorName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *glfwGetMonitorName(GLFWmonitor *monitor)
     * }
     */
    public static MemorySegment glfwGetMonitorName$address() {
        return glfwGetMonitorName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *glfwGetMonitorName(GLFWmonitor *monitor)
     * }
     */
    public static MemorySegment glfwGetMonitorName(MemorySegment monitor) {
        var mh$ = glfwGetMonitorName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetMonitorName", monitor);
            }
            return (MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetMonitorUserPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetMonitorUserPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetMonitorUserPointer(GLFWmonitor *monitor, void *pointer)
     * }
     */
    public static FunctionDescriptor glfwSetMonitorUserPointer$descriptor() {
        return glfwSetMonitorUserPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetMonitorUserPointer(GLFWmonitor *monitor, void *pointer)
     * }
     */
    public static MethodHandle glfwSetMonitorUserPointer$handle() {
        return glfwSetMonitorUserPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetMonitorUserPointer(GLFWmonitor *monitor, void *pointer)
     * }
     */
    public static MemorySegment glfwSetMonitorUserPointer$address() {
        return glfwSetMonitorUserPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetMonitorUserPointer(GLFWmonitor *monitor, void *pointer)
     * }
     */
    public static void glfwSetMonitorUserPointer(MemorySegment monitor, MemorySegment pointer) {
        var mh$ = glfwSetMonitorUserPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetMonitorUserPointer", monitor, pointer);
            }
            mh$.invokeExact(monitor, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetMonitorUserPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetMonitorUserPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *glfwGetMonitorUserPointer(GLFWmonitor *monitor)
     * }
     */
    public static FunctionDescriptor glfwGetMonitorUserPointer$descriptor() {
        return glfwGetMonitorUserPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *glfwGetMonitorUserPointer(GLFWmonitor *monitor)
     * }
     */
    public static MethodHandle glfwGetMonitorUserPointer$handle() {
        return glfwGetMonitorUserPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *glfwGetMonitorUserPointer(GLFWmonitor *monitor)
     * }
     */
    public static MemorySegment glfwGetMonitorUserPointer$address() {
        return glfwGetMonitorUserPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *glfwGetMonitorUserPointer(GLFWmonitor *monitor)
     * }
     */
    public static MemorySegment glfwGetMonitorUserPointer(MemorySegment monitor) {
        var mh$ = glfwGetMonitorUserPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetMonitorUserPointer", monitor);
            }
            return (MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetMonitorCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetMonitorCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetMonitorCallback$descriptor() {
        return glfwSetMonitorCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback)
     * }
     */
    public static MethodHandle glfwSetMonitorCallback$handle() {
        return glfwSetMonitorCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback)
     * }
     */
    public static MemorySegment glfwSetMonitorCallback$address() {
        return glfwSetMonitorCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback)
     * }
     */
    public static MemorySegment glfwSetMonitorCallback(MemorySegment callback) {
        var mh$ = glfwSetMonitorCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetMonitorCallback", callback);
            }
            return (MemorySegment)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetVideoModes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetVideoModes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const GLFWvidmode *glfwGetVideoModes(GLFWmonitor *monitor, int *count)
     * }
     */
    public static FunctionDescriptor glfwGetVideoModes$descriptor() {
        return glfwGetVideoModes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const GLFWvidmode *glfwGetVideoModes(GLFWmonitor *monitor, int *count)
     * }
     */
    public static MethodHandle glfwGetVideoModes$handle() {
        return glfwGetVideoModes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const GLFWvidmode *glfwGetVideoModes(GLFWmonitor *monitor, int *count)
     * }
     */
    public static MemorySegment glfwGetVideoModes$address() {
        return glfwGetVideoModes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const GLFWvidmode *glfwGetVideoModes(GLFWmonitor *monitor, int *count)
     * }
     */
    public static MemorySegment glfwGetVideoModes(MemorySegment monitor, MemorySegment count) {
        var mh$ = glfwGetVideoModes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetVideoModes", monitor, count);
            }
            return (MemorySegment)mh$.invokeExact(monitor, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetVideoMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetVideoMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const GLFWvidmode *glfwGetVideoMode(GLFWmonitor *monitor)
     * }
     */
    public static FunctionDescriptor glfwGetVideoMode$descriptor() {
        return glfwGetVideoMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const GLFWvidmode *glfwGetVideoMode(GLFWmonitor *monitor)
     * }
     */
    public static MethodHandle glfwGetVideoMode$handle() {
        return glfwGetVideoMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const GLFWvidmode *glfwGetVideoMode(GLFWmonitor *monitor)
     * }
     */
    public static MemorySegment glfwGetVideoMode$address() {
        return glfwGetVideoMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const GLFWvidmode *glfwGetVideoMode(GLFWmonitor *monitor)
     * }
     */
    public static MemorySegment glfwGetVideoMode(MemorySegment monitor) {
        var mh$ = glfwGetVideoMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetVideoMode", monitor);
            }
            return (MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetGamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_FLOAT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetGamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetGamma(GLFWmonitor *monitor, float gamma)
     * }
     */
    public static FunctionDescriptor glfwSetGamma$descriptor() {
        return glfwSetGamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetGamma(GLFWmonitor *monitor, float gamma)
     * }
     */
    public static MethodHandle glfwSetGamma$handle() {
        return glfwSetGamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetGamma(GLFWmonitor *monitor, float gamma)
     * }
     */
    public static MemorySegment glfwSetGamma$address() {
        return glfwSetGamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetGamma(GLFWmonitor *monitor, float gamma)
     * }
     */
    public static void glfwSetGamma(MemorySegment monitor, float gamma) {
        var mh$ = glfwSetGamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetGamma", monitor, gamma);
            }
            mh$.invokeExact(monitor, gamma);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetGammaRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetGammaRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const GLFWgammaramp *glfwGetGammaRamp(GLFWmonitor *monitor)
     * }
     */
    public static FunctionDescriptor glfwGetGammaRamp$descriptor() {
        return glfwGetGammaRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const GLFWgammaramp *glfwGetGammaRamp(GLFWmonitor *monitor)
     * }
     */
    public static MethodHandle glfwGetGammaRamp$handle() {
        return glfwGetGammaRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const GLFWgammaramp *glfwGetGammaRamp(GLFWmonitor *monitor)
     * }
     */
    public static MemorySegment glfwGetGammaRamp$address() {
        return glfwGetGammaRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const GLFWgammaramp *glfwGetGammaRamp(GLFWmonitor *monitor)
     * }
     */
    public static MemorySegment glfwGetGammaRamp(MemorySegment monitor) {
        var mh$ = glfwGetGammaRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetGammaRamp", monitor);
            }
            return (MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetGammaRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetGammaRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetGammaRamp(GLFWmonitor *monitor, const GLFWgammaramp *ramp)
     * }
     */
    public static FunctionDescriptor glfwSetGammaRamp$descriptor() {
        return glfwSetGammaRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetGammaRamp(GLFWmonitor *monitor, const GLFWgammaramp *ramp)
     * }
     */
    public static MethodHandle glfwSetGammaRamp$handle() {
        return glfwSetGammaRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetGammaRamp(GLFWmonitor *monitor, const GLFWgammaramp *ramp)
     * }
     */
    public static MemorySegment glfwSetGammaRamp$address() {
        return glfwSetGammaRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetGammaRamp(GLFWmonitor *monitor, const GLFWgammaramp *ramp)
     * }
     */
    public static void glfwSetGammaRamp(MemorySegment monitor, MemorySegment ramp) {
        var mh$ = glfwSetGammaRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetGammaRamp", monitor, ramp);
            }
            mh$.invokeExact(monitor, ramp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwDefaultWindowHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwDefaultWindowHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwDefaultWindowHints()
     * }
     */
    public static FunctionDescriptor glfwDefaultWindowHints$descriptor() {
        return glfwDefaultWindowHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwDefaultWindowHints()
     * }
     */
    public static MethodHandle glfwDefaultWindowHints$handle() {
        return glfwDefaultWindowHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwDefaultWindowHints()
     * }
     */
    public static MemorySegment glfwDefaultWindowHints$address() {
        return glfwDefaultWindowHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwDefaultWindowHints()
     * }
     */
    public static void glfwDefaultWindowHints() {
        var mh$ = glfwDefaultWindowHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwDefaultWindowHints");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwWindowHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwWindowHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwWindowHint(int hint, int value)
     * }
     */
    public static FunctionDescriptor glfwWindowHint$descriptor() {
        return glfwWindowHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwWindowHint(int hint, int value)
     * }
     */
    public static MethodHandle glfwWindowHint$handle() {
        return glfwWindowHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwWindowHint(int hint, int value)
     * }
     */
    public static MemorySegment glfwWindowHint$address() {
        return glfwWindowHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwWindowHint(int hint, int value)
     * }
     */
    public static void glfwWindowHint(int hint, int value) {
        var mh$ = glfwWindowHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwWindowHint", hint, value);
            }
            mh$.invokeExact(hint, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwWindowHintString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwWindowHintString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwWindowHintString(int hint, const char *value)
     * }
     */
    public static FunctionDescriptor glfwWindowHintString$descriptor() {
        return glfwWindowHintString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwWindowHintString(int hint, const char *value)
     * }
     */
    public static MethodHandle glfwWindowHintString$handle() {
        return glfwWindowHintString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwWindowHintString(int hint, const char *value)
     * }
     */
    public static MemorySegment glfwWindowHintString$address() {
        return glfwWindowHintString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwWindowHintString(int hint, const char *value)
     * }
     */
    public static void glfwWindowHintString(int hint, MemorySegment value) {
        var mh$ = glfwWindowHintString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwWindowHintString", hint, value);
            }
            mh$.invokeExact(hint, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwCreateWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT,
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwCreateWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindow *glfwCreateWindow(int width, int height, const char *title, GLFWmonitor *monitor, GLFWwindow *share)
     * }
     */
    public static FunctionDescriptor glfwCreateWindow$descriptor() {
        return glfwCreateWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindow *glfwCreateWindow(int width, int height, const char *title, GLFWmonitor *monitor, GLFWwindow *share)
     * }
     */
    public static MethodHandle glfwCreateWindow$handle() {
        return glfwCreateWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindow *glfwCreateWindow(int width, int height, const char *title, GLFWmonitor *monitor, GLFWwindow *share)
     * }
     */
    public static MemorySegment glfwCreateWindow$address() {
        return glfwCreateWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindow *glfwCreateWindow(int width, int height, const char *title, GLFWmonitor *monitor, GLFWwindow *share)
     * }
     */
    public static MemorySegment glfwCreateWindow(int width, int height, MemorySegment title, MemorySegment monitor, MemorySegment share) {
        var mh$ = glfwCreateWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwCreateWindow", width, height, title, monitor, share);
            }
            return (MemorySegment)mh$.invokeExact(width, height, title, monitor, share);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwDestroyWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwDestroyWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwDestroyWindow(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwDestroyWindow$descriptor() {
        return glfwDestroyWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwDestroyWindow(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwDestroyWindow$handle() {
        return glfwDestroyWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwDestroyWindow(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwDestroyWindow$address() {
        return glfwDestroyWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwDestroyWindow(GLFWwindow *window)
     * }
     */
    public static void glfwDestroyWindow(MemorySegment window) {
        var mh$ = glfwDestroyWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwDestroyWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwWindowShouldClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwWindowShouldClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwWindowShouldClose(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwWindowShouldClose$descriptor() {
        return glfwWindowShouldClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwWindowShouldClose(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwWindowShouldClose$handle() {
        return glfwWindowShouldClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwWindowShouldClose(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwWindowShouldClose$address() {
        return glfwWindowShouldClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwWindowShouldClose(GLFWwindow *window)
     * }
     */
    public static int glfwWindowShouldClose(MemorySegment window) {
        var mh$ = glfwWindowShouldClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwWindowShouldClose", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowShouldClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowShouldClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowShouldClose(GLFWwindow *window, int value)
     * }
     */
    public static FunctionDescriptor glfwSetWindowShouldClose$descriptor() {
        return glfwSetWindowShouldClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowShouldClose(GLFWwindow *window, int value)
     * }
     */
    public static MethodHandle glfwSetWindowShouldClose$handle() {
        return glfwSetWindowShouldClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowShouldClose(GLFWwindow *window, int value)
     * }
     */
    public static MemorySegment glfwSetWindowShouldClose$address() {
        return glfwSetWindowShouldClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowShouldClose(GLFWwindow *window, int value)
     * }
     */
    public static void glfwSetWindowShouldClose(MemorySegment window, int value) {
        var mh$ = glfwSetWindowShouldClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowShouldClose", window, value);
            }
            mh$.invokeExact(window, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowTitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowTitle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *glfwGetWindowTitle(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwGetWindowTitle$descriptor() {
        return glfwGetWindowTitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *glfwGetWindowTitle(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwGetWindowTitle$handle() {
        return glfwGetWindowTitle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *glfwGetWindowTitle(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetWindowTitle$address() {
        return glfwGetWindowTitle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *glfwGetWindowTitle(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetWindowTitle(MemorySegment window) {
        var mh$ = glfwGetWindowTitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowTitle", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowTitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowTitle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowTitle(GLFWwindow *window, const char *title)
     * }
     */
    public static FunctionDescriptor glfwSetWindowTitle$descriptor() {
        return glfwSetWindowTitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowTitle(GLFWwindow *window, const char *title)
     * }
     */
    public static MethodHandle glfwSetWindowTitle$handle() {
        return glfwSetWindowTitle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowTitle(GLFWwindow *window, const char *title)
     * }
     */
    public static MemorySegment glfwSetWindowTitle$address() {
        return glfwSetWindowTitle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowTitle(GLFWwindow *window, const char *title)
     * }
     */
    public static void glfwSetWindowTitle(MemorySegment window, MemorySegment title) {
        var mh$ = glfwSetWindowTitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowTitle", window, title);
            }
            mh$.invokeExact(window, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowIcon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowIcon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowIcon(GLFWwindow *window, int count, const GLFWimage *images)
     * }
     */
    public static FunctionDescriptor glfwSetWindowIcon$descriptor() {
        return glfwSetWindowIcon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowIcon(GLFWwindow *window, int count, const GLFWimage *images)
     * }
     */
    public static MethodHandle glfwSetWindowIcon$handle() {
        return glfwSetWindowIcon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowIcon(GLFWwindow *window, int count, const GLFWimage *images)
     * }
     */
    public static MemorySegment glfwSetWindowIcon$address() {
        return glfwSetWindowIcon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowIcon(GLFWwindow *window, int count, const GLFWimage *images)
     * }
     */
    public static void glfwSetWindowIcon(MemorySegment window, int count, MemorySegment images) {
        var mh$ = glfwSetWindowIcon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowIcon", window, count, images);
            }
            mh$.invokeExact(window, count, images);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetWindowPos(GLFWwindow *window, int *xpos, int *ypos)
     * }
     */
    public static FunctionDescriptor glfwGetWindowPos$descriptor() {
        return glfwGetWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetWindowPos(GLFWwindow *window, int *xpos, int *ypos)
     * }
     */
    public static MethodHandle glfwGetWindowPos$handle() {
        return glfwGetWindowPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetWindowPos(GLFWwindow *window, int *xpos, int *ypos)
     * }
     */
    public static MemorySegment glfwGetWindowPos$address() {
        return glfwGetWindowPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetWindowPos(GLFWwindow *window, int *xpos, int *ypos)
     * }
     */
    public static void glfwGetWindowPos(MemorySegment window, MemorySegment xpos, MemorySegment ypos) {
        var mh$ = glfwGetWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowPos", window, xpos, ypos);
            }
            mh$.invokeExact(window, xpos, ypos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowPos(GLFWwindow *window, int xpos, int ypos)
     * }
     */
    public static FunctionDescriptor glfwSetWindowPos$descriptor() {
        return glfwSetWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowPos(GLFWwindow *window, int xpos, int ypos)
     * }
     */
    public static MethodHandle glfwSetWindowPos$handle() {
        return glfwSetWindowPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowPos(GLFWwindow *window, int xpos, int ypos)
     * }
     */
    public static MemorySegment glfwSetWindowPos$address() {
        return glfwSetWindowPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowPos(GLFWwindow *window, int xpos, int ypos)
     * }
     */
    public static void glfwSetWindowPos(MemorySegment window, int xpos, int ypos) {
        var mh$ = glfwSetWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowPos", window, xpos, ypos);
            }
            mh$.invokeExact(window, xpos, ypos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetWindowSize(GLFWwindow *window, int *width, int *height)
     * }
     */
    public static FunctionDescriptor glfwGetWindowSize$descriptor() {
        return glfwGetWindowSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetWindowSize(GLFWwindow *window, int *width, int *height)
     * }
     */
    public static MethodHandle glfwGetWindowSize$handle() {
        return glfwGetWindowSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetWindowSize(GLFWwindow *window, int *width, int *height)
     * }
     */
    public static MemorySegment glfwGetWindowSize$address() {
        return glfwGetWindowSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetWindowSize(GLFWwindow *window, int *width, int *height)
     * }
     */
    public static void glfwGetWindowSize(MemorySegment window, MemorySegment width, MemorySegment height) {
        var mh$ = glfwGetWindowSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowSize", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowSizeLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowSizeLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowSizeLimits(GLFWwindow *window, int minwidth, int minheight, int maxwidth, int maxheight)
     * }
     */
    public static FunctionDescriptor glfwSetWindowSizeLimits$descriptor() {
        return glfwSetWindowSizeLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowSizeLimits(GLFWwindow *window, int minwidth, int minheight, int maxwidth, int maxheight)
     * }
     */
    public static MethodHandle glfwSetWindowSizeLimits$handle() {
        return glfwSetWindowSizeLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowSizeLimits(GLFWwindow *window, int minwidth, int minheight, int maxwidth, int maxheight)
     * }
     */
    public static MemorySegment glfwSetWindowSizeLimits$address() {
        return glfwSetWindowSizeLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowSizeLimits(GLFWwindow *window, int minwidth, int minheight, int maxwidth, int maxheight)
     * }
     */
    public static void glfwSetWindowSizeLimits(MemorySegment window, int minwidth, int minheight, int maxwidth, int maxheight) {
        var mh$ = glfwSetWindowSizeLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowSizeLimits", window, minwidth, minheight, maxwidth, maxheight);
            }
            mh$.invokeExact(window, minwidth, minheight, maxwidth, maxheight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowAspectRatio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowAspectRatio");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowAspectRatio(GLFWwindow *window, int numer, int denom)
     * }
     */
    public static FunctionDescriptor glfwSetWindowAspectRatio$descriptor() {
        return glfwSetWindowAspectRatio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowAspectRatio(GLFWwindow *window, int numer, int denom)
     * }
     */
    public static MethodHandle glfwSetWindowAspectRatio$handle() {
        return glfwSetWindowAspectRatio.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowAspectRatio(GLFWwindow *window, int numer, int denom)
     * }
     */
    public static MemorySegment glfwSetWindowAspectRatio$address() {
        return glfwSetWindowAspectRatio.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowAspectRatio(GLFWwindow *window, int numer, int denom)
     * }
     */
    public static void glfwSetWindowAspectRatio(MemorySegment window, int numer, int denom) {
        var mh$ = glfwSetWindowAspectRatio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowAspectRatio", window, numer, denom);
            }
            mh$.invokeExact(window, numer, denom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowSize(GLFWwindow *window, int width, int height)
     * }
     */
    public static FunctionDescriptor glfwSetWindowSize$descriptor() {
        return glfwSetWindowSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowSize(GLFWwindow *window, int width, int height)
     * }
     */
    public static MethodHandle glfwSetWindowSize$handle() {
        return glfwSetWindowSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowSize(GLFWwindow *window, int width, int height)
     * }
     */
    public static MemorySegment glfwSetWindowSize$address() {
        return glfwSetWindowSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowSize(GLFWwindow *window, int width, int height)
     * }
     */
    public static void glfwSetWindowSize(MemorySegment window, int width, int height) {
        var mh$ = glfwSetWindowSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowSize", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetFramebufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetFramebufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetFramebufferSize(GLFWwindow *window, int *width, int *height)
     * }
     */
    public static FunctionDescriptor glfwGetFramebufferSize$descriptor() {
        return glfwGetFramebufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetFramebufferSize(GLFWwindow *window, int *width, int *height)
     * }
     */
    public static MethodHandle glfwGetFramebufferSize$handle() {
        return glfwGetFramebufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetFramebufferSize(GLFWwindow *window, int *width, int *height)
     * }
     */
    public static MemorySegment glfwGetFramebufferSize$address() {
        return glfwGetFramebufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetFramebufferSize(GLFWwindow *window, int *width, int *height)
     * }
     */
    public static void glfwGetFramebufferSize(MemorySegment window, MemorySegment width, MemorySegment height) {
        var mh$ = glfwGetFramebufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetFramebufferSize", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowFrameSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowFrameSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetWindowFrameSize(GLFWwindow *window, int *left, int *top, int *right, int *bottom)
     * }
     */
    public static FunctionDescriptor glfwGetWindowFrameSize$descriptor() {
        return glfwGetWindowFrameSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetWindowFrameSize(GLFWwindow *window, int *left, int *top, int *right, int *bottom)
     * }
     */
    public static MethodHandle glfwGetWindowFrameSize$handle() {
        return glfwGetWindowFrameSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetWindowFrameSize(GLFWwindow *window, int *left, int *top, int *right, int *bottom)
     * }
     */
    public static MemorySegment glfwGetWindowFrameSize$address() {
        return glfwGetWindowFrameSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetWindowFrameSize(GLFWwindow *window, int *left, int *top, int *right, int *bottom)
     * }
     */
    public static void glfwGetWindowFrameSize(MemorySegment window, MemorySegment left, MemorySegment top, MemorySegment right, MemorySegment bottom) {
        var mh$ = glfwGetWindowFrameSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowFrameSize", window, left, top, right, bottom);
            }
            mh$.invokeExact(window, left, top, right, bottom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowContentScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowContentScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetWindowContentScale(GLFWwindow *window, float *xscale, float *yscale)
     * }
     */
    public static FunctionDescriptor glfwGetWindowContentScale$descriptor() {
        return glfwGetWindowContentScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetWindowContentScale(GLFWwindow *window, float *xscale, float *yscale)
     * }
     */
    public static MethodHandle glfwGetWindowContentScale$handle() {
        return glfwGetWindowContentScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetWindowContentScale(GLFWwindow *window, float *xscale, float *yscale)
     * }
     */
    public static MemorySegment glfwGetWindowContentScale$address() {
        return glfwGetWindowContentScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetWindowContentScale(GLFWwindow *window, float *xscale, float *yscale)
     * }
     */
    public static void glfwGetWindowContentScale(MemorySegment window, MemorySegment xscale, MemorySegment yscale) {
        var mh$ = glfwGetWindowContentScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowContentScale", window, xscale, yscale);
            }
            mh$.invokeExact(window, xscale, yscale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowOpacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_FLOAT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowOpacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float glfwGetWindowOpacity(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwGetWindowOpacity$descriptor() {
        return glfwGetWindowOpacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float glfwGetWindowOpacity(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwGetWindowOpacity$handle() {
        return glfwGetWindowOpacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float glfwGetWindowOpacity(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetWindowOpacity$address() {
        return glfwGetWindowOpacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float glfwGetWindowOpacity(GLFWwindow *window)
     * }
     */
    public static float glfwGetWindowOpacity(MemorySegment window) {
        var mh$ = glfwGetWindowOpacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowOpacity", window);
            }
            return (float)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowOpacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_FLOAT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowOpacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowOpacity(GLFWwindow *window, float opacity)
     * }
     */
    public static FunctionDescriptor glfwSetWindowOpacity$descriptor() {
        return glfwSetWindowOpacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowOpacity(GLFWwindow *window, float opacity)
     * }
     */
    public static MethodHandle glfwSetWindowOpacity$handle() {
        return glfwSetWindowOpacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowOpacity(GLFWwindow *window, float opacity)
     * }
     */
    public static MemorySegment glfwSetWindowOpacity$address() {
        return glfwSetWindowOpacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowOpacity(GLFWwindow *window, float opacity)
     * }
     */
    public static void glfwSetWindowOpacity(MemorySegment window, float opacity) {
        var mh$ = glfwSetWindowOpacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowOpacity", window, opacity);
            }
            mh$.invokeExact(window, opacity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwIconifyWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwIconifyWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwIconifyWindow(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwIconifyWindow$descriptor() {
        return glfwIconifyWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwIconifyWindow(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwIconifyWindow$handle() {
        return glfwIconifyWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwIconifyWindow(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwIconifyWindow$address() {
        return glfwIconifyWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwIconifyWindow(GLFWwindow *window)
     * }
     */
    public static void glfwIconifyWindow(MemorySegment window) {
        var mh$ = glfwIconifyWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwIconifyWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwRestoreWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwRestoreWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwRestoreWindow(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwRestoreWindow$descriptor() {
        return glfwRestoreWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwRestoreWindow(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwRestoreWindow$handle() {
        return glfwRestoreWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwRestoreWindow(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwRestoreWindow$address() {
        return glfwRestoreWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwRestoreWindow(GLFWwindow *window)
     * }
     */
    public static void glfwRestoreWindow(MemorySegment window) {
        var mh$ = glfwRestoreWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwRestoreWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwMaximizeWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwMaximizeWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwMaximizeWindow(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwMaximizeWindow$descriptor() {
        return glfwMaximizeWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwMaximizeWindow(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwMaximizeWindow$handle() {
        return glfwMaximizeWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwMaximizeWindow(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwMaximizeWindow$address() {
        return glfwMaximizeWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwMaximizeWindow(GLFWwindow *window)
     * }
     */
    public static void glfwMaximizeWindow(MemorySegment window) {
        var mh$ = glfwMaximizeWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwMaximizeWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwShowWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwShowWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwShowWindow(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwShowWindow$descriptor() {
        return glfwShowWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwShowWindow(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwShowWindow$handle() {
        return glfwShowWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwShowWindow(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwShowWindow$address() {
        return glfwShowWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwShowWindow(GLFWwindow *window)
     * }
     */
    public static void glfwShowWindow(MemorySegment window) {
        var mh$ = glfwShowWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwShowWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwHideWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwHideWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwHideWindow(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwHideWindow$descriptor() {
        return glfwHideWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwHideWindow(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwHideWindow$handle() {
        return glfwHideWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwHideWindow(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwHideWindow$address() {
        return glfwHideWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwHideWindow(GLFWwindow *window)
     * }
     */
    public static void glfwHideWindow(MemorySegment window) {
        var mh$ = glfwHideWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwHideWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwFocusWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwFocusWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwFocusWindow(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwFocusWindow$descriptor() {
        return glfwFocusWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwFocusWindow(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwFocusWindow$handle() {
        return glfwFocusWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwFocusWindow(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwFocusWindow$address() {
        return glfwFocusWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwFocusWindow(GLFWwindow *window)
     * }
     */
    public static void glfwFocusWindow(MemorySegment window) {
        var mh$ = glfwFocusWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwFocusWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwRequestWindowAttention {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwRequestWindowAttention");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwRequestWindowAttention(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwRequestWindowAttention$descriptor() {
        return glfwRequestWindowAttention.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwRequestWindowAttention(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwRequestWindowAttention$handle() {
        return glfwRequestWindowAttention.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwRequestWindowAttention(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwRequestWindowAttention$address() {
        return glfwRequestWindowAttention.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwRequestWindowAttention(GLFWwindow *window)
     * }
     */
    public static void glfwRequestWindowAttention(MemorySegment window) {
        var mh$ = glfwRequestWindowAttention.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwRequestWindowAttention", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowMonitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowMonitor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWmonitor *glfwGetWindowMonitor(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwGetWindowMonitor$descriptor() {
        return glfwGetWindowMonitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWmonitor *glfwGetWindowMonitor(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwGetWindowMonitor$handle() {
        return glfwGetWindowMonitor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWmonitor *glfwGetWindowMonitor(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetWindowMonitor$address() {
        return glfwGetWindowMonitor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWmonitor *glfwGetWindowMonitor(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetWindowMonitor(MemorySegment window) {
        var mh$ = glfwGetWindowMonitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowMonitor", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowMonitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT,
            glcore.C_INT,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowMonitor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowMonitor(GLFWwindow *window, GLFWmonitor *monitor, int xpos, int ypos, int width, int height, int refreshRate)
     * }
     */
    public static FunctionDescriptor glfwSetWindowMonitor$descriptor() {
        return glfwSetWindowMonitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowMonitor(GLFWwindow *window, GLFWmonitor *monitor, int xpos, int ypos, int width, int height, int refreshRate)
     * }
     */
    public static MethodHandle glfwSetWindowMonitor$handle() {
        return glfwSetWindowMonitor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowMonitor(GLFWwindow *window, GLFWmonitor *monitor, int xpos, int ypos, int width, int height, int refreshRate)
     * }
     */
    public static MemorySegment glfwSetWindowMonitor$address() {
        return glfwSetWindowMonitor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowMonitor(GLFWwindow *window, GLFWmonitor *monitor, int xpos, int ypos, int width, int height, int refreshRate)
     * }
     */
    public static void glfwSetWindowMonitor(MemorySegment window, MemorySegment monitor, int xpos, int ypos, int width, int height, int refreshRate) {
        var mh$ = glfwSetWindowMonitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowMonitor", window, monitor, xpos, ypos, width, height, refreshRate);
            }
            mh$.invokeExact(window, monitor, xpos, ypos, width, height, refreshRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwGetWindowAttrib(GLFWwindow *window, int attrib)
     * }
     */
    public static FunctionDescriptor glfwGetWindowAttrib$descriptor() {
        return glfwGetWindowAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwGetWindowAttrib(GLFWwindow *window, int attrib)
     * }
     */
    public static MethodHandle glfwGetWindowAttrib$handle() {
        return glfwGetWindowAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwGetWindowAttrib(GLFWwindow *window, int attrib)
     * }
     */
    public static MemorySegment glfwGetWindowAttrib$address() {
        return glfwGetWindowAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwGetWindowAttrib(GLFWwindow *window, int attrib)
     * }
     */
    public static int glfwGetWindowAttrib(MemorySegment window, int attrib) {
        var mh$ = glfwGetWindowAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowAttrib", window, attrib);
            }
            return (int)mh$.invokeExact(window, attrib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowAttrib(GLFWwindow *window, int attrib, int value)
     * }
     */
    public static FunctionDescriptor glfwSetWindowAttrib$descriptor() {
        return glfwSetWindowAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowAttrib(GLFWwindow *window, int attrib, int value)
     * }
     */
    public static MethodHandle glfwSetWindowAttrib$handle() {
        return glfwSetWindowAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowAttrib(GLFWwindow *window, int attrib, int value)
     * }
     */
    public static MemorySegment glfwSetWindowAttrib$address() {
        return glfwSetWindowAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowAttrib(GLFWwindow *window, int attrib, int value)
     * }
     */
    public static void glfwSetWindowAttrib(MemorySegment window, int attrib, int value) {
        var mh$ = glfwSetWindowAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowAttrib", window, attrib, value);
            }
            mh$.invokeExact(window, attrib, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowUserPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowUserPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetWindowUserPointer(GLFWwindow *window, void *pointer)
     * }
     */
    public static FunctionDescriptor glfwSetWindowUserPointer$descriptor() {
        return glfwSetWindowUserPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetWindowUserPointer(GLFWwindow *window, void *pointer)
     * }
     */
    public static MethodHandle glfwSetWindowUserPointer$handle() {
        return glfwSetWindowUserPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetWindowUserPointer(GLFWwindow *window, void *pointer)
     * }
     */
    public static MemorySegment glfwSetWindowUserPointer$address() {
        return glfwSetWindowUserPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetWindowUserPointer(GLFWwindow *window, void *pointer)
     * }
     */
    public static void glfwSetWindowUserPointer(MemorySegment window, MemorySegment pointer) {
        var mh$ = glfwSetWindowUserPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowUserPointer", window, pointer);
            }
            mh$.invokeExact(window, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetWindowUserPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetWindowUserPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *glfwGetWindowUserPointer(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwGetWindowUserPointer$descriptor() {
        return glfwGetWindowUserPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *glfwGetWindowUserPointer(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwGetWindowUserPointer$handle() {
        return glfwGetWindowUserPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *glfwGetWindowUserPointer(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetWindowUserPointer$address() {
        return glfwGetWindowUserPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *glfwGetWindowUserPointer(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetWindowUserPointer(MemorySegment window) {
        var mh$ = glfwGetWindowUserPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetWindowUserPointer", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowPosCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowPosCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow *window, GLFWwindowposfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetWindowPosCallback$descriptor() {
        return glfwSetWindowPosCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow *window, GLFWwindowposfun callback)
     * }
     */
    public static MethodHandle glfwSetWindowPosCallback$handle() {
        return glfwSetWindowPosCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow *window, GLFWwindowposfun callback)
     * }
     */
    public static MemorySegment glfwSetWindowPosCallback$address() {
        return glfwSetWindowPosCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow *window, GLFWwindowposfun callback)
     * }
     */
    public static MemorySegment glfwSetWindowPosCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetWindowPosCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowPosCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowSizeCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowSizeCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow *window, GLFWwindowsizefun callback)
     * }
     */
    public static FunctionDescriptor glfwSetWindowSizeCallback$descriptor() {
        return glfwSetWindowSizeCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow *window, GLFWwindowsizefun callback)
     * }
     */
    public static MethodHandle glfwSetWindowSizeCallback$handle() {
        return glfwSetWindowSizeCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow *window, GLFWwindowsizefun callback)
     * }
     */
    public static MemorySegment glfwSetWindowSizeCallback$address() {
        return glfwSetWindowSizeCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow *window, GLFWwindowsizefun callback)
     * }
     */
    public static MemorySegment glfwSetWindowSizeCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetWindowSizeCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowSizeCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowCloseCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowCloseCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow *window, GLFWwindowclosefun callback)
     * }
     */
    public static FunctionDescriptor glfwSetWindowCloseCallback$descriptor() {
        return glfwSetWindowCloseCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow *window, GLFWwindowclosefun callback)
     * }
     */
    public static MethodHandle glfwSetWindowCloseCallback$handle() {
        return glfwSetWindowCloseCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow *window, GLFWwindowclosefun callback)
     * }
     */
    public static MemorySegment glfwSetWindowCloseCallback$address() {
        return glfwSetWindowCloseCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow *window, GLFWwindowclosefun callback)
     * }
     */
    public static MemorySegment glfwSetWindowCloseCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetWindowCloseCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowCloseCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowRefreshCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowRefreshCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow *window, GLFWwindowrefreshfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetWindowRefreshCallback$descriptor() {
        return glfwSetWindowRefreshCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow *window, GLFWwindowrefreshfun callback)
     * }
     */
    public static MethodHandle glfwSetWindowRefreshCallback$handle() {
        return glfwSetWindowRefreshCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow *window, GLFWwindowrefreshfun callback)
     * }
     */
    public static MemorySegment glfwSetWindowRefreshCallback$address() {
        return glfwSetWindowRefreshCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow *window, GLFWwindowrefreshfun callback)
     * }
     */
    public static MemorySegment glfwSetWindowRefreshCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetWindowRefreshCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowRefreshCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowFocusCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowFocusCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow *window, GLFWwindowfocusfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetWindowFocusCallback$descriptor() {
        return glfwSetWindowFocusCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow *window, GLFWwindowfocusfun callback)
     * }
     */
    public static MethodHandle glfwSetWindowFocusCallback$handle() {
        return glfwSetWindowFocusCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow *window, GLFWwindowfocusfun callback)
     * }
     */
    public static MemorySegment glfwSetWindowFocusCallback$address() {
        return glfwSetWindowFocusCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow *window, GLFWwindowfocusfun callback)
     * }
     */
    public static MemorySegment glfwSetWindowFocusCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetWindowFocusCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowFocusCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowIconifyCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowIconifyCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow *window, GLFWwindowiconifyfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetWindowIconifyCallback$descriptor() {
        return glfwSetWindowIconifyCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow *window, GLFWwindowiconifyfun callback)
     * }
     */
    public static MethodHandle glfwSetWindowIconifyCallback$handle() {
        return glfwSetWindowIconifyCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow *window, GLFWwindowiconifyfun callback)
     * }
     */
    public static MemorySegment glfwSetWindowIconifyCallback$address() {
        return glfwSetWindowIconifyCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow *window, GLFWwindowiconifyfun callback)
     * }
     */
    public static MemorySegment glfwSetWindowIconifyCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetWindowIconifyCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowIconifyCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowMaximizeCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowMaximizeCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow *window, GLFWwindowmaximizefun callback)
     * }
     */
    public static FunctionDescriptor glfwSetWindowMaximizeCallback$descriptor() {
        return glfwSetWindowMaximizeCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow *window, GLFWwindowmaximizefun callback)
     * }
     */
    public static MethodHandle glfwSetWindowMaximizeCallback$handle() {
        return glfwSetWindowMaximizeCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow *window, GLFWwindowmaximizefun callback)
     * }
     */
    public static MemorySegment glfwSetWindowMaximizeCallback$address() {
        return glfwSetWindowMaximizeCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow *window, GLFWwindowmaximizefun callback)
     * }
     */
    public static MemorySegment glfwSetWindowMaximizeCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetWindowMaximizeCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowMaximizeCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetFramebufferSizeCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetFramebufferSizeCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow *window, GLFWframebuffersizefun callback)
     * }
     */
    public static FunctionDescriptor glfwSetFramebufferSizeCallback$descriptor() {
        return glfwSetFramebufferSizeCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow *window, GLFWframebuffersizefun callback)
     * }
     */
    public static MethodHandle glfwSetFramebufferSizeCallback$handle() {
        return glfwSetFramebufferSizeCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow *window, GLFWframebuffersizefun callback)
     * }
     */
    public static MemorySegment glfwSetFramebufferSizeCallback$address() {
        return glfwSetFramebufferSizeCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow *window, GLFWframebuffersizefun callback)
     * }
     */
    public static MemorySegment glfwSetFramebufferSizeCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetFramebufferSizeCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetFramebufferSizeCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetWindowContentScaleCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetWindowContentScaleCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow *window, GLFWwindowcontentscalefun callback)
     * }
     */
    public static FunctionDescriptor glfwSetWindowContentScaleCallback$descriptor() {
        return glfwSetWindowContentScaleCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow *window, GLFWwindowcontentscalefun callback)
     * }
     */
    public static MethodHandle glfwSetWindowContentScaleCallback$handle() {
        return glfwSetWindowContentScaleCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow *window, GLFWwindowcontentscalefun callback)
     * }
     */
    public static MemorySegment glfwSetWindowContentScaleCallback$address() {
        return glfwSetWindowContentScaleCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow *window, GLFWwindowcontentscalefun callback)
     * }
     */
    public static MemorySegment glfwSetWindowContentScaleCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetWindowContentScaleCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetWindowContentScaleCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwPollEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwPollEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwPollEvents()
     * }
     */
    public static FunctionDescriptor glfwPollEvents$descriptor() {
        return glfwPollEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwPollEvents()
     * }
     */
    public static MethodHandle glfwPollEvents$handle() {
        return glfwPollEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwPollEvents()
     * }
     */
    public static MemorySegment glfwPollEvents$address() {
        return glfwPollEvents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwPollEvents()
     * }
     */
    public static void glfwPollEvents() {
        var mh$ = glfwPollEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwPollEvents");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwWaitEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwWaitEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwWaitEvents()
     * }
     */
    public static FunctionDescriptor glfwWaitEvents$descriptor() {
        return glfwWaitEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwWaitEvents()
     * }
     */
    public static MethodHandle glfwWaitEvents$handle() {
        return glfwWaitEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwWaitEvents()
     * }
     */
    public static MemorySegment glfwWaitEvents$address() {
        return glfwWaitEvents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwWaitEvents()
     * }
     */
    public static void glfwWaitEvents() {
        var mh$ = glfwWaitEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwWaitEvents");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwWaitEventsTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_DOUBLE
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwWaitEventsTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwWaitEventsTimeout(double timeout)
     * }
     */
    public static FunctionDescriptor glfwWaitEventsTimeout$descriptor() {
        return glfwWaitEventsTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwWaitEventsTimeout(double timeout)
     * }
     */
    public static MethodHandle glfwWaitEventsTimeout$handle() {
        return glfwWaitEventsTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwWaitEventsTimeout(double timeout)
     * }
     */
    public static MemorySegment glfwWaitEventsTimeout$address() {
        return glfwWaitEventsTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwWaitEventsTimeout(double timeout)
     * }
     */
    public static void glfwWaitEventsTimeout(double timeout) {
        var mh$ = glfwWaitEventsTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwWaitEventsTimeout", timeout);
            }
            mh$.invokeExact(timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwPostEmptyEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwPostEmptyEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwPostEmptyEvent()
     * }
     */
    public static FunctionDescriptor glfwPostEmptyEvent$descriptor() {
        return glfwPostEmptyEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwPostEmptyEvent()
     * }
     */
    public static MethodHandle glfwPostEmptyEvent$handle() {
        return glfwPostEmptyEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwPostEmptyEvent()
     * }
     */
    public static MemorySegment glfwPostEmptyEvent$address() {
        return glfwPostEmptyEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwPostEmptyEvent()
     * }
     */
    public static void glfwPostEmptyEvent() {
        var mh$ = glfwPostEmptyEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwPostEmptyEvent");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetInputMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetInputMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwGetInputMode(GLFWwindow *window, int mode)
     * }
     */
    public static FunctionDescriptor glfwGetInputMode$descriptor() {
        return glfwGetInputMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwGetInputMode(GLFWwindow *window, int mode)
     * }
     */
    public static MethodHandle glfwGetInputMode$handle() {
        return glfwGetInputMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwGetInputMode(GLFWwindow *window, int mode)
     * }
     */
    public static MemorySegment glfwGetInputMode$address() {
        return glfwGetInputMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwGetInputMode(GLFWwindow *window, int mode)
     * }
     */
    public static int glfwGetInputMode(MemorySegment window, int mode) {
        var mh$ = glfwGetInputMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetInputMode", window, mode);
            }
            return (int)mh$.invokeExact(window, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetInputMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetInputMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetInputMode(GLFWwindow *window, int mode, int value)
     * }
     */
    public static FunctionDescriptor glfwSetInputMode$descriptor() {
        return glfwSetInputMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetInputMode(GLFWwindow *window, int mode, int value)
     * }
     */
    public static MethodHandle glfwSetInputMode$handle() {
        return glfwSetInputMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetInputMode(GLFWwindow *window, int mode, int value)
     * }
     */
    public static MemorySegment glfwSetInputMode$address() {
        return glfwSetInputMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetInputMode(GLFWwindow *window, int mode, int value)
     * }
     */
    public static void glfwSetInputMode(MemorySegment window, int mode, int value) {
        var mh$ = glfwSetInputMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetInputMode", window, mode, value);
            }
            mh$.invokeExact(window, mode, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwRawMouseMotionSupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwRawMouseMotionSupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwRawMouseMotionSupported()
     * }
     */
    public static FunctionDescriptor glfwRawMouseMotionSupported$descriptor() {
        return glfwRawMouseMotionSupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwRawMouseMotionSupported()
     * }
     */
    public static MethodHandle glfwRawMouseMotionSupported$handle() {
        return glfwRawMouseMotionSupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwRawMouseMotionSupported()
     * }
     */
    public static MemorySegment glfwRawMouseMotionSupported$address() {
        return glfwRawMouseMotionSupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwRawMouseMotionSupported()
     * }
     */
    public static int glfwRawMouseMotionSupported() {
        var mh$ = glfwRawMouseMotionSupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwRawMouseMotionSupported");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetKeyName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetKeyName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *glfwGetKeyName(int key, int scancode)
     * }
     */
    public static FunctionDescriptor glfwGetKeyName$descriptor() {
        return glfwGetKeyName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *glfwGetKeyName(int key, int scancode)
     * }
     */
    public static MethodHandle glfwGetKeyName$handle() {
        return glfwGetKeyName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *glfwGetKeyName(int key, int scancode)
     * }
     */
    public static MemorySegment glfwGetKeyName$address() {
        return glfwGetKeyName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *glfwGetKeyName(int key, int scancode)
     * }
     */
    public static MemorySegment glfwGetKeyName(int key, int scancode) {
        var mh$ = glfwGetKeyName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetKeyName", key, scancode);
            }
            return (MemorySegment)mh$.invokeExact(key, scancode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetKeyScancode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetKeyScancode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwGetKeyScancode(int key)
     * }
     */
    public static FunctionDescriptor glfwGetKeyScancode$descriptor() {
        return glfwGetKeyScancode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwGetKeyScancode(int key)
     * }
     */
    public static MethodHandle glfwGetKeyScancode$handle() {
        return glfwGetKeyScancode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwGetKeyScancode(int key)
     * }
     */
    public static MemorySegment glfwGetKeyScancode$address() {
        return glfwGetKeyScancode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwGetKeyScancode(int key)
     * }
     */
    public static int glfwGetKeyScancode(int key) {
        var mh$ = glfwGetKeyScancode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetKeyScancode", key);
            }
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwGetKey(GLFWwindow *window, int key)
     * }
     */
    public static FunctionDescriptor glfwGetKey$descriptor() {
        return glfwGetKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwGetKey(GLFWwindow *window, int key)
     * }
     */
    public static MethodHandle glfwGetKey$handle() {
        return glfwGetKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwGetKey(GLFWwindow *window, int key)
     * }
     */
    public static MemorySegment glfwGetKey$address() {
        return glfwGetKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwGetKey(GLFWwindow *window, int key)
     * }
     */
    public static int glfwGetKey(MemorySegment window, int key) {
        var mh$ = glfwGetKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetKey", window, key);
            }
            return (int)mh$.invokeExact(window, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetMouseButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetMouseButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwGetMouseButton(GLFWwindow *window, int button)
     * }
     */
    public static FunctionDescriptor glfwGetMouseButton$descriptor() {
        return glfwGetMouseButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwGetMouseButton(GLFWwindow *window, int button)
     * }
     */
    public static MethodHandle glfwGetMouseButton$handle() {
        return glfwGetMouseButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwGetMouseButton(GLFWwindow *window, int button)
     * }
     */
    public static MemorySegment glfwGetMouseButton$address() {
        return glfwGetMouseButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwGetMouseButton(GLFWwindow *window, int button)
     * }
     */
    public static int glfwGetMouseButton(MemorySegment window, int button) {
        var mh$ = glfwGetMouseButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetMouseButton", window, button);
            }
            return (int)mh$.invokeExact(window, button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetCursorPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetCursorPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwGetCursorPos(GLFWwindow *window, double *xpos, double *ypos)
     * }
     */
    public static FunctionDescriptor glfwGetCursorPos$descriptor() {
        return glfwGetCursorPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwGetCursorPos(GLFWwindow *window, double *xpos, double *ypos)
     * }
     */
    public static MethodHandle glfwGetCursorPos$handle() {
        return glfwGetCursorPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwGetCursorPos(GLFWwindow *window, double *xpos, double *ypos)
     * }
     */
    public static MemorySegment glfwGetCursorPos$address() {
        return glfwGetCursorPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwGetCursorPos(GLFWwindow *window, double *xpos, double *ypos)
     * }
     */
    public static void glfwGetCursorPos(MemorySegment window, MemorySegment xpos, MemorySegment ypos) {
        var mh$ = glfwGetCursorPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetCursorPos", window, xpos, ypos);
            }
            mh$.invokeExact(window, xpos, ypos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetCursorPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_DOUBLE,
            glcore.C_DOUBLE
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetCursorPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetCursorPos(GLFWwindow *window, double xpos, double ypos)
     * }
     */
    public static FunctionDescriptor glfwSetCursorPos$descriptor() {
        return glfwSetCursorPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetCursorPos(GLFWwindow *window, double xpos, double ypos)
     * }
     */
    public static MethodHandle glfwSetCursorPos$handle() {
        return glfwSetCursorPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetCursorPos(GLFWwindow *window, double xpos, double ypos)
     * }
     */
    public static MemorySegment glfwSetCursorPos$address() {
        return glfwSetCursorPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetCursorPos(GLFWwindow *window, double xpos, double ypos)
     * }
     */
    public static void glfwSetCursorPos(MemorySegment window, double xpos, double ypos) {
        var mh$ = glfwSetCursorPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetCursorPos", window, xpos, ypos);
            }
            mh$.invokeExact(window, xpos, ypos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwCreateCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwCreateCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWcursor *glfwCreateCursor(const GLFWimage *image, int xhot, int yhot)
     * }
     */
    public static FunctionDescriptor glfwCreateCursor$descriptor() {
        return glfwCreateCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWcursor *glfwCreateCursor(const GLFWimage *image, int xhot, int yhot)
     * }
     */
    public static MethodHandle glfwCreateCursor$handle() {
        return glfwCreateCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWcursor *glfwCreateCursor(const GLFWimage *image, int xhot, int yhot)
     * }
     */
    public static MemorySegment glfwCreateCursor$address() {
        return glfwCreateCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWcursor *glfwCreateCursor(const GLFWimage *image, int xhot, int yhot)
     * }
     */
    public static MemorySegment glfwCreateCursor(MemorySegment image, int xhot, int yhot) {
        var mh$ = glfwCreateCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwCreateCursor", image, xhot, yhot);
            }
            return (MemorySegment)mh$.invokeExact(image, xhot, yhot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwCreateStandardCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwCreateStandardCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWcursor *glfwCreateStandardCursor(int shape)
     * }
     */
    public static FunctionDescriptor glfwCreateStandardCursor$descriptor() {
        return glfwCreateStandardCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWcursor *glfwCreateStandardCursor(int shape)
     * }
     */
    public static MethodHandle glfwCreateStandardCursor$handle() {
        return glfwCreateStandardCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWcursor *glfwCreateStandardCursor(int shape)
     * }
     */
    public static MemorySegment glfwCreateStandardCursor$address() {
        return glfwCreateStandardCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWcursor *glfwCreateStandardCursor(int shape)
     * }
     */
    public static MemorySegment glfwCreateStandardCursor(int shape) {
        var mh$ = glfwCreateStandardCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwCreateStandardCursor", shape);
            }
            return (MemorySegment)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwDestroyCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwDestroyCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwDestroyCursor(GLFWcursor *cursor)
     * }
     */
    public static FunctionDescriptor glfwDestroyCursor$descriptor() {
        return glfwDestroyCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwDestroyCursor(GLFWcursor *cursor)
     * }
     */
    public static MethodHandle glfwDestroyCursor$handle() {
        return glfwDestroyCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwDestroyCursor(GLFWcursor *cursor)
     * }
     */
    public static MemorySegment glfwDestroyCursor$address() {
        return glfwDestroyCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwDestroyCursor(GLFWcursor *cursor)
     * }
     */
    public static void glfwDestroyCursor(MemorySegment cursor) {
        var mh$ = glfwDestroyCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwDestroyCursor", cursor);
            }
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetCursor(GLFWwindow *window, GLFWcursor *cursor)
     * }
     */
    public static FunctionDescriptor glfwSetCursor$descriptor() {
        return glfwSetCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetCursor(GLFWwindow *window, GLFWcursor *cursor)
     * }
     */
    public static MethodHandle glfwSetCursor$handle() {
        return glfwSetCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetCursor(GLFWwindow *window, GLFWcursor *cursor)
     * }
     */
    public static MemorySegment glfwSetCursor$address() {
        return glfwSetCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetCursor(GLFWwindow *window, GLFWcursor *cursor)
     * }
     */
    public static void glfwSetCursor(MemorySegment window, MemorySegment cursor) {
        var mh$ = glfwSetCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetCursor", window, cursor);
            }
            mh$.invokeExact(window, cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetKeyCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetKeyCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWkeyfun glfwSetKeyCallback(GLFWwindow *window, GLFWkeyfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetKeyCallback$descriptor() {
        return glfwSetKeyCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWkeyfun glfwSetKeyCallback(GLFWwindow *window, GLFWkeyfun callback)
     * }
     */
    public static MethodHandle glfwSetKeyCallback$handle() {
        return glfwSetKeyCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWkeyfun glfwSetKeyCallback(GLFWwindow *window, GLFWkeyfun callback)
     * }
     */
    public static MemorySegment glfwSetKeyCallback$address() {
        return glfwSetKeyCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWkeyfun glfwSetKeyCallback(GLFWwindow *window, GLFWkeyfun callback)
     * }
     */
    public static MemorySegment glfwSetKeyCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetKeyCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetKeyCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetCharCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetCharCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWcharfun glfwSetCharCallback(GLFWwindow *window, GLFWcharfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetCharCallback$descriptor() {
        return glfwSetCharCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWcharfun glfwSetCharCallback(GLFWwindow *window, GLFWcharfun callback)
     * }
     */
    public static MethodHandle glfwSetCharCallback$handle() {
        return glfwSetCharCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWcharfun glfwSetCharCallback(GLFWwindow *window, GLFWcharfun callback)
     * }
     */
    public static MemorySegment glfwSetCharCallback$address() {
        return glfwSetCharCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWcharfun glfwSetCharCallback(GLFWwindow *window, GLFWcharfun callback)
     * }
     */
    public static MemorySegment glfwSetCharCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetCharCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetCharCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetCharModsCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetCharModsCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow *window, GLFWcharmodsfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetCharModsCallback$descriptor() {
        return glfwSetCharModsCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow *window, GLFWcharmodsfun callback)
     * }
     */
    public static MethodHandle glfwSetCharModsCallback$handle() {
        return glfwSetCharModsCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow *window, GLFWcharmodsfun callback)
     * }
     */
    public static MemorySegment glfwSetCharModsCallback$address() {
        return glfwSetCharModsCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow *window, GLFWcharmodsfun callback)
     * }
     */
    public static MemorySegment glfwSetCharModsCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetCharModsCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetCharModsCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetMouseButtonCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetMouseButtonCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow *window, GLFWmousebuttonfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetMouseButtonCallback$descriptor() {
        return glfwSetMouseButtonCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow *window, GLFWmousebuttonfun callback)
     * }
     */
    public static MethodHandle glfwSetMouseButtonCallback$handle() {
        return glfwSetMouseButtonCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow *window, GLFWmousebuttonfun callback)
     * }
     */
    public static MemorySegment glfwSetMouseButtonCallback$address() {
        return glfwSetMouseButtonCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow *window, GLFWmousebuttonfun callback)
     * }
     */
    public static MemorySegment glfwSetMouseButtonCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetMouseButtonCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetMouseButtonCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetCursorPosCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetCursorPosCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow *window, GLFWcursorposfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetCursorPosCallback$descriptor() {
        return glfwSetCursorPosCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow *window, GLFWcursorposfun callback)
     * }
     */
    public static MethodHandle glfwSetCursorPosCallback$handle() {
        return glfwSetCursorPosCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow *window, GLFWcursorposfun callback)
     * }
     */
    public static MemorySegment glfwSetCursorPosCallback$address() {
        return glfwSetCursorPosCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow *window, GLFWcursorposfun callback)
     * }
     */
    public static MemorySegment glfwSetCursorPosCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetCursorPosCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetCursorPosCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetCursorEnterCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetCursorEnterCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow *window, GLFWcursorenterfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetCursorEnterCallback$descriptor() {
        return glfwSetCursorEnterCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow *window, GLFWcursorenterfun callback)
     * }
     */
    public static MethodHandle glfwSetCursorEnterCallback$handle() {
        return glfwSetCursorEnterCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow *window, GLFWcursorenterfun callback)
     * }
     */
    public static MemorySegment glfwSetCursorEnterCallback$address() {
        return glfwSetCursorEnterCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow *window, GLFWcursorenterfun callback)
     * }
     */
    public static MemorySegment glfwSetCursorEnterCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetCursorEnterCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetCursorEnterCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetScrollCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetScrollCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWscrollfun glfwSetScrollCallback(GLFWwindow *window, GLFWscrollfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetScrollCallback$descriptor() {
        return glfwSetScrollCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWscrollfun glfwSetScrollCallback(GLFWwindow *window, GLFWscrollfun callback)
     * }
     */
    public static MethodHandle glfwSetScrollCallback$handle() {
        return glfwSetScrollCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWscrollfun glfwSetScrollCallback(GLFWwindow *window, GLFWscrollfun callback)
     * }
     */
    public static MemorySegment glfwSetScrollCallback$address() {
        return glfwSetScrollCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWscrollfun glfwSetScrollCallback(GLFWwindow *window, GLFWscrollfun callback)
     * }
     */
    public static MemorySegment glfwSetScrollCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetScrollCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetScrollCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetDropCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetDropCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWdropfun glfwSetDropCallback(GLFWwindow *window, GLFWdropfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetDropCallback$descriptor() {
        return glfwSetDropCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWdropfun glfwSetDropCallback(GLFWwindow *window, GLFWdropfun callback)
     * }
     */
    public static MethodHandle glfwSetDropCallback$handle() {
        return glfwSetDropCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWdropfun glfwSetDropCallback(GLFWwindow *window, GLFWdropfun callback)
     * }
     */
    public static MemorySegment glfwSetDropCallback$address() {
        return glfwSetDropCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWdropfun glfwSetDropCallback(GLFWwindow *window, GLFWdropfun callback)
     * }
     */
    public static MemorySegment glfwSetDropCallback(MemorySegment window, MemorySegment callback) {
        var mh$ = glfwSetDropCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetDropCallback", window, callback);
            }
            return (MemorySegment)mh$.invokeExact(window, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwJoystickPresent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwJoystickPresent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwJoystickPresent(int jid)
     * }
     */
    public static FunctionDescriptor glfwJoystickPresent$descriptor() {
        return glfwJoystickPresent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwJoystickPresent(int jid)
     * }
     */
    public static MethodHandle glfwJoystickPresent$handle() {
        return glfwJoystickPresent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwJoystickPresent(int jid)
     * }
     */
    public static MemorySegment glfwJoystickPresent$address() {
        return glfwJoystickPresent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwJoystickPresent(int jid)
     * }
     */
    public static int glfwJoystickPresent(int jid) {
        var mh$ = glfwJoystickPresent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwJoystickPresent", jid);
            }
            return (int)mh$.invokeExact(jid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetJoystickAxes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetJoystickAxes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const float *glfwGetJoystickAxes(int jid, int *count)
     * }
     */
    public static FunctionDescriptor glfwGetJoystickAxes$descriptor() {
        return glfwGetJoystickAxes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const float *glfwGetJoystickAxes(int jid, int *count)
     * }
     */
    public static MethodHandle glfwGetJoystickAxes$handle() {
        return glfwGetJoystickAxes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const float *glfwGetJoystickAxes(int jid, int *count)
     * }
     */
    public static MemorySegment glfwGetJoystickAxes$address() {
        return glfwGetJoystickAxes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const float *glfwGetJoystickAxes(int jid, int *count)
     * }
     */
    public static MemorySegment glfwGetJoystickAxes(int jid, MemorySegment count) {
        var mh$ = glfwGetJoystickAxes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetJoystickAxes", jid, count);
            }
            return (MemorySegment)mh$.invokeExact(jid, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetJoystickButtons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetJoystickButtons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const unsigned char *glfwGetJoystickButtons(int jid, int *count)
     * }
     */
    public static FunctionDescriptor glfwGetJoystickButtons$descriptor() {
        return glfwGetJoystickButtons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const unsigned char *glfwGetJoystickButtons(int jid, int *count)
     * }
     */
    public static MethodHandle glfwGetJoystickButtons$handle() {
        return glfwGetJoystickButtons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const unsigned char *glfwGetJoystickButtons(int jid, int *count)
     * }
     */
    public static MemorySegment glfwGetJoystickButtons$address() {
        return glfwGetJoystickButtons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const unsigned char *glfwGetJoystickButtons(int jid, int *count)
     * }
     */
    public static MemorySegment glfwGetJoystickButtons(int jid, MemorySegment count) {
        var mh$ = glfwGetJoystickButtons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetJoystickButtons", jid, count);
            }
            return (MemorySegment)mh$.invokeExact(jid, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetJoystickHats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetJoystickHats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const unsigned char *glfwGetJoystickHats(int jid, int *count)
     * }
     */
    public static FunctionDescriptor glfwGetJoystickHats$descriptor() {
        return glfwGetJoystickHats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const unsigned char *glfwGetJoystickHats(int jid, int *count)
     * }
     */
    public static MethodHandle glfwGetJoystickHats$handle() {
        return glfwGetJoystickHats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const unsigned char *glfwGetJoystickHats(int jid, int *count)
     * }
     */
    public static MemorySegment glfwGetJoystickHats$address() {
        return glfwGetJoystickHats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const unsigned char *glfwGetJoystickHats(int jid, int *count)
     * }
     */
    public static MemorySegment glfwGetJoystickHats(int jid, MemorySegment count) {
        var mh$ = glfwGetJoystickHats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetJoystickHats", jid, count);
            }
            return (MemorySegment)mh$.invokeExact(jid, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetJoystickName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetJoystickName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *glfwGetJoystickName(int jid)
     * }
     */
    public static FunctionDescriptor glfwGetJoystickName$descriptor() {
        return glfwGetJoystickName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *glfwGetJoystickName(int jid)
     * }
     */
    public static MethodHandle glfwGetJoystickName$handle() {
        return glfwGetJoystickName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *glfwGetJoystickName(int jid)
     * }
     */
    public static MemorySegment glfwGetJoystickName$address() {
        return glfwGetJoystickName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *glfwGetJoystickName(int jid)
     * }
     */
    public static MemorySegment glfwGetJoystickName(int jid) {
        var mh$ = glfwGetJoystickName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetJoystickName", jid);
            }
            return (MemorySegment)mh$.invokeExact(jid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetJoystickGUID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetJoystickGUID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *glfwGetJoystickGUID(int jid)
     * }
     */
    public static FunctionDescriptor glfwGetJoystickGUID$descriptor() {
        return glfwGetJoystickGUID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *glfwGetJoystickGUID(int jid)
     * }
     */
    public static MethodHandle glfwGetJoystickGUID$handle() {
        return glfwGetJoystickGUID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *glfwGetJoystickGUID(int jid)
     * }
     */
    public static MemorySegment glfwGetJoystickGUID$address() {
        return glfwGetJoystickGUID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *glfwGetJoystickGUID(int jid)
     * }
     */
    public static MemorySegment glfwGetJoystickGUID(int jid) {
        var mh$ = glfwGetJoystickGUID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetJoystickGUID", jid);
            }
            return (MemorySegment)mh$.invokeExact(jid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetJoystickUserPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetJoystickUserPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetJoystickUserPointer(int jid, void *pointer)
     * }
     */
    public static FunctionDescriptor glfwSetJoystickUserPointer$descriptor() {
        return glfwSetJoystickUserPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetJoystickUserPointer(int jid, void *pointer)
     * }
     */
    public static MethodHandle glfwSetJoystickUserPointer$handle() {
        return glfwSetJoystickUserPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetJoystickUserPointer(int jid, void *pointer)
     * }
     */
    public static MemorySegment glfwSetJoystickUserPointer$address() {
        return glfwSetJoystickUserPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetJoystickUserPointer(int jid, void *pointer)
     * }
     */
    public static void glfwSetJoystickUserPointer(int jid, MemorySegment pointer) {
        var mh$ = glfwSetJoystickUserPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetJoystickUserPointer", jid, pointer);
            }
            mh$.invokeExact(jid, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetJoystickUserPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetJoystickUserPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *glfwGetJoystickUserPointer(int jid)
     * }
     */
    public static FunctionDescriptor glfwGetJoystickUserPointer$descriptor() {
        return glfwGetJoystickUserPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *glfwGetJoystickUserPointer(int jid)
     * }
     */
    public static MethodHandle glfwGetJoystickUserPointer$handle() {
        return glfwGetJoystickUserPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *glfwGetJoystickUserPointer(int jid)
     * }
     */
    public static MemorySegment glfwGetJoystickUserPointer$address() {
        return glfwGetJoystickUserPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *glfwGetJoystickUserPointer(int jid)
     * }
     */
    public static MemorySegment glfwGetJoystickUserPointer(int jid) {
        var mh$ = glfwGetJoystickUserPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetJoystickUserPointer", jid);
            }
            return (MemorySegment)mh$.invokeExact(jid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwJoystickIsGamepad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwJoystickIsGamepad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwJoystickIsGamepad(int jid)
     * }
     */
    public static FunctionDescriptor glfwJoystickIsGamepad$descriptor() {
        return glfwJoystickIsGamepad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwJoystickIsGamepad(int jid)
     * }
     */
    public static MethodHandle glfwJoystickIsGamepad$handle() {
        return glfwJoystickIsGamepad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwJoystickIsGamepad(int jid)
     * }
     */
    public static MemorySegment glfwJoystickIsGamepad$address() {
        return glfwJoystickIsGamepad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwJoystickIsGamepad(int jid)
     * }
     */
    public static int glfwJoystickIsGamepad(int jid) {
        var mh$ = glfwJoystickIsGamepad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwJoystickIsGamepad", jid);
            }
            return (int)mh$.invokeExact(jid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetJoystickCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetJoystickCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback)
     * }
     */
    public static FunctionDescriptor glfwSetJoystickCallback$descriptor() {
        return glfwSetJoystickCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback)
     * }
     */
    public static MethodHandle glfwSetJoystickCallback$handle() {
        return glfwSetJoystickCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback)
     * }
     */
    public static MemorySegment glfwSetJoystickCallback$address() {
        return glfwSetJoystickCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback)
     * }
     */
    public static MemorySegment glfwSetJoystickCallback(MemorySegment callback) {
        var mh$ = glfwSetJoystickCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetJoystickCallback", callback);
            }
            return (MemorySegment)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwUpdateGamepadMappings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwUpdateGamepadMappings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwUpdateGamepadMappings(const char *string)
     * }
     */
    public static FunctionDescriptor glfwUpdateGamepadMappings$descriptor() {
        return glfwUpdateGamepadMappings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwUpdateGamepadMappings(const char *string)
     * }
     */
    public static MethodHandle glfwUpdateGamepadMappings$handle() {
        return glfwUpdateGamepadMappings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwUpdateGamepadMappings(const char *string)
     * }
     */
    public static MemorySegment glfwUpdateGamepadMappings$address() {
        return glfwUpdateGamepadMappings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwUpdateGamepadMappings(const char *string)
     * }
     */
    public static int glfwUpdateGamepadMappings(MemorySegment string) {
        var mh$ = glfwUpdateGamepadMappings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwUpdateGamepadMappings", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetGamepadName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetGamepadName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *glfwGetGamepadName(int jid)
     * }
     */
    public static FunctionDescriptor glfwGetGamepadName$descriptor() {
        return glfwGetGamepadName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *glfwGetGamepadName(int jid)
     * }
     */
    public static MethodHandle glfwGetGamepadName$handle() {
        return glfwGetGamepadName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *glfwGetGamepadName(int jid)
     * }
     */
    public static MemorySegment glfwGetGamepadName$address() {
        return glfwGetGamepadName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *glfwGetGamepadName(int jid)
     * }
     */
    public static MemorySegment glfwGetGamepadName(int jid) {
        var mh$ = glfwGetGamepadName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetGamepadName", jid);
            }
            return (MemorySegment)mh$.invokeExact(jid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetGamepadState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetGamepadState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwGetGamepadState(int jid, GLFWgamepadstate *state)
     * }
     */
    public static FunctionDescriptor glfwGetGamepadState$descriptor() {
        return glfwGetGamepadState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwGetGamepadState(int jid, GLFWgamepadstate *state)
     * }
     */
    public static MethodHandle glfwGetGamepadState$handle() {
        return glfwGetGamepadState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwGetGamepadState(int jid, GLFWgamepadstate *state)
     * }
     */
    public static MemorySegment glfwGetGamepadState$address() {
        return glfwGetGamepadState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwGetGamepadState(int jid, GLFWgamepadstate *state)
     * }
     */
    public static int glfwGetGamepadState(int jid, MemorySegment state) {
        var mh$ = glfwGetGamepadState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetGamepadState", jid, state);
            }
            return (int)mh$.invokeExact(jid, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetClipboardString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetClipboardString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetClipboardString(GLFWwindow *window, const char *string)
     * }
     */
    public static FunctionDescriptor glfwSetClipboardString$descriptor() {
        return glfwSetClipboardString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetClipboardString(GLFWwindow *window, const char *string)
     * }
     */
    public static MethodHandle glfwSetClipboardString$handle() {
        return glfwSetClipboardString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetClipboardString(GLFWwindow *window, const char *string)
     * }
     */
    public static MemorySegment glfwSetClipboardString$address() {
        return glfwSetClipboardString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetClipboardString(GLFWwindow *window, const char *string)
     * }
     */
    public static void glfwSetClipboardString(MemorySegment window, MemorySegment string) {
        var mh$ = glfwSetClipboardString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetClipboardString", window, string);
            }
            mh$.invokeExact(window, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetClipboardString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetClipboardString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *glfwGetClipboardString(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwGetClipboardString$descriptor() {
        return glfwGetClipboardString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *glfwGetClipboardString(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwGetClipboardString$handle() {
        return glfwGetClipboardString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *glfwGetClipboardString(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetClipboardString$address() {
        return glfwGetClipboardString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *glfwGetClipboardString(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwGetClipboardString(MemorySegment window) {
        var mh$ = glfwGetClipboardString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetClipboardString", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_DOUBLE    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double glfwGetTime()
     * }
     */
    public static FunctionDescriptor glfwGetTime$descriptor() {
        return glfwGetTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double glfwGetTime()
     * }
     */
    public static MethodHandle glfwGetTime$handle() {
        return glfwGetTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double glfwGetTime()
     * }
     */
    public static MemorySegment glfwGetTime$address() {
        return glfwGetTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double glfwGetTime()
     * }
     */
    public static double glfwGetTime() {
        var mh$ = glfwGetTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetTime");
            }
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSetTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_DOUBLE
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSetTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSetTime(double time)
     * }
     */
    public static FunctionDescriptor glfwSetTime$descriptor() {
        return glfwSetTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSetTime(double time)
     * }
     */
    public static MethodHandle glfwSetTime$handle() {
        return glfwSetTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSetTime(double time)
     * }
     */
    public static MemorySegment glfwSetTime$address() {
        return glfwSetTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSetTime(double time)
     * }
     */
    public static void glfwSetTime(double time) {
        var mh$ = glfwSetTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSetTime", time);
            }
            mh$.invokeExact(time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetTimerValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_LONG    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetTimerValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t glfwGetTimerValue()
     * }
     */
    public static FunctionDescriptor glfwGetTimerValue$descriptor() {
        return glfwGetTimerValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t glfwGetTimerValue()
     * }
     */
    public static MethodHandle glfwGetTimerValue$handle() {
        return glfwGetTimerValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t glfwGetTimerValue()
     * }
     */
    public static MemorySegment glfwGetTimerValue$address() {
        return glfwGetTimerValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t glfwGetTimerValue()
     * }
     */
    public static long glfwGetTimerValue() {
        var mh$ = glfwGetTimerValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetTimerValue");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetTimerFrequency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_LONG    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetTimerFrequency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t glfwGetTimerFrequency()
     * }
     */
    public static FunctionDescriptor glfwGetTimerFrequency$descriptor() {
        return glfwGetTimerFrequency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t glfwGetTimerFrequency()
     * }
     */
    public static MethodHandle glfwGetTimerFrequency$handle() {
        return glfwGetTimerFrequency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t glfwGetTimerFrequency()
     * }
     */
    public static MemorySegment glfwGetTimerFrequency$address() {
        return glfwGetTimerFrequency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t glfwGetTimerFrequency()
     * }
     */
    public static long glfwGetTimerFrequency() {
        var mh$ = glfwGetTimerFrequency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetTimerFrequency");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwMakeContextCurrent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwMakeContextCurrent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwMakeContextCurrent(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwMakeContextCurrent$descriptor() {
        return glfwMakeContextCurrent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwMakeContextCurrent(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwMakeContextCurrent$handle() {
        return glfwMakeContextCurrent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwMakeContextCurrent(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwMakeContextCurrent$address() {
        return glfwMakeContextCurrent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwMakeContextCurrent(GLFWwindow *window)
     * }
     */
    public static void glfwMakeContextCurrent(MemorySegment window) {
        var mh$ = glfwMakeContextCurrent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwMakeContextCurrent", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetCurrentContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetCurrentContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWwindow *glfwGetCurrentContext()
     * }
     */
    public static FunctionDescriptor glfwGetCurrentContext$descriptor() {
        return glfwGetCurrentContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWwindow *glfwGetCurrentContext()
     * }
     */
    public static MethodHandle glfwGetCurrentContext$handle() {
        return glfwGetCurrentContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWwindow *glfwGetCurrentContext()
     * }
     */
    public static MemorySegment glfwGetCurrentContext$address() {
        return glfwGetCurrentContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWwindow *glfwGetCurrentContext()
     * }
     */
    public static MemorySegment glfwGetCurrentContext() {
        var mh$ = glfwGetCurrentContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetCurrentContext");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSwapBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSwapBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSwapBuffers(GLFWwindow *window)
     * }
     */
    public static FunctionDescriptor glfwSwapBuffers$descriptor() {
        return glfwSwapBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSwapBuffers(GLFWwindow *window)
     * }
     */
    public static MethodHandle glfwSwapBuffers$handle() {
        return glfwSwapBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSwapBuffers(GLFWwindow *window)
     * }
     */
    public static MemorySegment glfwSwapBuffers$address() {
        return glfwSwapBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSwapBuffers(GLFWwindow *window)
     * }
     */
    public static void glfwSwapBuffers(MemorySegment window) {
        var mh$ = glfwSwapBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSwapBuffers", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwSwapInterval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glcore.C_INT
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwSwapInterval");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glfwSwapInterval(int interval)
     * }
     */
    public static FunctionDescriptor glfwSwapInterval$descriptor() {
        return glfwSwapInterval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glfwSwapInterval(int interval)
     * }
     */
    public static MethodHandle glfwSwapInterval$handle() {
        return glfwSwapInterval.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glfwSwapInterval(int interval)
     * }
     */
    public static MemorySegment glfwSwapInterval$address() {
        return glfwSwapInterval.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glfwSwapInterval(int interval)
     * }
     */
    public static void glfwSwapInterval(int interval) {
        var mh$ = glfwSwapInterval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwSwapInterval", interval);
            }
            mh$.invokeExact(interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwExtensionSupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwExtensionSupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwExtensionSupported(const char *extension)
     * }
     */
    public static FunctionDescriptor glfwExtensionSupported$descriptor() {
        return glfwExtensionSupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwExtensionSupported(const char *extension)
     * }
     */
    public static MethodHandle glfwExtensionSupported$handle() {
        return glfwExtensionSupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwExtensionSupported(const char *extension)
     * }
     */
    public static MemorySegment glfwExtensionSupported$address() {
        return glfwExtensionSupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwExtensionSupported(const char *extension)
     * }
     */
    public static int glfwExtensionSupported(MemorySegment extension) {
        var mh$ = glfwExtensionSupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwExtensionSupported", extension);
            }
            return (int)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetProcAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetProcAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLFWglproc glfwGetProcAddress(const char *procname)
     * }
     */
    public static FunctionDescriptor glfwGetProcAddress$descriptor() {
        return glfwGetProcAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLFWglproc glfwGetProcAddress(const char *procname)
     * }
     */
    public static MethodHandle glfwGetProcAddress$handle() {
        return glfwGetProcAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLFWglproc glfwGetProcAddress(const char *procname)
     * }
     */
    public static MemorySegment glfwGetProcAddress$address() {
        return glfwGetProcAddress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLFWglproc glfwGetProcAddress(const char *procname)
     * }
     */
    public static MemorySegment glfwGetProcAddress(MemorySegment procname) {
        var mh$ = glfwGetProcAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetProcAddress", procname);
            }
            return (MemorySegment)mh$.invokeExact(procname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwVulkanSupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_INT    );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwVulkanSupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int glfwVulkanSupported()
     * }
     */
    public static FunctionDescriptor glfwVulkanSupported$descriptor() {
        return glfwVulkanSupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int glfwVulkanSupported()
     * }
     */
    public static MethodHandle glfwVulkanSupported$handle() {
        return glfwVulkanSupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int glfwVulkanSupported()
     * }
     */
    public static MemorySegment glfwVulkanSupported$address() {
        return glfwVulkanSupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int glfwVulkanSupported()
     * }
     */
    public static int glfwVulkanSupported() {
        var mh$ = glfwVulkanSupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwVulkanSupported");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glfwGetRequiredInstanceExtensions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glcore.C_POINTER,
            glcore.C_POINTER
        );

        public static final MemorySegment ADDR = glcore.findOrThrow("glfwGetRequiredInstanceExtensions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char **glfwGetRequiredInstanceExtensions(uint32_t *count)
     * }
     */
    public static FunctionDescriptor glfwGetRequiredInstanceExtensions$descriptor() {
        return glfwGetRequiredInstanceExtensions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char **glfwGetRequiredInstanceExtensions(uint32_t *count)
     * }
     */
    public static MethodHandle glfwGetRequiredInstanceExtensions$handle() {
        return glfwGetRequiredInstanceExtensions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char **glfwGetRequiredInstanceExtensions(uint32_t *count)
     * }
     */
    public static MemorySegment glfwGetRequiredInstanceExtensions$address() {
        return glfwGetRequiredInstanceExtensions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char **glfwGetRequiredInstanceExtensions(uint32_t *count)
     * }
     */
    public static MemorySegment glfwGetRequiredInstanceExtensions(MemorySegment count) {
        var mh$ = glfwGetRequiredInstanceExtensions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glfwGetRequiredInstanceExtensions", count);
            }
            return (MemorySegment)mh$.invokeExact(count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define GLAD_GENERATOR_VERSION "2.0.6"
     * }
     */
    public static MemorySegment GLAD_GENERATOR_VERSION() {
        class Holder {
            static final MemorySegment GLAD_GENERATOR_VERSION
                = glcore.LIBRARY_ARENA.allocateFrom("2.0.6");
        }
        return Holder.GLAD_GENERATOR_VERSION;
    }
    private static final int GL_ALL_ATTRIB_BITS = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define GL_ALL_ATTRIB_BITS 4294967295
     * }
     */
    public static int GL_ALL_ATTRIB_BITS() {
        return GL_ALL_ATTRIB_BITS;
    }
    private static final int GL_ALL_BARRIER_BITS = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define GL_ALL_BARRIER_BITS 4294967295
     * }
     */
    public static int GL_ALL_BARRIER_BITS() {
        return GL_ALL_BARRIER_BITS;
    }
    private static final int GL_ALL_BARRIER_BITS_EXT = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define GL_ALL_BARRIER_BITS_EXT 4294967295
     * }
     */
    public static int GL_ALL_BARRIER_BITS_EXT() {
        return GL_ALL_BARRIER_BITS_EXT;
    }
    private static final int GL_ALL_SHADER_BITS = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define GL_ALL_SHADER_BITS 4294967295
     * }
     */
    public static int GL_ALL_SHADER_BITS() {
        return GL_ALL_SHADER_BITS;
    }
    private static final int GL_CLIENT_ALL_ATTRIB_BITS = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define GL_CLIENT_ALL_ATTRIB_BITS 4294967295
     * }
     */
    public static int GL_CLIENT_ALL_ATTRIB_BITS() {
        return GL_CLIENT_ALL_ATTRIB_BITS;
    }
    private static final int GL_INVALID_INDEX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define GL_INVALID_INDEX 4294967295
     * }
     */
    public static int GL_INVALID_INDEX() {
        return GL_INVALID_INDEX;
    }
    private static final int GL_NEXT_BUFFER_NV = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define GL_NEXT_BUFFER_NV -2
     * }
     */
    public static int GL_NEXT_BUFFER_NV() {
        return GL_NEXT_BUFFER_NV;
    }
    private static final int GL_SKIP_COMPONENTS1_NV = (int)-6L;
    /**
     * {@snippet lang=c :
     * #define GL_SKIP_COMPONENTS1_NV -6
     * }
     */
    public static int GL_SKIP_COMPONENTS1_NV() {
        return GL_SKIP_COMPONENTS1_NV;
    }
    private static final int GL_SKIP_COMPONENTS2_NV = (int)-5L;
    /**
     * {@snippet lang=c :
     * #define GL_SKIP_COMPONENTS2_NV -5
     * }
     */
    public static int GL_SKIP_COMPONENTS2_NV() {
        return GL_SKIP_COMPONENTS2_NV;
    }
    private static final int GL_SKIP_COMPONENTS3_NV = (int)-4L;
    /**
     * {@snippet lang=c :
     * #define GL_SKIP_COMPONENTS3_NV -4
     * }
     */
    public static int GL_SKIP_COMPONENTS3_NV() {
        return GL_SKIP_COMPONENTS3_NV;
    }
    private static final int GL_SKIP_COMPONENTS4_NV = (int)-3L;
    /**
     * {@snippet lang=c :
     * #define GL_SKIP_COMPONENTS4_NV -3
     * }
     */
    public static int GL_SKIP_COMPONENTS4_NV() {
        return GL_SKIP_COMPONENTS4_NV;
    }
    private static final long GL_TIMEOUT_IGNORED = -1L;
    /**
     * {@snippet lang=c :
     * #define GL_TIMEOUT_IGNORED -1
     * }
     */
    public static long GL_TIMEOUT_IGNORED() {
        return GL_TIMEOUT_IGNORED;
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int GLFW_HAT_RIGHT_UP = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLFW_HAT_RIGHT_UP 3
     * }
     */
    public static int GLFW_HAT_RIGHT_UP() {
        return GLFW_HAT_RIGHT_UP;
    }
    private static final int GLFW_HAT_RIGHT_DOWN = (int)6L;
    /**
     * {@snippet lang=c :
     * #define GLFW_HAT_RIGHT_DOWN 6
     * }
     */
    public static int GLFW_HAT_RIGHT_DOWN() {
        return GLFW_HAT_RIGHT_DOWN;
    }
    private static final int GLFW_HAT_LEFT_UP = (int)9L;
    /**
     * {@snippet lang=c :
     * #define GLFW_HAT_LEFT_UP 9
     * }
     */
    public static int GLFW_HAT_LEFT_UP() {
        return GLFW_HAT_LEFT_UP;
    }
    private static final int GLFW_HAT_LEFT_DOWN = (int)12L;
    /**
     * {@snippet lang=c :
     * #define GLFW_HAT_LEFT_DOWN 12
     * }
     */
    public static int GLFW_HAT_LEFT_DOWN() {
        return GLFW_HAT_LEFT_DOWN;
    }
    private static final int GLFW_KEY_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_UNKNOWN -1
     * }
     */
    public static int GLFW_KEY_UNKNOWN() {
        return GLFW_KEY_UNKNOWN;
    }
    private static final int GLFW_KEY_LAST = (int)348L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_LAST 348
     * }
     */
    public static int GLFW_KEY_LAST() {
        return GLFW_KEY_LAST;
    }
    private static final int GLFW_MOUSE_BUTTON_LAST = (int)7L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_LAST 7
     * }
     */
    public static int GLFW_MOUSE_BUTTON_LAST() {
        return GLFW_MOUSE_BUTTON_LAST;
    }
    private static final int GLFW_MOUSE_BUTTON_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_LEFT 0
     * }
     */
    public static int GLFW_MOUSE_BUTTON_LEFT() {
        return GLFW_MOUSE_BUTTON_LEFT;
    }
    private static final int GLFW_MOUSE_BUTTON_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_RIGHT 1
     * }
     */
    public static int GLFW_MOUSE_BUTTON_RIGHT() {
        return GLFW_MOUSE_BUTTON_RIGHT;
    }
    private static final int GLFW_MOUSE_BUTTON_MIDDLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_MIDDLE 2
     * }
     */
    public static int GLFW_MOUSE_BUTTON_MIDDLE() {
        return GLFW_MOUSE_BUTTON_MIDDLE;
    }
    private static final int GLFW_JOYSTICK_LAST = (int)15L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_LAST 15
     * }
     */
    public static int GLFW_JOYSTICK_LAST() {
        return GLFW_JOYSTICK_LAST;
    }
    private static final int GLFW_GAMEPAD_BUTTON_LAST = (int)14L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_LAST 14
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_LAST() {
        return GLFW_GAMEPAD_BUTTON_LAST;
    }
    private static final int GLFW_GAMEPAD_BUTTON_CROSS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_CROSS 0
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_CROSS() {
        return GLFW_GAMEPAD_BUTTON_CROSS;
    }
    private static final int GLFW_GAMEPAD_BUTTON_CIRCLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_CIRCLE 1
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_CIRCLE() {
        return GLFW_GAMEPAD_BUTTON_CIRCLE;
    }
    private static final int GLFW_GAMEPAD_BUTTON_SQUARE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_SQUARE 2
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_SQUARE() {
        return GLFW_GAMEPAD_BUTTON_SQUARE;
    }
    private static final int GLFW_GAMEPAD_BUTTON_TRIANGLE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_TRIANGLE 3
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_TRIANGLE() {
        return GLFW_GAMEPAD_BUTTON_TRIANGLE;
    }
    private static final int GLFW_GAMEPAD_AXIS_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_AXIS_LAST 5
     * }
     */
    public static int GLFW_GAMEPAD_AXIS_LAST() {
        return GLFW_GAMEPAD_AXIS_LAST;
    }
    private static final int GLFW_OPENGL_DEBUG_CONTEXT = (int)139271L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OPENGL_DEBUG_CONTEXT 139271
     * }
     */
    public static int GLFW_OPENGL_DEBUG_CONTEXT() {
        return GLFW_OPENGL_DEBUG_CONTEXT;
    }
    private static final int GLFW_ANY_POSITION = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANY_POSITION 2147483648
     * }
     */
    public static int GLFW_ANY_POSITION() {
        return GLFW_ANY_POSITION;
    }
    private static final int GLFW_HRESIZE_CURSOR = (int)221189L;
    /**
     * {@snippet lang=c :
     * #define GLFW_HRESIZE_CURSOR 221189
     * }
     */
    public static int GLFW_HRESIZE_CURSOR() {
        return GLFW_HRESIZE_CURSOR;
    }
    private static final int GLFW_VRESIZE_CURSOR = (int)221190L;
    /**
     * {@snippet lang=c :
     * #define GLFW_VRESIZE_CURSOR 221190
     * }
     */
    public static int GLFW_VRESIZE_CURSOR() {
        return GLFW_VRESIZE_CURSOR;
    }
    private static final int GLFW_HAND_CURSOR = (int)221188L;
    /**
     * {@snippet lang=c :
     * #define GLFW_HAND_CURSOR 221188
     * }
     */
    public static int GLFW_HAND_CURSOR() {
        return GLFW_HAND_CURSOR;
    }
    private static final int GLFW_DONT_CARE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_DONT_CARE -1
     * }
     */
    public static int GLFW_DONT_CARE() {
        return GLFW_DONT_CARE;
    }
}

