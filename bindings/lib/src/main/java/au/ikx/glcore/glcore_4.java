// Generated by jextract

package au.ikx.glcore;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class glcore_4 extends glcore_5 {

    glcore_4() {
        // Should not be called directly
    }
    private static final int GLFW_KEY_F5 = (int)294L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F5 294
     * }
     */
    public static int GLFW_KEY_F5() {
        return GLFW_KEY_F5;
    }
    private static final int GLFW_KEY_F6 = (int)295L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F6 295
     * }
     */
    public static int GLFW_KEY_F6() {
        return GLFW_KEY_F6;
    }
    private static final int GLFW_KEY_F7 = (int)296L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F7 296
     * }
     */
    public static int GLFW_KEY_F7() {
        return GLFW_KEY_F7;
    }
    private static final int GLFW_KEY_F8 = (int)297L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F8 297
     * }
     */
    public static int GLFW_KEY_F8() {
        return GLFW_KEY_F8;
    }
    private static final int GLFW_KEY_F9 = (int)298L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F9 298
     * }
     */
    public static int GLFW_KEY_F9() {
        return GLFW_KEY_F9;
    }
    private static final int GLFW_KEY_F10 = (int)299L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F10 299
     * }
     */
    public static int GLFW_KEY_F10() {
        return GLFW_KEY_F10;
    }
    private static final int GLFW_KEY_F11 = (int)300L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F11 300
     * }
     */
    public static int GLFW_KEY_F11() {
        return GLFW_KEY_F11;
    }
    private static final int GLFW_KEY_F12 = (int)301L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F12 301
     * }
     */
    public static int GLFW_KEY_F12() {
        return GLFW_KEY_F12;
    }
    private static final int GLFW_KEY_F13 = (int)302L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F13 302
     * }
     */
    public static int GLFW_KEY_F13() {
        return GLFW_KEY_F13;
    }
    private static final int GLFW_KEY_F14 = (int)303L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F14 303
     * }
     */
    public static int GLFW_KEY_F14() {
        return GLFW_KEY_F14;
    }
    private static final int GLFW_KEY_F15 = (int)304L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F15 304
     * }
     */
    public static int GLFW_KEY_F15() {
        return GLFW_KEY_F15;
    }
    private static final int GLFW_KEY_F16 = (int)305L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F16 305
     * }
     */
    public static int GLFW_KEY_F16() {
        return GLFW_KEY_F16;
    }
    private static final int GLFW_KEY_F17 = (int)306L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F17 306
     * }
     */
    public static int GLFW_KEY_F17() {
        return GLFW_KEY_F17;
    }
    private static final int GLFW_KEY_F18 = (int)307L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F18 307
     * }
     */
    public static int GLFW_KEY_F18() {
        return GLFW_KEY_F18;
    }
    private static final int GLFW_KEY_F19 = (int)308L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F19 308
     * }
     */
    public static int GLFW_KEY_F19() {
        return GLFW_KEY_F19;
    }
    private static final int GLFW_KEY_F20 = (int)309L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F20 309
     * }
     */
    public static int GLFW_KEY_F20() {
        return GLFW_KEY_F20;
    }
    private static final int GLFW_KEY_F21 = (int)310L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F21 310
     * }
     */
    public static int GLFW_KEY_F21() {
        return GLFW_KEY_F21;
    }
    private static final int GLFW_KEY_F22 = (int)311L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F22 311
     * }
     */
    public static int GLFW_KEY_F22() {
        return GLFW_KEY_F22;
    }
    private static final int GLFW_KEY_F23 = (int)312L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F23 312
     * }
     */
    public static int GLFW_KEY_F23() {
        return GLFW_KEY_F23;
    }
    private static final int GLFW_KEY_F24 = (int)313L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F24 313
     * }
     */
    public static int GLFW_KEY_F24() {
        return GLFW_KEY_F24;
    }
    private static final int GLFW_KEY_F25 = (int)314L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_F25 314
     * }
     */
    public static int GLFW_KEY_F25() {
        return GLFW_KEY_F25;
    }
    private static final int GLFW_KEY_KP_0 = (int)320L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_0 320
     * }
     */
    public static int GLFW_KEY_KP_0() {
        return GLFW_KEY_KP_0;
    }
    private static final int GLFW_KEY_KP_1 = (int)321L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_1 321
     * }
     */
    public static int GLFW_KEY_KP_1() {
        return GLFW_KEY_KP_1;
    }
    private static final int GLFW_KEY_KP_2 = (int)322L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_2 322
     * }
     */
    public static int GLFW_KEY_KP_2() {
        return GLFW_KEY_KP_2;
    }
    private static final int GLFW_KEY_KP_3 = (int)323L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_3 323
     * }
     */
    public static int GLFW_KEY_KP_3() {
        return GLFW_KEY_KP_3;
    }
    private static final int GLFW_KEY_KP_4 = (int)324L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_4 324
     * }
     */
    public static int GLFW_KEY_KP_4() {
        return GLFW_KEY_KP_4;
    }
    private static final int GLFW_KEY_KP_5 = (int)325L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_5 325
     * }
     */
    public static int GLFW_KEY_KP_5() {
        return GLFW_KEY_KP_5;
    }
    private static final int GLFW_KEY_KP_6 = (int)326L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_6 326
     * }
     */
    public static int GLFW_KEY_KP_6() {
        return GLFW_KEY_KP_6;
    }
    private static final int GLFW_KEY_KP_7 = (int)327L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_7 327
     * }
     */
    public static int GLFW_KEY_KP_7() {
        return GLFW_KEY_KP_7;
    }
    private static final int GLFW_KEY_KP_8 = (int)328L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_8 328
     * }
     */
    public static int GLFW_KEY_KP_8() {
        return GLFW_KEY_KP_8;
    }
    private static final int GLFW_KEY_KP_9 = (int)329L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_9 329
     * }
     */
    public static int GLFW_KEY_KP_9() {
        return GLFW_KEY_KP_9;
    }
    private static final int GLFW_KEY_KP_DECIMAL = (int)330L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_DECIMAL 330
     * }
     */
    public static int GLFW_KEY_KP_DECIMAL() {
        return GLFW_KEY_KP_DECIMAL;
    }
    private static final int GLFW_KEY_KP_DIVIDE = (int)331L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_DIVIDE 331
     * }
     */
    public static int GLFW_KEY_KP_DIVIDE() {
        return GLFW_KEY_KP_DIVIDE;
    }
    private static final int GLFW_KEY_KP_MULTIPLY = (int)332L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_MULTIPLY 332
     * }
     */
    public static int GLFW_KEY_KP_MULTIPLY() {
        return GLFW_KEY_KP_MULTIPLY;
    }
    private static final int GLFW_KEY_KP_SUBTRACT = (int)333L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_SUBTRACT 333
     * }
     */
    public static int GLFW_KEY_KP_SUBTRACT() {
        return GLFW_KEY_KP_SUBTRACT;
    }
    private static final int GLFW_KEY_KP_ADD = (int)334L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_ADD 334
     * }
     */
    public static int GLFW_KEY_KP_ADD() {
        return GLFW_KEY_KP_ADD;
    }
    private static final int GLFW_KEY_KP_ENTER = (int)335L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_ENTER 335
     * }
     */
    public static int GLFW_KEY_KP_ENTER() {
        return GLFW_KEY_KP_ENTER;
    }
    private static final int GLFW_KEY_KP_EQUAL = (int)336L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_KP_EQUAL 336
     * }
     */
    public static int GLFW_KEY_KP_EQUAL() {
        return GLFW_KEY_KP_EQUAL;
    }
    private static final int GLFW_KEY_LEFT_SHIFT = (int)340L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_LEFT_SHIFT 340
     * }
     */
    public static int GLFW_KEY_LEFT_SHIFT() {
        return GLFW_KEY_LEFT_SHIFT;
    }
    private static final int GLFW_KEY_LEFT_CONTROL = (int)341L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_LEFT_CONTROL 341
     * }
     */
    public static int GLFW_KEY_LEFT_CONTROL() {
        return GLFW_KEY_LEFT_CONTROL;
    }
    private static final int GLFW_KEY_LEFT_ALT = (int)342L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_LEFT_ALT 342
     * }
     */
    public static int GLFW_KEY_LEFT_ALT() {
        return GLFW_KEY_LEFT_ALT;
    }
    private static final int GLFW_KEY_LEFT_SUPER = (int)343L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_LEFT_SUPER 343
     * }
     */
    public static int GLFW_KEY_LEFT_SUPER() {
        return GLFW_KEY_LEFT_SUPER;
    }
    private static final int GLFW_KEY_RIGHT_SHIFT = (int)344L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_RIGHT_SHIFT 344
     * }
     */
    public static int GLFW_KEY_RIGHT_SHIFT() {
        return GLFW_KEY_RIGHT_SHIFT;
    }
    private static final int GLFW_KEY_RIGHT_CONTROL = (int)345L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_RIGHT_CONTROL 345
     * }
     */
    public static int GLFW_KEY_RIGHT_CONTROL() {
        return GLFW_KEY_RIGHT_CONTROL;
    }
    private static final int GLFW_KEY_RIGHT_ALT = (int)346L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_RIGHT_ALT 346
     * }
     */
    public static int GLFW_KEY_RIGHT_ALT() {
        return GLFW_KEY_RIGHT_ALT;
    }
    private static final int GLFW_KEY_RIGHT_SUPER = (int)347L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_RIGHT_SUPER 347
     * }
     */
    public static int GLFW_KEY_RIGHT_SUPER() {
        return GLFW_KEY_RIGHT_SUPER;
    }
    private static final int GLFW_KEY_MENU = (int)348L;
    /**
     * {@snippet lang=c :
     * #define GLFW_KEY_MENU 348
     * }
     */
    public static int GLFW_KEY_MENU() {
        return GLFW_KEY_MENU;
    }
    private static final int GLFW_MOD_SHIFT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOD_SHIFT 1
     * }
     */
    public static int GLFW_MOD_SHIFT() {
        return GLFW_MOD_SHIFT;
    }
    private static final int GLFW_MOD_CONTROL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOD_CONTROL 2
     * }
     */
    public static int GLFW_MOD_CONTROL() {
        return GLFW_MOD_CONTROL;
    }
    private static final int GLFW_MOD_ALT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOD_ALT 4
     * }
     */
    public static int GLFW_MOD_ALT() {
        return GLFW_MOD_ALT;
    }
    private static final int GLFW_MOD_SUPER = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOD_SUPER 8
     * }
     */
    public static int GLFW_MOD_SUPER() {
        return GLFW_MOD_SUPER;
    }
    private static final int GLFW_MOD_CAPS_LOCK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOD_CAPS_LOCK 16
     * }
     */
    public static int GLFW_MOD_CAPS_LOCK() {
        return GLFW_MOD_CAPS_LOCK;
    }
    private static final int GLFW_MOD_NUM_LOCK = (int)32L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOD_NUM_LOCK 32
     * }
     */
    public static int GLFW_MOD_NUM_LOCK() {
        return GLFW_MOD_NUM_LOCK;
    }
    private static final int GLFW_MOUSE_BUTTON_1 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_1 0
     * }
     */
    public static int GLFW_MOUSE_BUTTON_1() {
        return GLFW_MOUSE_BUTTON_1;
    }
    private static final int GLFW_MOUSE_BUTTON_2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_2 1
     * }
     */
    public static int GLFW_MOUSE_BUTTON_2() {
        return GLFW_MOUSE_BUTTON_2;
    }
    private static final int GLFW_MOUSE_BUTTON_3 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_3 2
     * }
     */
    public static int GLFW_MOUSE_BUTTON_3() {
        return GLFW_MOUSE_BUTTON_3;
    }
    private static final int GLFW_MOUSE_BUTTON_4 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_4 3
     * }
     */
    public static int GLFW_MOUSE_BUTTON_4() {
        return GLFW_MOUSE_BUTTON_4;
    }
    private static final int GLFW_MOUSE_BUTTON_5 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_5 4
     * }
     */
    public static int GLFW_MOUSE_BUTTON_5() {
        return GLFW_MOUSE_BUTTON_5;
    }
    private static final int GLFW_MOUSE_BUTTON_6 = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_6 5
     * }
     */
    public static int GLFW_MOUSE_BUTTON_6() {
        return GLFW_MOUSE_BUTTON_6;
    }
    private static final int GLFW_MOUSE_BUTTON_7 = (int)6L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_7 6
     * }
     */
    public static int GLFW_MOUSE_BUTTON_7() {
        return GLFW_MOUSE_BUTTON_7;
    }
    private static final int GLFW_MOUSE_BUTTON_8 = (int)7L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_BUTTON_8 7
     * }
     */
    public static int GLFW_MOUSE_BUTTON_8() {
        return GLFW_MOUSE_BUTTON_8;
    }
    private static final int GLFW_JOYSTICK_1 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_1 0
     * }
     */
    public static int GLFW_JOYSTICK_1() {
        return GLFW_JOYSTICK_1;
    }
    private static final int GLFW_JOYSTICK_2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_2 1
     * }
     */
    public static int GLFW_JOYSTICK_2() {
        return GLFW_JOYSTICK_2;
    }
    private static final int GLFW_JOYSTICK_3 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_3 2
     * }
     */
    public static int GLFW_JOYSTICK_3() {
        return GLFW_JOYSTICK_3;
    }
    private static final int GLFW_JOYSTICK_4 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_4 3
     * }
     */
    public static int GLFW_JOYSTICK_4() {
        return GLFW_JOYSTICK_4;
    }
    private static final int GLFW_JOYSTICK_5 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_5 4
     * }
     */
    public static int GLFW_JOYSTICK_5() {
        return GLFW_JOYSTICK_5;
    }
    private static final int GLFW_JOYSTICK_6 = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_6 5
     * }
     */
    public static int GLFW_JOYSTICK_6() {
        return GLFW_JOYSTICK_6;
    }
    private static final int GLFW_JOYSTICK_7 = (int)6L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_7 6
     * }
     */
    public static int GLFW_JOYSTICK_7() {
        return GLFW_JOYSTICK_7;
    }
    private static final int GLFW_JOYSTICK_8 = (int)7L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_8 7
     * }
     */
    public static int GLFW_JOYSTICK_8() {
        return GLFW_JOYSTICK_8;
    }
    private static final int GLFW_JOYSTICK_9 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_9 8
     * }
     */
    public static int GLFW_JOYSTICK_9() {
        return GLFW_JOYSTICK_9;
    }
    private static final int GLFW_JOYSTICK_10 = (int)9L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_10 9
     * }
     */
    public static int GLFW_JOYSTICK_10() {
        return GLFW_JOYSTICK_10;
    }
    private static final int GLFW_JOYSTICK_11 = (int)10L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_11 10
     * }
     */
    public static int GLFW_JOYSTICK_11() {
        return GLFW_JOYSTICK_11;
    }
    private static final int GLFW_JOYSTICK_12 = (int)11L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_12 11
     * }
     */
    public static int GLFW_JOYSTICK_12() {
        return GLFW_JOYSTICK_12;
    }
    private static final int GLFW_JOYSTICK_13 = (int)12L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_13 12
     * }
     */
    public static int GLFW_JOYSTICK_13() {
        return GLFW_JOYSTICK_13;
    }
    private static final int GLFW_JOYSTICK_14 = (int)13L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_14 13
     * }
     */
    public static int GLFW_JOYSTICK_14() {
        return GLFW_JOYSTICK_14;
    }
    private static final int GLFW_JOYSTICK_15 = (int)14L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_15 14
     * }
     */
    public static int GLFW_JOYSTICK_15() {
        return GLFW_JOYSTICK_15;
    }
    private static final int GLFW_JOYSTICK_16 = (int)15L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_16 15
     * }
     */
    public static int GLFW_JOYSTICK_16() {
        return GLFW_JOYSTICK_16;
    }
    private static final int GLFW_GAMEPAD_BUTTON_A = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_A 0
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_A() {
        return GLFW_GAMEPAD_BUTTON_A;
    }
    private static final int GLFW_GAMEPAD_BUTTON_B = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_B 1
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_B() {
        return GLFW_GAMEPAD_BUTTON_B;
    }
    private static final int GLFW_GAMEPAD_BUTTON_X = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_X 2
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_X() {
        return GLFW_GAMEPAD_BUTTON_X;
    }
    private static final int GLFW_GAMEPAD_BUTTON_Y = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_Y 3
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_Y() {
        return GLFW_GAMEPAD_BUTTON_Y;
    }
    private static final int GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_LEFT_BUMPER 4
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_LEFT_BUMPER() {
        return GLFW_GAMEPAD_BUTTON_LEFT_BUMPER;
    }
    private static final int GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER 5
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER() {
        return GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER;
    }
    private static final int GLFW_GAMEPAD_BUTTON_BACK = (int)6L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_BACK 6
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_BACK() {
        return GLFW_GAMEPAD_BUTTON_BACK;
    }
    private static final int GLFW_GAMEPAD_BUTTON_START = (int)7L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_START 7
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_START() {
        return GLFW_GAMEPAD_BUTTON_START;
    }
    private static final int GLFW_GAMEPAD_BUTTON_GUIDE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_GUIDE 8
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_GUIDE() {
        return GLFW_GAMEPAD_BUTTON_GUIDE;
    }
    private static final int GLFW_GAMEPAD_BUTTON_LEFT_THUMB = (int)9L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_LEFT_THUMB 9
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_LEFT_THUMB() {
        return GLFW_GAMEPAD_BUTTON_LEFT_THUMB;
    }
    private static final int GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = (int)10L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_RIGHT_THUMB 10
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_RIGHT_THUMB() {
        return GLFW_GAMEPAD_BUTTON_RIGHT_THUMB;
    }
    private static final int GLFW_GAMEPAD_BUTTON_DPAD_UP = (int)11L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_DPAD_UP 11
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_DPAD_UP() {
        return GLFW_GAMEPAD_BUTTON_DPAD_UP;
    }
    private static final int GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_DPAD_RIGHT 12
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_DPAD_RIGHT() {
        return GLFW_GAMEPAD_BUTTON_DPAD_RIGHT;
    }
    private static final int GLFW_GAMEPAD_BUTTON_DPAD_DOWN = (int)13L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_DPAD_DOWN 13
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_DPAD_DOWN() {
        return GLFW_GAMEPAD_BUTTON_DPAD_DOWN;
    }
    private static final int GLFW_GAMEPAD_BUTTON_DPAD_LEFT = (int)14L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_BUTTON_DPAD_LEFT 14
     * }
     */
    public static int GLFW_GAMEPAD_BUTTON_DPAD_LEFT() {
        return GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
    }
    private static final int GLFW_GAMEPAD_AXIS_LEFT_X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_AXIS_LEFT_X 0
     * }
     */
    public static int GLFW_GAMEPAD_AXIS_LEFT_X() {
        return GLFW_GAMEPAD_AXIS_LEFT_X;
    }
    private static final int GLFW_GAMEPAD_AXIS_LEFT_Y = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_AXIS_LEFT_Y 1
     * }
     */
    public static int GLFW_GAMEPAD_AXIS_LEFT_Y() {
        return GLFW_GAMEPAD_AXIS_LEFT_Y;
    }
    private static final int GLFW_GAMEPAD_AXIS_RIGHT_X = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_AXIS_RIGHT_X 2
     * }
     */
    public static int GLFW_GAMEPAD_AXIS_RIGHT_X() {
        return GLFW_GAMEPAD_AXIS_RIGHT_X;
    }
    private static final int GLFW_GAMEPAD_AXIS_RIGHT_Y = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_AXIS_RIGHT_Y 3
     * }
     */
    public static int GLFW_GAMEPAD_AXIS_RIGHT_Y() {
        return GLFW_GAMEPAD_AXIS_RIGHT_Y;
    }
    private static final int GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_AXIS_LEFT_TRIGGER 4
     * }
     */
    public static int GLFW_GAMEPAD_AXIS_LEFT_TRIGGER() {
        return GLFW_GAMEPAD_AXIS_LEFT_TRIGGER;
    }
    private static final int GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER 5
     * }
     */
    public static int GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER() {
        return GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
    }
    private static final int GLFW_NO_ERROR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NO_ERROR 0
     * }
     */
    public static int GLFW_NO_ERROR() {
        return GLFW_NO_ERROR;
    }
    private static final int GLFW_NOT_INITIALIZED = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NOT_INITIALIZED 65537
     * }
     */
    public static int GLFW_NOT_INITIALIZED() {
        return GLFW_NOT_INITIALIZED;
    }
    private static final int GLFW_NO_CURRENT_CONTEXT = (int)65538L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NO_CURRENT_CONTEXT 65538
     * }
     */
    public static int GLFW_NO_CURRENT_CONTEXT() {
        return GLFW_NO_CURRENT_CONTEXT;
    }
    private static final int GLFW_INVALID_ENUM = (int)65539L;
    /**
     * {@snippet lang=c :
     * #define GLFW_INVALID_ENUM 65539
     * }
     */
    public static int GLFW_INVALID_ENUM() {
        return GLFW_INVALID_ENUM;
    }
    private static final int GLFW_INVALID_VALUE = (int)65540L;
    /**
     * {@snippet lang=c :
     * #define GLFW_INVALID_VALUE 65540
     * }
     */
    public static int GLFW_INVALID_VALUE() {
        return GLFW_INVALID_VALUE;
    }
    private static final int GLFW_OUT_OF_MEMORY = (int)65541L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OUT_OF_MEMORY 65541
     * }
     */
    public static int GLFW_OUT_OF_MEMORY() {
        return GLFW_OUT_OF_MEMORY;
    }
    private static final int GLFW_API_UNAVAILABLE = (int)65542L;
    /**
     * {@snippet lang=c :
     * #define GLFW_API_UNAVAILABLE 65542
     * }
     */
    public static int GLFW_API_UNAVAILABLE() {
        return GLFW_API_UNAVAILABLE;
    }
    private static final int GLFW_VERSION_UNAVAILABLE = (int)65543L;
    /**
     * {@snippet lang=c :
     * #define GLFW_VERSION_UNAVAILABLE 65543
     * }
     */
    public static int GLFW_VERSION_UNAVAILABLE() {
        return GLFW_VERSION_UNAVAILABLE;
    }
    private static final int GLFW_PLATFORM_ERROR = (int)65544L;
    /**
     * {@snippet lang=c :
     * #define GLFW_PLATFORM_ERROR 65544
     * }
     */
    public static int GLFW_PLATFORM_ERROR() {
        return GLFW_PLATFORM_ERROR;
    }
    private static final int GLFW_FORMAT_UNAVAILABLE = (int)65545L;
    /**
     * {@snippet lang=c :
     * #define GLFW_FORMAT_UNAVAILABLE 65545
     * }
     */
    public static int GLFW_FORMAT_UNAVAILABLE() {
        return GLFW_FORMAT_UNAVAILABLE;
    }
    private static final int GLFW_NO_WINDOW_CONTEXT = (int)65546L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NO_WINDOW_CONTEXT 65546
     * }
     */
    public static int GLFW_NO_WINDOW_CONTEXT() {
        return GLFW_NO_WINDOW_CONTEXT;
    }
    private static final int GLFW_CURSOR_UNAVAILABLE = (int)65547L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CURSOR_UNAVAILABLE 65547
     * }
     */
    public static int GLFW_CURSOR_UNAVAILABLE() {
        return GLFW_CURSOR_UNAVAILABLE;
    }
    private static final int GLFW_FEATURE_UNAVAILABLE = (int)65548L;
    /**
     * {@snippet lang=c :
     * #define GLFW_FEATURE_UNAVAILABLE 65548
     * }
     */
    public static int GLFW_FEATURE_UNAVAILABLE() {
        return GLFW_FEATURE_UNAVAILABLE;
    }
    private static final int GLFW_FEATURE_UNIMPLEMENTED = (int)65549L;
    /**
     * {@snippet lang=c :
     * #define GLFW_FEATURE_UNIMPLEMENTED 65549
     * }
     */
    public static int GLFW_FEATURE_UNIMPLEMENTED() {
        return GLFW_FEATURE_UNIMPLEMENTED;
    }
    private static final int GLFW_PLATFORM_UNAVAILABLE = (int)65550L;
    /**
     * {@snippet lang=c :
     * #define GLFW_PLATFORM_UNAVAILABLE 65550
     * }
     */
    public static int GLFW_PLATFORM_UNAVAILABLE() {
        return GLFW_PLATFORM_UNAVAILABLE;
    }
    private static final int GLFW_FOCUSED = (int)131073L;
    /**
     * {@snippet lang=c :
     * #define GLFW_FOCUSED 131073
     * }
     */
    public static int GLFW_FOCUSED() {
        return GLFW_FOCUSED;
    }
    private static final int GLFW_ICONIFIED = (int)131074L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ICONIFIED 131074
     * }
     */
    public static int GLFW_ICONIFIED() {
        return GLFW_ICONIFIED;
    }
    private static final int GLFW_RESIZABLE = (int)131075L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RESIZABLE 131075
     * }
     */
    public static int GLFW_RESIZABLE() {
        return GLFW_RESIZABLE;
    }
    private static final int GLFW_VISIBLE = (int)131076L;
    /**
     * {@snippet lang=c :
     * #define GLFW_VISIBLE 131076
     * }
     */
    public static int GLFW_VISIBLE() {
        return GLFW_VISIBLE;
    }
    private static final int GLFW_DECORATED = (int)131077L;
    /**
     * {@snippet lang=c :
     * #define GLFW_DECORATED 131077
     * }
     */
    public static int GLFW_DECORATED() {
        return GLFW_DECORATED;
    }
    private static final int GLFW_AUTO_ICONIFY = (int)131078L;
    /**
     * {@snippet lang=c :
     * #define GLFW_AUTO_ICONIFY 131078
     * }
     */
    public static int GLFW_AUTO_ICONIFY() {
        return GLFW_AUTO_ICONIFY;
    }
    private static final int GLFW_FLOATING = (int)131079L;
    /**
     * {@snippet lang=c :
     * #define GLFW_FLOATING 131079
     * }
     */
    public static int GLFW_FLOATING() {
        return GLFW_FLOATING;
    }
    private static final int GLFW_MAXIMIZED = (int)131080L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MAXIMIZED 131080
     * }
     */
    public static int GLFW_MAXIMIZED() {
        return GLFW_MAXIMIZED;
    }
    private static final int GLFW_CENTER_CURSOR = (int)131081L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CENTER_CURSOR 131081
     * }
     */
    public static int GLFW_CENTER_CURSOR() {
        return GLFW_CENTER_CURSOR;
    }
    private static final int GLFW_TRANSPARENT_FRAMEBUFFER = (int)131082L;
    /**
     * {@snippet lang=c :
     * #define GLFW_TRANSPARENT_FRAMEBUFFER 131082
     * }
     */
    public static int GLFW_TRANSPARENT_FRAMEBUFFER() {
        return GLFW_TRANSPARENT_FRAMEBUFFER;
    }
    private static final int GLFW_HOVERED = (int)131083L;
    /**
     * {@snippet lang=c :
     * #define GLFW_HOVERED 131083
     * }
     */
    public static int GLFW_HOVERED() {
        return GLFW_HOVERED;
    }
    private static final int GLFW_FOCUS_ON_SHOW = (int)131084L;
    /**
     * {@snippet lang=c :
     * #define GLFW_FOCUS_ON_SHOW 131084
     * }
     */
    public static int GLFW_FOCUS_ON_SHOW() {
        return GLFW_FOCUS_ON_SHOW;
    }
    private static final int GLFW_MOUSE_PASSTHROUGH = (int)131085L;
    /**
     * {@snippet lang=c :
     * #define GLFW_MOUSE_PASSTHROUGH 131085
     * }
     */
    public static int GLFW_MOUSE_PASSTHROUGH() {
        return GLFW_MOUSE_PASSTHROUGH;
    }
    private static final int GLFW_POSITION_X = (int)131086L;
    /**
     * {@snippet lang=c :
     * #define GLFW_POSITION_X 131086
     * }
     */
    public static int GLFW_POSITION_X() {
        return GLFW_POSITION_X;
    }
    private static final int GLFW_POSITION_Y = (int)131087L;
    /**
     * {@snippet lang=c :
     * #define GLFW_POSITION_Y 131087
     * }
     */
    public static int GLFW_POSITION_Y() {
        return GLFW_POSITION_Y;
    }
    private static final int GLFW_RED_BITS = (int)135169L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RED_BITS 135169
     * }
     */
    public static int GLFW_RED_BITS() {
        return GLFW_RED_BITS;
    }
    private static final int GLFW_GREEN_BITS = (int)135170L;
    /**
     * {@snippet lang=c :
     * #define GLFW_GREEN_BITS 135170
     * }
     */
    public static int GLFW_GREEN_BITS() {
        return GLFW_GREEN_BITS;
    }
    private static final int GLFW_BLUE_BITS = (int)135171L;
    /**
     * {@snippet lang=c :
     * #define GLFW_BLUE_BITS 135171
     * }
     */
    public static int GLFW_BLUE_BITS() {
        return GLFW_BLUE_BITS;
    }
    private static final int GLFW_ALPHA_BITS = (int)135172L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ALPHA_BITS 135172
     * }
     */
    public static int GLFW_ALPHA_BITS() {
        return GLFW_ALPHA_BITS;
    }
    private static final int GLFW_DEPTH_BITS = (int)135173L;
    /**
     * {@snippet lang=c :
     * #define GLFW_DEPTH_BITS 135173
     * }
     */
    public static int GLFW_DEPTH_BITS() {
        return GLFW_DEPTH_BITS;
    }
    private static final int GLFW_STENCIL_BITS = (int)135174L;
    /**
     * {@snippet lang=c :
     * #define GLFW_STENCIL_BITS 135174
     * }
     */
    public static int GLFW_STENCIL_BITS() {
        return GLFW_STENCIL_BITS;
    }
    private static final int GLFW_ACCUM_RED_BITS = (int)135175L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ACCUM_RED_BITS 135175
     * }
     */
    public static int GLFW_ACCUM_RED_BITS() {
        return GLFW_ACCUM_RED_BITS;
    }
    private static final int GLFW_ACCUM_GREEN_BITS = (int)135176L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ACCUM_GREEN_BITS 135176
     * }
     */
    public static int GLFW_ACCUM_GREEN_BITS() {
        return GLFW_ACCUM_GREEN_BITS;
    }
    private static final int GLFW_ACCUM_BLUE_BITS = (int)135177L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ACCUM_BLUE_BITS 135177
     * }
     */
    public static int GLFW_ACCUM_BLUE_BITS() {
        return GLFW_ACCUM_BLUE_BITS;
    }
    private static final int GLFW_ACCUM_ALPHA_BITS = (int)135178L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ACCUM_ALPHA_BITS 135178
     * }
     */
    public static int GLFW_ACCUM_ALPHA_BITS() {
        return GLFW_ACCUM_ALPHA_BITS;
    }
    private static final int GLFW_AUX_BUFFERS = (int)135179L;
    /**
     * {@snippet lang=c :
     * #define GLFW_AUX_BUFFERS 135179
     * }
     */
    public static int GLFW_AUX_BUFFERS() {
        return GLFW_AUX_BUFFERS;
    }
    private static final int GLFW_STEREO = (int)135180L;
    /**
     * {@snippet lang=c :
     * #define GLFW_STEREO 135180
     * }
     */
    public static int GLFW_STEREO() {
        return GLFW_STEREO;
    }
    private static final int GLFW_SAMPLES = (int)135181L;
    /**
     * {@snippet lang=c :
     * #define GLFW_SAMPLES 135181
     * }
     */
    public static int GLFW_SAMPLES() {
        return GLFW_SAMPLES;
    }
    private static final int GLFW_SRGB_CAPABLE = (int)135182L;
    /**
     * {@snippet lang=c :
     * #define GLFW_SRGB_CAPABLE 135182
     * }
     */
    public static int GLFW_SRGB_CAPABLE() {
        return GLFW_SRGB_CAPABLE;
    }
    private static final int GLFW_REFRESH_RATE = (int)135183L;
    /**
     * {@snippet lang=c :
     * #define GLFW_REFRESH_RATE 135183
     * }
     */
    public static int GLFW_REFRESH_RATE() {
        return GLFW_REFRESH_RATE;
    }
    private static final int GLFW_DOUBLEBUFFER = (int)135184L;
    /**
     * {@snippet lang=c :
     * #define GLFW_DOUBLEBUFFER 135184
     * }
     */
    public static int GLFW_DOUBLEBUFFER() {
        return GLFW_DOUBLEBUFFER;
    }
    private static final int GLFW_CLIENT_API = (int)139265L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CLIENT_API 139265
     * }
     */
    public static int GLFW_CLIENT_API() {
        return GLFW_CLIENT_API;
    }
    private static final int GLFW_CONTEXT_VERSION_MAJOR = (int)139266L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONTEXT_VERSION_MAJOR 139266
     * }
     */
    public static int GLFW_CONTEXT_VERSION_MAJOR() {
        return GLFW_CONTEXT_VERSION_MAJOR;
    }
    private static final int GLFW_CONTEXT_VERSION_MINOR = (int)139267L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONTEXT_VERSION_MINOR 139267
     * }
     */
    public static int GLFW_CONTEXT_VERSION_MINOR() {
        return GLFW_CONTEXT_VERSION_MINOR;
    }
    private static final int GLFW_CONTEXT_REVISION = (int)139268L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONTEXT_REVISION 139268
     * }
     */
    public static int GLFW_CONTEXT_REVISION() {
        return GLFW_CONTEXT_REVISION;
    }
    private static final int GLFW_CONTEXT_ROBUSTNESS = (int)139269L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONTEXT_ROBUSTNESS 139269
     * }
     */
    public static int GLFW_CONTEXT_ROBUSTNESS() {
        return GLFW_CONTEXT_ROBUSTNESS;
    }
    private static final int GLFW_OPENGL_FORWARD_COMPAT = (int)139270L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OPENGL_FORWARD_COMPAT 139270
     * }
     */
    public static int GLFW_OPENGL_FORWARD_COMPAT() {
        return GLFW_OPENGL_FORWARD_COMPAT;
    }
    private static final int GLFW_CONTEXT_DEBUG = (int)139271L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONTEXT_DEBUG 139271
     * }
     */
    public static int GLFW_CONTEXT_DEBUG() {
        return GLFW_CONTEXT_DEBUG;
    }
    private static final int GLFW_OPENGL_PROFILE = (int)139272L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OPENGL_PROFILE 139272
     * }
     */
    public static int GLFW_OPENGL_PROFILE() {
        return GLFW_OPENGL_PROFILE;
    }
    private static final int GLFW_CONTEXT_RELEASE_BEHAVIOR = (int)139273L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONTEXT_RELEASE_BEHAVIOR 139273
     * }
     */
    public static int GLFW_CONTEXT_RELEASE_BEHAVIOR() {
        return GLFW_CONTEXT_RELEASE_BEHAVIOR;
    }
    private static final int GLFW_CONTEXT_NO_ERROR = (int)139274L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONTEXT_NO_ERROR 139274
     * }
     */
    public static int GLFW_CONTEXT_NO_ERROR() {
        return GLFW_CONTEXT_NO_ERROR;
    }
    private static final int GLFW_CONTEXT_CREATION_API = (int)139275L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONTEXT_CREATION_API 139275
     * }
     */
    public static int GLFW_CONTEXT_CREATION_API() {
        return GLFW_CONTEXT_CREATION_API;
    }
    private static final int GLFW_SCALE_TO_MONITOR = (int)139276L;
    /**
     * {@snippet lang=c :
     * #define GLFW_SCALE_TO_MONITOR 139276
     * }
     */
    public static int GLFW_SCALE_TO_MONITOR() {
        return GLFW_SCALE_TO_MONITOR;
    }
    private static final int GLFW_SCALE_FRAMEBUFFER = (int)139277L;
    /**
     * {@snippet lang=c :
     * #define GLFW_SCALE_FRAMEBUFFER 139277
     * }
     */
    public static int GLFW_SCALE_FRAMEBUFFER() {
        return GLFW_SCALE_FRAMEBUFFER;
    }
    private static final int GLFW_COCOA_RETINA_FRAMEBUFFER = (int)143361L;
    /**
     * {@snippet lang=c :
     * #define GLFW_COCOA_RETINA_FRAMEBUFFER 143361
     * }
     */
    public static int GLFW_COCOA_RETINA_FRAMEBUFFER() {
        return GLFW_COCOA_RETINA_FRAMEBUFFER;
    }
    private static final int GLFW_COCOA_FRAME_NAME = (int)143362L;
    /**
     * {@snippet lang=c :
     * #define GLFW_COCOA_FRAME_NAME 143362
     * }
     */
    public static int GLFW_COCOA_FRAME_NAME() {
        return GLFW_COCOA_FRAME_NAME;
    }
    private static final int GLFW_COCOA_GRAPHICS_SWITCHING = (int)143363L;
    /**
     * {@snippet lang=c :
     * #define GLFW_COCOA_GRAPHICS_SWITCHING 143363
     * }
     */
    public static int GLFW_COCOA_GRAPHICS_SWITCHING() {
        return GLFW_COCOA_GRAPHICS_SWITCHING;
    }
    private static final int GLFW_X11_CLASS_NAME = (int)147457L;
    /**
     * {@snippet lang=c :
     * #define GLFW_X11_CLASS_NAME 147457
     * }
     */
    public static int GLFW_X11_CLASS_NAME() {
        return GLFW_X11_CLASS_NAME;
    }
    private static final int GLFW_X11_INSTANCE_NAME = (int)147458L;
    /**
     * {@snippet lang=c :
     * #define GLFW_X11_INSTANCE_NAME 147458
     * }
     */
    public static int GLFW_X11_INSTANCE_NAME() {
        return GLFW_X11_INSTANCE_NAME;
    }
    private static final int GLFW_WIN32_KEYBOARD_MENU = (int)151553L;
    /**
     * {@snippet lang=c :
     * #define GLFW_WIN32_KEYBOARD_MENU 151553
     * }
     */
    public static int GLFW_WIN32_KEYBOARD_MENU() {
        return GLFW_WIN32_KEYBOARD_MENU;
    }
    private static final int GLFW_WIN32_SHOWDEFAULT = (int)151554L;
    /**
     * {@snippet lang=c :
     * #define GLFW_WIN32_SHOWDEFAULT 151554
     * }
     */
    public static int GLFW_WIN32_SHOWDEFAULT() {
        return GLFW_WIN32_SHOWDEFAULT;
    }
    private static final int GLFW_WAYLAND_APP_ID = (int)155649L;
    /**
     * {@snippet lang=c :
     * #define GLFW_WAYLAND_APP_ID 155649
     * }
     */
    public static int GLFW_WAYLAND_APP_ID() {
        return GLFW_WAYLAND_APP_ID;
    }
    private static final int GLFW_NO_API = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NO_API 0
     * }
     */
    public static int GLFW_NO_API() {
        return GLFW_NO_API;
    }
    private static final int GLFW_OPENGL_API = (int)196609L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OPENGL_API 196609
     * }
     */
    public static int GLFW_OPENGL_API() {
        return GLFW_OPENGL_API;
    }
    private static final int GLFW_OPENGL_ES_API = (int)196610L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OPENGL_ES_API 196610
     * }
     */
    public static int GLFW_OPENGL_ES_API() {
        return GLFW_OPENGL_ES_API;
    }
    private static final int GLFW_NO_ROBUSTNESS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NO_ROBUSTNESS 0
     * }
     */
    public static int GLFW_NO_ROBUSTNESS() {
        return GLFW_NO_ROBUSTNESS;
    }
    private static final int GLFW_NO_RESET_NOTIFICATION = (int)200705L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NO_RESET_NOTIFICATION 200705
     * }
     */
    public static int GLFW_NO_RESET_NOTIFICATION() {
        return GLFW_NO_RESET_NOTIFICATION;
    }
    private static final int GLFW_LOSE_CONTEXT_ON_RESET = (int)200706L;
    /**
     * {@snippet lang=c :
     * #define GLFW_LOSE_CONTEXT_ON_RESET 200706
     * }
     */
    public static int GLFW_LOSE_CONTEXT_ON_RESET() {
        return GLFW_LOSE_CONTEXT_ON_RESET;
    }
    private static final int GLFW_OPENGL_ANY_PROFILE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OPENGL_ANY_PROFILE 0
     * }
     */
    public static int GLFW_OPENGL_ANY_PROFILE() {
        return GLFW_OPENGL_ANY_PROFILE;
    }
    private static final int GLFW_OPENGL_CORE_PROFILE = (int)204801L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OPENGL_CORE_PROFILE 204801
     * }
     */
    public static int GLFW_OPENGL_CORE_PROFILE() {
        return GLFW_OPENGL_CORE_PROFILE;
    }
    private static final int GLFW_OPENGL_COMPAT_PROFILE = (int)204802L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OPENGL_COMPAT_PROFILE 204802
     * }
     */
    public static int GLFW_OPENGL_COMPAT_PROFILE() {
        return GLFW_OPENGL_COMPAT_PROFILE;
    }
    private static final int GLFW_CURSOR = (int)208897L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CURSOR 208897
     * }
     */
    public static int GLFW_CURSOR() {
        return GLFW_CURSOR;
    }
    private static final int GLFW_STICKY_KEYS = (int)208898L;
    /**
     * {@snippet lang=c :
     * #define GLFW_STICKY_KEYS 208898
     * }
     */
    public static int GLFW_STICKY_KEYS() {
        return GLFW_STICKY_KEYS;
    }
    private static final int GLFW_STICKY_MOUSE_BUTTONS = (int)208899L;
    /**
     * {@snippet lang=c :
     * #define GLFW_STICKY_MOUSE_BUTTONS 208899
     * }
     */
    public static int GLFW_STICKY_MOUSE_BUTTONS() {
        return GLFW_STICKY_MOUSE_BUTTONS;
    }
    private static final int GLFW_LOCK_KEY_MODS = (int)208900L;
    /**
     * {@snippet lang=c :
     * #define GLFW_LOCK_KEY_MODS 208900
     * }
     */
    public static int GLFW_LOCK_KEY_MODS() {
        return GLFW_LOCK_KEY_MODS;
    }
    private static final int GLFW_RAW_MOUSE_MOTION = (int)208901L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RAW_MOUSE_MOTION 208901
     * }
     */
    public static int GLFW_RAW_MOUSE_MOTION() {
        return GLFW_RAW_MOUSE_MOTION;
    }
    private static final int GLFW_CURSOR_NORMAL = (int)212993L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CURSOR_NORMAL 212993
     * }
     */
    public static int GLFW_CURSOR_NORMAL() {
        return GLFW_CURSOR_NORMAL;
    }
    private static final int GLFW_CURSOR_HIDDEN = (int)212994L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CURSOR_HIDDEN 212994
     * }
     */
    public static int GLFW_CURSOR_HIDDEN() {
        return GLFW_CURSOR_HIDDEN;
    }
    private static final int GLFW_CURSOR_DISABLED = (int)212995L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CURSOR_DISABLED 212995
     * }
     */
    public static int GLFW_CURSOR_DISABLED() {
        return GLFW_CURSOR_DISABLED;
    }
    private static final int GLFW_CURSOR_CAPTURED = (int)212996L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CURSOR_CAPTURED 212996
     * }
     */
    public static int GLFW_CURSOR_CAPTURED() {
        return GLFW_CURSOR_CAPTURED;
    }
    private static final int GLFW_ANY_RELEASE_BEHAVIOR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANY_RELEASE_BEHAVIOR 0
     * }
     */
    public static int GLFW_ANY_RELEASE_BEHAVIOR() {
        return GLFW_ANY_RELEASE_BEHAVIOR;
    }
    private static final int GLFW_RELEASE_BEHAVIOR_FLUSH = (int)217089L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RELEASE_BEHAVIOR_FLUSH 217089
     * }
     */
    public static int GLFW_RELEASE_BEHAVIOR_FLUSH() {
        return GLFW_RELEASE_BEHAVIOR_FLUSH;
    }
    private static final int GLFW_RELEASE_BEHAVIOR_NONE = (int)217090L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RELEASE_BEHAVIOR_NONE 217090
     * }
     */
    public static int GLFW_RELEASE_BEHAVIOR_NONE() {
        return GLFW_RELEASE_BEHAVIOR_NONE;
    }
    private static final int GLFW_NATIVE_CONTEXT_API = (int)221185L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NATIVE_CONTEXT_API 221185
     * }
     */
    public static int GLFW_NATIVE_CONTEXT_API() {
        return GLFW_NATIVE_CONTEXT_API;
    }
    private static final int GLFW_EGL_CONTEXT_API = (int)221186L;
    /**
     * {@snippet lang=c :
     * #define GLFW_EGL_CONTEXT_API 221186
     * }
     */
    public static int GLFW_EGL_CONTEXT_API() {
        return GLFW_EGL_CONTEXT_API;
    }
    private static final int GLFW_OSMESA_CONTEXT_API = (int)221187L;
    /**
     * {@snippet lang=c :
     * #define GLFW_OSMESA_CONTEXT_API 221187
     * }
     */
    public static int GLFW_OSMESA_CONTEXT_API() {
        return GLFW_OSMESA_CONTEXT_API;
    }
    private static final int GLFW_ANGLE_PLATFORM_TYPE_NONE = (int)225281L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANGLE_PLATFORM_TYPE_NONE 225281
     * }
     */
    public static int GLFW_ANGLE_PLATFORM_TYPE_NONE() {
        return GLFW_ANGLE_PLATFORM_TYPE_NONE;
    }
    private static final int GLFW_ANGLE_PLATFORM_TYPE_OPENGL = (int)225282L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANGLE_PLATFORM_TYPE_OPENGL 225282
     * }
     */
    public static int GLFW_ANGLE_PLATFORM_TYPE_OPENGL() {
        return GLFW_ANGLE_PLATFORM_TYPE_OPENGL;
    }
    private static final int GLFW_ANGLE_PLATFORM_TYPE_OPENGLES = (int)225283L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANGLE_PLATFORM_TYPE_OPENGLES 225283
     * }
     */
    public static int GLFW_ANGLE_PLATFORM_TYPE_OPENGLES() {
        return GLFW_ANGLE_PLATFORM_TYPE_OPENGLES;
    }
    private static final int GLFW_ANGLE_PLATFORM_TYPE_D3D9 = (int)225284L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANGLE_PLATFORM_TYPE_D3D9 225284
     * }
     */
    public static int GLFW_ANGLE_PLATFORM_TYPE_D3D9() {
        return GLFW_ANGLE_PLATFORM_TYPE_D3D9;
    }
    private static final int GLFW_ANGLE_PLATFORM_TYPE_D3D11 = (int)225285L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANGLE_PLATFORM_TYPE_D3D11 225285
     * }
     */
    public static int GLFW_ANGLE_PLATFORM_TYPE_D3D11() {
        return GLFW_ANGLE_PLATFORM_TYPE_D3D11;
    }
    private static final int GLFW_ANGLE_PLATFORM_TYPE_VULKAN = (int)225287L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANGLE_PLATFORM_TYPE_VULKAN 225287
     * }
     */
    public static int GLFW_ANGLE_PLATFORM_TYPE_VULKAN() {
        return GLFW_ANGLE_PLATFORM_TYPE_VULKAN;
    }
    private static final int GLFW_ANGLE_PLATFORM_TYPE_METAL = (int)225288L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANGLE_PLATFORM_TYPE_METAL 225288
     * }
     */
    public static int GLFW_ANGLE_PLATFORM_TYPE_METAL() {
        return GLFW_ANGLE_PLATFORM_TYPE_METAL;
    }
    private static final int GLFW_WAYLAND_PREFER_LIBDECOR = (int)229377L;
    /**
     * {@snippet lang=c :
     * #define GLFW_WAYLAND_PREFER_LIBDECOR 229377
     * }
     */
    public static int GLFW_WAYLAND_PREFER_LIBDECOR() {
        return GLFW_WAYLAND_PREFER_LIBDECOR;
    }
    private static final int GLFW_WAYLAND_DISABLE_LIBDECOR = (int)229378L;
    /**
     * {@snippet lang=c :
     * #define GLFW_WAYLAND_DISABLE_LIBDECOR 229378
     * }
     */
    public static int GLFW_WAYLAND_DISABLE_LIBDECOR() {
        return GLFW_WAYLAND_DISABLE_LIBDECOR;
    }
    private static final int GLFW_ARROW_CURSOR = (int)221185L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ARROW_CURSOR 221185
     * }
     */
    public static int GLFW_ARROW_CURSOR() {
        return GLFW_ARROW_CURSOR;
    }
    private static final int GLFW_IBEAM_CURSOR = (int)221186L;
    /**
     * {@snippet lang=c :
     * #define GLFW_IBEAM_CURSOR 221186
     * }
     */
    public static int GLFW_IBEAM_CURSOR() {
        return GLFW_IBEAM_CURSOR;
    }
    private static final int GLFW_CROSSHAIR_CURSOR = (int)221187L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CROSSHAIR_CURSOR 221187
     * }
     */
    public static int GLFW_CROSSHAIR_CURSOR() {
        return GLFW_CROSSHAIR_CURSOR;
    }
    private static final int GLFW_POINTING_HAND_CURSOR = (int)221188L;
    /**
     * {@snippet lang=c :
     * #define GLFW_POINTING_HAND_CURSOR 221188
     * }
     */
    public static int GLFW_POINTING_HAND_CURSOR() {
        return GLFW_POINTING_HAND_CURSOR;
    }
    private static final int GLFW_RESIZE_EW_CURSOR = (int)221189L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RESIZE_EW_CURSOR 221189
     * }
     */
    public static int GLFW_RESIZE_EW_CURSOR() {
        return GLFW_RESIZE_EW_CURSOR;
    }
    private static final int GLFW_RESIZE_NS_CURSOR = (int)221190L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RESIZE_NS_CURSOR 221190
     * }
     */
    public static int GLFW_RESIZE_NS_CURSOR() {
        return GLFW_RESIZE_NS_CURSOR;
    }
    private static final int GLFW_RESIZE_NWSE_CURSOR = (int)221191L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RESIZE_NWSE_CURSOR 221191
     * }
     */
    public static int GLFW_RESIZE_NWSE_CURSOR() {
        return GLFW_RESIZE_NWSE_CURSOR;
    }
    private static final int GLFW_RESIZE_NESW_CURSOR = (int)221192L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RESIZE_NESW_CURSOR 221192
     * }
     */
    public static int GLFW_RESIZE_NESW_CURSOR() {
        return GLFW_RESIZE_NESW_CURSOR;
    }
    private static final int GLFW_RESIZE_ALL_CURSOR = (int)221193L;
    /**
     * {@snippet lang=c :
     * #define GLFW_RESIZE_ALL_CURSOR 221193
     * }
     */
    public static int GLFW_RESIZE_ALL_CURSOR() {
        return GLFW_RESIZE_ALL_CURSOR;
    }
    private static final int GLFW_NOT_ALLOWED_CURSOR = (int)221194L;
    /**
     * {@snippet lang=c :
     * #define GLFW_NOT_ALLOWED_CURSOR 221194
     * }
     */
    public static int GLFW_NOT_ALLOWED_CURSOR() {
        return GLFW_NOT_ALLOWED_CURSOR;
    }
    private static final int GLFW_CONNECTED = (int)262145L;
    /**
     * {@snippet lang=c :
     * #define GLFW_CONNECTED 262145
     * }
     */
    public static int GLFW_CONNECTED() {
        return GLFW_CONNECTED;
    }
    private static final int GLFW_DISCONNECTED = (int)262146L;
    /**
     * {@snippet lang=c :
     * #define GLFW_DISCONNECTED 262146
     * }
     */
    public static int GLFW_DISCONNECTED() {
        return GLFW_DISCONNECTED;
    }
    private static final int GLFW_JOYSTICK_HAT_BUTTONS = (int)327681L;
    /**
     * {@snippet lang=c :
     * #define GLFW_JOYSTICK_HAT_BUTTONS 327681
     * }
     */
    public static int GLFW_JOYSTICK_HAT_BUTTONS() {
        return GLFW_JOYSTICK_HAT_BUTTONS;
    }
    private static final int GLFW_ANGLE_PLATFORM_TYPE = (int)327682L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANGLE_PLATFORM_TYPE 327682
     * }
     */
    public static int GLFW_ANGLE_PLATFORM_TYPE() {
        return GLFW_ANGLE_PLATFORM_TYPE;
    }
    private static final int GLFW_PLATFORM = (int)327683L;
    /**
     * {@snippet lang=c :
     * #define GLFW_PLATFORM 327683
     * }
     */
    public static int GLFW_PLATFORM() {
        return GLFW_PLATFORM;
    }
    private static final int GLFW_COCOA_CHDIR_RESOURCES = (int)331777L;
    /**
     * {@snippet lang=c :
     * #define GLFW_COCOA_CHDIR_RESOURCES 331777
     * }
     */
    public static int GLFW_COCOA_CHDIR_RESOURCES() {
        return GLFW_COCOA_CHDIR_RESOURCES;
    }
    private static final int GLFW_COCOA_MENUBAR = (int)331778L;
    /**
     * {@snippet lang=c :
     * #define GLFW_COCOA_MENUBAR 331778
     * }
     */
    public static int GLFW_COCOA_MENUBAR() {
        return GLFW_COCOA_MENUBAR;
    }
    private static final int GLFW_X11_XCB_VULKAN_SURFACE = (int)335873L;
    /**
     * {@snippet lang=c :
     * #define GLFW_X11_XCB_VULKAN_SURFACE 335873
     * }
     */
    public static int GLFW_X11_XCB_VULKAN_SURFACE() {
        return GLFW_X11_XCB_VULKAN_SURFACE;
    }
    private static final int GLFW_WAYLAND_LIBDECOR = (int)339969L;
    /**
     * {@snippet lang=c :
     * #define GLFW_WAYLAND_LIBDECOR 339969
     * }
     */
    public static int GLFW_WAYLAND_LIBDECOR() {
        return GLFW_WAYLAND_LIBDECOR;
    }
    private static final int GLFW_ANY_PLATFORM = (int)393216L;
    /**
     * {@snippet lang=c :
     * #define GLFW_ANY_PLATFORM 393216
     * }
     */
    public static int GLFW_ANY_PLATFORM() {
        return GLFW_ANY_PLATFORM;
    }
    private static final int GLFW_PLATFORM_WIN32 = (int)393217L;
    /**
     * {@snippet lang=c :
     * #define GLFW_PLATFORM_WIN32 393217
     * }
     */
    public static int GLFW_PLATFORM_WIN32() {
        return GLFW_PLATFORM_WIN32;
    }
    private static final int GLFW_PLATFORM_COCOA = (int)393218L;
    /**
     * {@snippet lang=c :
     * #define GLFW_PLATFORM_COCOA 393218
     * }
     */
    public static int GLFW_PLATFORM_COCOA() {
        return GLFW_PLATFORM_COCOA;
    }
    private static final int GLFW_PLATFORM_WAYLAND = (int)393219L;
    /**
     * {@snippet lang=c :
     * #define GLFW_PLATFORM_WAYLAND 393219
     * }
     */
    public static int GLFW_PLATFORM_WAYLAND() {
        return GLFW_PLATFORM_WAYLAND;
    }
    private static final int GLFW_PLATFORM_X11 = (int)393220L;
    /**
     * {@snippet lang=c :
     * #define GLFW_PLATFORM_X11 393220
     * }
     */
    public static int GLFW_PLATFORM_X11() {
        return GLFW_PLATFORM_X11;
    }
    private static final int GLFW_PLATFORM_NULL = (int)393221L;
    /**
     * {@snippet lang=c :
     * #define GLFW_PLATFORM_NULL 393221
     * }
     */
    public static int GLFW_PLATFORM_NULL() {
        return GLFW_PLATFORM_NULL;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = glcore.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = glcore.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int32_t khronos_int32_t
     * }
     */
    public static final OfInt khronos_int32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t khronos_uint32_t
     * }
     */
    public static final OfInt khronos_uint32_t = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t khronos_int64_t
     * }
     */
    public static final OfLong khronos_int64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint64_t khronos_uint64_t
     * }
     */
    public static final OfLong khronos_uint64_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char khronos_int8_t
     * }
     */
    public static final OfByte khronos_int8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char khronos_uint8_t
     * }
     */
    public static final OfByte khronos_uint8_t = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short khronos_int16_t
     * }
     */
    public static final OfShort khronos_int16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short khronos_uint16_t
     * }
     */
    public static final OfShort khronos_uint16_t = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef long khronos_intptr_t
     * }
     */
    public static final OfLong khronos_intptr_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long khronos_uintptr_t
     * }
     */
    public static final OfLong khronos_uintptr_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long khronos_ssize_t
     * }
     */
    public static final OfLong khronos_ssize_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long khronos_usize_t
     * }
     */
    public static final OfLong khronos_usize_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef float khronos_float_t
     * }
     */
    public static final OfFloat khronos_float_t = glcore.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef khronos_uint64_t khronos_utime_nanoseconds_t
     * }
     */
    public static final OfLong khronos_utime_nanoseconds_t = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef khronos_int64_t khronos_stime_nanoseconds_t
     * }
     */
    public static final OfLong khronos_stime_nanoseconds_t = glcore.C_LONG;
    private static final int KHRONOS_FALSE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.KHRONOS_FALSE = 0
     * }
     */
    public static int KHRONOS_FALSE() {
        return KHRONOS_FALSE;
    }
    private static final int KHRONOS_TRUE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.KHRONOS_TRUE = 1
     * }
     */
    public static int KHRONOS_TRUE() {
        return KHRONOS_TRUE;
    }
    private static final int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 2147483647
     * }
     */
    public static int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE() {
        return KHRONOS_BOOLEAN_ENUM_FORCE_SIZE;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned int GLenum
     * }
     */
    public static final OfInt GLenum = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned char GLboolean
     * }
     */
    public static final OfByte GLboolean = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned int GLbitfield
     * }
     */
    public static final OfInt GLbitfield = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef khronos_int8_t GLbyte
     * }
     */
    public static final OfByte GLbyte = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef khronos_uint8_t GLubyte
     * }
     */
    public static final OfByte GLubyte = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef khronos_int16_t GLshort
     * }
     */
    public static final OfShort GLshort = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef khronos_uint16_t GLushort
     * }
     */
    public static final OfShort GLushort = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int GLint
     * }
     */
    public static final OfInt GLint = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int GLuint
     * }
     */
    public static final OfInt GLuint = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef khronos_int32_t GLclampx
     * }
     */
    public static final OfInt GLclampx = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int GLsizei
     * }
     */
    public static final OfInt GLsizei = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef khronos_float_t GLfloat
     * }
     */
    public static final OfFloat GLfloat = glcore.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef khronos_float_t GLclampf
     * }
     */
    public static final OfFloat GLclampf = glcore.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double GLdouble
     * }
     */
    public static final OfDouble GLdouble = glcore.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double GLclampd
     * }
     */
    public static final OfDouble GLclampd = glcore.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef void *GLeglClientBufferEXT
     * }
     */
    public static final AddressLayout GLeglClientBufferEXT = glcore.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *GLeglImageOES
     * }
     */
    public static final AddressLayout GLeglImageOES = glcore.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef char GLchar
     * }
     */
    public static final OfByte GLchar = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef char GLcharARB
     * }
     */
    public static final OfByte GLcharARB = glcore.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned int GLhandleARB
     * }
     */
    public static final OfInt GLhandleARB = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef khronos_uint16_t GLhalf
     * }
     */
    public static final OfShort GLhalf = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef khronos_uint16_t GLhalfARB
     * }
     */
    public static final OfShort GLhalfARB = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef khronos_int32_t GLfixed
     * }
     */
    public static final OfInt GLfixed = glcore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef khronos_intptr_t GLintptr
     * }
     */
    public static final OfLong GLintptr = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef khronos_intptr_t GLintptrARB
     * }
     */
    public static final OfLong GLintptrARB = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef khronos_ssize_t GLsizeiptr
     * }
     */
    public static final OfLong GLsizeiptr = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef khronos_ssize_t GLsizeiptrARB
     * }
     */
    public static final OfLong GLsizeiptrARB = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef khronos_int64_t GLint64
     * }
     */
    public static final OfLong GLint64 = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef khronos_int64_t GLint64EXT
     * }
     */
    public static final OfLong GLint64EXT = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef khronos_uint64_t GLuint64
     * }
     */
    public static final OfLong GLuint64 = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef khronos_uint64_t GLuint64EXT
     * }
     */
    public static final OfLong GLuint64EXT = glcore.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct __GLsync *GLsync
     * }
     */
    public static final AddressLayout GLsync = glcore.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short GLhalfNV
     * }
     */
    public static final OfShort GLhalfNV = glcore.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef GLintptr GLvdpauSurfaceNV
     * }
     */
    public static final OfLong GLvdpauSurfaceNV = glcore.C_LONG;

    private static class GLAD_GL_VERSION_1_0$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_1_0").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_0
     * }
     */
    public static OfInt GLAD_GL_VERSION_1_0$layout() {
        return GLAD_GL_VERSION_1_0$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_0
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_1_0$segment() {
        return GLAD_GL_VERSION_1_0$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_0
     * }
     */
    public static int GLAD_GL_VERSION_1_0() {
        return GLAD_GL_VERSION_1_0$constants.SEGMENT.get(GLAD_GL_VERSION_1_0$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_0
     * }
     */
    public static void GLAD_GL_VERSION_1_0(int varValue) {
        GLAD_GL_VERSION_1_0$constants.SEGMENT.set(GLAD_GL_VERSION_1_0$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_1_1$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_1_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_1
     * }
     */
    public static OfInt GLAD_GL_VERSION_1_1$layout() {
        return GLAD_GL_VERSION_1_1$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_1
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_1_1$segment() {
        return GLAD_GL_VERSION_1_1$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_1
     * }
     */
    public static int GLAD_GL_VERSION_1_1() {
        return GLAD_GL_VERSION_1_1$constants.SEGMENT.get(GLAD_GL_VERSION_1_1$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_1
     * }
     */
    public static void GLAD_GL_VERSION_1_1(int varValue) {
        GLAD_GL_VERSION_1_1$constants.SEGMENT.set(GLAD_GL_VERSION_1_1$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_1_2$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_1_2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_2
     * }
     */
    public static OfInt GLAD_GL_VERSION_1_2$layout() {
        return GLAD_GL_VERSION_1_2$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_2
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_1_2$segment() {
        return GLAD_GL_VERSION_1_2$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_2
     * }
     */
    public static int GLAD_GL_VERSION_1_2() {
        return GLAD_GL_VERSION_1_2$constants.SEGMENT.get(GLAD_GL_VERSION_1_2$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_2
     * }
     */
    public static void GLAD_GL_VERSION_1_2(int varValue) {
        GLAD_GL_VERSION_1_2$constants.SEGMENT.set(GLAD_GL_VERSION_1_2$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_1_3$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_1_3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_3
     * }
     */
    public static OfInt GLAD_GL_VERSION_1_3$layout() {
        return GLAD_GL_VERSION_1_3$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_3
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_1_3$segment() {
        return GLAD_GL_VERSION_1_3$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_3
     * }
     */
    public static int GLAD_GL_VERSION_1_3() {
        return GLAD_GL_VERSION_1_3$constants.SEGMENT.get(GLAD_GL_VERSION_1_3$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_3
     * }
     */
    public static void GLAD_GL_VERSION_1_3(int varValue) {
        GLAD_GL_VERSION_1_3$constants.SEGMENT.set(GLAD_GL_VERSION_1_3$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_1_4$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_1_4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_4
     * }
     */
    public static OfInt GLAD_GL_VERSION_1_4$layout() {
        return GLAD_GL_VERSION_1_4$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_4
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_1_4$segment() {
        return GLAD_GL_VERSION_1_4$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_4
     * }
     */
    public static int GLAD_GL_VERSION_1_4() {
        return GLAD_GL_VERSION_1_4$constants.SEGMENT.get(GLAD_GL_VERSION_1_4$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_4
     * }
     */
    public static void GLAD_GL_VERSION_1_4(int varValue) {
        GLAD_GL_VERSION_1_4$constants.SEGMENT.set(GLAD_GL_VERSION_1_4$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_1_5$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_1_5").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_5
     * }
     */
    public static OfInt GLAD_GL_VERSION_1_5$layout() {
        return GLAD_GL_VERSION_1_5$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_5
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_1_5$segment() {
        return GLAD_GL_VERSION_1_5$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_5
     * }
     */
    public static int GLAD_GL_VERSION_1_5() {
        return GLAD_GL_VERSION_1_5$constants.SEGMENT.get(GLAD_GL_VERSION_1_5$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_1_5
     * }
     */
    public static void GLAD_GL_VERSION_1_5(int varValue) {
        GLAD_GL_VERSION_1_5$constants.SEGMENT.set(GLAD_GL_VERSION_1_5$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_2_0$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_2_0").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_2_0
     * }
     */
    public static OfInt GLAD_GL_VERSION_2_0$layout() {
        return GLAD_GL_VERSION_2_0$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_2_0
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_2_0$segment() {
        return GLAD_GL_VERSION_2_0$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_2_0
     * }
     */
    public static int GLAD_GL_VERSION_2_0() {
        return GLAD_GL_VERSION_2_0$constants.SEGMENT.get(GLAD_GL_VERSION_2_0$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_2_0
     * }
     */
    public static void GLAD_GL_VERSION_2_0(int varValue) {
        GLAD_GL_VERSION_2_0$constants.SEGMENT.set(GLAD_GL_VERSION_2_0$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_2_1$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_2_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_2_1
     * }
     */
    public static OfInt GLAD_GL_VERSION_2_1$layout() {
        return GLAD_GL_VERSION_2_1$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_2_1
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_2_1$segment() {
        return GLAD_GL_VERSION_2_1$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_2_1
     * }
     */
    public static int GLAD_GL_VERSION_2_1() {
        return GLAD_GL_VERSION_2_1$constants.SEGMENT.get(GLAD_GL_VERSION_2_1$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_2_1
     * }
     */
    public static void GLAD_GL_VERSION_2_1(int varValue) {
        GLAD_GL_VERSION_2_1$constants.SEGMENT.set(GLAD_GL_VERSION_2_1$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_3_0$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_3_0").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_0
     * }
     */
    public static OfInt GLAD_GL_VERSION_3_0$layout() {
        return GLAD_GL_VERSION_3_0$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_0
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_3_0$segment() {
        return GLAD_GL_VERSION_3_0$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_0
     * }
     */
    public static int GLAD_GL_VERSION_3_0() {
        return GLAD_GL_VERSION_3_0$constants.SEGMENT.get(GLAD_GL_VERSION_3_0$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_0
     * }
     */
    public static void GLAD_GL_VERSION_3_0(int varValue) {
        GLAD_GL_VERSION_3_0$constants.SEGMENT.set(GLAD_GL_VERSION_3_0$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_3_1$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_3_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_1
     * }
     */
    public static OfInt GLAD_GL_VERSION_3_1$layout() {
        return GLAD_GL_VERSION_3_1$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_1
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_3_1$segment() {
        return GLAD_GL_VERSION_3_1$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_1
     * }
     */
    public static int GLAD_GL_VERSION_3_1() {
        return GLAD_GL_VERSION_3_1$constants.SEGMENT.get(GLAD_GL_VERSION_3_1$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_1
     * }
     */
    public static void GLAD_GL_VERSION_3_1(int varValue) {
        GLAD_GL_VERSION_3_1$constants.SEGMENT.set(GLAD_GL_VERSION_3_1$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_3_2$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_3_2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_2
     * }
     */
    public static OfInt GLAD_GL_VERSION_3_2$layout() {
        return GLAD_GL_VERSION_3_2$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_2
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_3_2$segment() {
        return GLAD_GL_VERSION_3_2$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_2
     * }
     */
    public static int GLAD_GL_VERSION_3_2() {
        return GLAD_GL_VERSION_3_2$constants.SEGMENT.get(GLAD_GL_VERSION_3_2$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_2
     * }
     */
    public static void GLAD_GL_VERSION_3_2(int varValue) {
        GLAD_GL_VERSION_3_2$constants.SEGMENT.set(GLAD_GL_VERSION_3_2$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_3_3$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_3_3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_3
     * }
     */
    public static OfInt GLAD_GL_VERSION_3_3$layout() {
        return GLAD_GL_VERSION_3_3$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_3
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_3_3$segment() {
        return GLAD_GL_VERSION_3_3$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_3
     * }
     */
    public static int GLAD_GL_VERSION_3_3() {
        return GLAD_GL_VERSION_3_3$constants.SEGMENT.get(GLAD_GL_VERSION_3_3$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_3_3
     * }
     */
    public static void GLAD_GL_VERSION_3_3(int varValue) {
        GLAD_GL_VERSION_3_3$constants.SEGMENT.set(GLAD_GL_VERSION_3_3$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_4_0$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_4_0").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_0
     * }
     */
    public static OfInt GLAD_GL_VERSION_4_0$layout() {
        return GLAD_GL_VERSION_4_0$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_0
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_4_0$segment() {
        return GLAD_GL_VERSION_4_0$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_0
     * }
     */
    public static int GLAD_GL_VERSION_4_0() {
        return GLAD_GL_VERSION_4_0$constants.SEGMENT.get(GLAD_GL_VERSION_4_0$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_0
     * }
     */
    public static void GLAD_GL_VERSION_4_0(int varValue) {
        GLAD_GL_VERSION_4_0$constants.SEGMENT.set(GLAD_GL_VERSION_4_0$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_4_1$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_4_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_1
     * }
     */
    public static OfInt GLAD_GL_VERSION_4_1$layout() {
        return GLAD_GL_VERSION_4_1$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_1
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_4_1$segment() {
        return GLAD_GL_VERSION_4_1$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_1
     * }
     */
    public static int GLAD_GL_VERSION_4_1() {
        return GLAD_GL_VERSION_4_1$constants.SEGMENT.get(GLAD_GL_VERSION_4_1$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_1
     * }
     */
    public static void GLAD_GL_VERSION_4_1(int varValue) {
        GLAD_GL_VERSION_4_1$constants.SEGMENT.set(GLAD_GL_VERSION_4_1$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_4_2$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_4_2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_2
     * }
     */
    public static OfInt GLAD_GL_VERSION_4_2$layout() {
        return GLAD_GL_VERSION_4_2$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_2
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_4_2$segment() {
        return GLAD_GL_VERSION_4_2$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_2
     * }
     */
    public static int GLAD_GL_VERSION_4_2() {
        return GLAD_GL_VERSION_4_2$constants.SEGMENT.get(GLAD_GL_VERSION_4_2$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_2
     * }
     */
    public static void GLAD_GL_VERSION_4_2(int varValue) {
        GLAD_GL_VERSION_4_2$constants.SEGMENT.set(GLAD_GL_VERSION_4_2$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_4_3$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_4_3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_3
     * }
     */
    public static OfInt GLAD_GL_VERSION_4_3$layout() {
        return GLAD_GL_VERSION_4_3$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_3
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_4_3$segment() {
        return GLAD_GL_VERSION_4_3$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_3
     * }
     */
    public static int GLAD_GL_VERSION_4_3() {
        return GLAD_GL_VERSION_4_3$constants.SEGMENT.get(GLAD_GL_VERSION_4_3$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_3
     * }
     */
    public static void GLAD_GL_VERSION_4_3(int varValue) {
        GLAD_GL_VERSION_4_3$constants.SEGMENT.set(GLAD_GL_VERSION_4_3$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_4_4$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_4_4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_4
     * }
     */
    public static OfInt GLAD_GL_VERSION_4_4$layout() {
        return GLAD_GL_VERSION_4_4$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_4
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_4_4$segment() {
        return GLAD_GL_VERSION_4_4$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_4
     * }
     */
    public static int GLAD_GL_VERSION_4_4() {
        return GLAD_GL_VERSION_4_4$constants.SEGMENT.get(GLAD_GL_VERSION_4_4$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_4
     * }
     */
    public static void GLAD_GL_VERSION_4_4(int varValue) {
        GLAD_GL_VERSION_4_4$constants.SEGMENT.set(GLAD_GL_VERSION_4_4$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_4_5$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_4_5").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_5
     * }
     */
    public static OfInt GLAD_GL_VERSION_4_5$layout() {
        return GLAD_GL_VERSION_4_5$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_5
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_4_5$segment() {
        return GLAD_GL_VERSION_4_5$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_5
     * }
     */
    public static int GLAD_GL_VERSION_4_5() {
        return GLAD_GL_VERSION_4_5$constants.SEGMENT.get(GLAD_GL_VERSION_4_5$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_5
     * }
     */
    public static void GLAD_GL_VERSION_4_5(int varValue) {
        GLAD_GL_VERSION_4_5$constants.SEGMENT.set(GLAD_GL_VERSION_4_5$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_VERSION_4_6$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_VERSION_4_6").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_6
     * }
     */
    public static OfInt GLAD_GL_VERSION_4_6$layout() {
        return GLAD_GL_VERSION_4_6$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_6
     * }
     */
    public static MemorySegment GLAD_GL_VERSION_4_6$segment() {
        return GLAD_GL_VERSION_4_6$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_6
     * }
     */
    public static int GLAD_GL_VERSION_4_6() {
        return GLAD_GL_VERSION_4_6$constants.SEGMENT.get(GLAD_GL_VERSION_4_6$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_VERSION_4_6
     * }
     */
    public static void GLAD_GL_VERSION_4_6(int varValue) {
        GLAD_GL_VERSION_4_6$constants.SEGMENT.set(GLAD_GL_VERSION_4_6$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_AMD_draw_buffers_blend$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_AMD_draw_buffers_blend").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_AMD_draw_buffers_blend
     * }
     */
    public static OfInt GLAD_GL_AMD_draw_buffers_blend$layout() {
        return GLAD_GL_AMD_draw_buffers_blend$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_AMD_draw_buffers_blend
     * }
     */
    public static MemorySegment GLAD_GL_AMD_draw_buffers_blend$segment() {
        return GLAD_GL_AMD_draw_buffers_blend$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_AMD_draw_buffers_blend
     * }
     */
    public static int GLAD_GL_AMD_draw_buffers_blend() {
        return GLAD_GL_AMD_draw_buffers_blend$constants.SEGMENT.get(GLAD_GL_AMD_draw_buffers_blend$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_AMD_draw_buffers_blend
     * }
     */
    public static void GLAD_GL_AMD_draw_buffers_blend(int varValue) {
        GLAD_GL_AMD_draw_buffers_blend$constants.SEGMENT.set(GLAD_GL_AMD_draw_buffers_blend$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_AMD_multi_draw_indirect$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_AMD_multi_draw_indirect").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_AMD_multi_draw_indirect
     * }
     */
    public static OfInt GLAD_GL_AMD_multi_draw_indirect$layout() {
        return GLAD_GL_AMD_multi_draw_indirect$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_AMD_multi_draw_indirect
     * }
     */
    public static MemorySegment GLAD_GL_AMD_multi_draw_indirect$segment() {
        return GLAD_GL_AMD_multi_draw_indirect$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_AMD_multi_draw_indirect
     * }
     */
    public static int GLAD_GL_AMD_multi_draw_indirect() {
        return GLAD_GL_AMD_multi_draw_indirect$constants.SEGMENT.get(GLAD_GL_AMD_multi_draw_indirect$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_AMD_multi_draw_indirect
     * }
     */
    public static void GLAD_GL_AMD_multi_draw_indirect(int varValue) {
        GLAD_GL_AMD_multi_draw_indirect$constants.SEGMENT.set(GLAD_GL_AMD_multi_draw_indirect$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_APPLE_flush_buffer_range$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_APPLE_flush_buffer_range").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_APPLE_flush_buffer_range
     * }
     */
    public static OfInt GLAD_GL_APPLE_flush_buffer_range$layout() {
        return GLAD_GL_APPLE_flush_buffer_range$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_APPLE_flush_buffer_range
     * }
     */
    public static MemorySegment GLAD_GL_APPLE_flush_buffer_range$segment() {
        return GLAD_GL_APPLE_flush_buffer_range$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_APPLE_flush_buffer_range
     * }
     */
    public static int GLAD_GL_APPLE_flush_buffer_range() {
        return GLAD_GL_APPLE_flush_buffer_range$constants.SEGMENT.get(GLAD_GL_APPLE_flush_buffer_range$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_APPLE_flush_buffer_range
     * }
     */
    public static void GLAD_GL_APPLE_flush_buffer_range(int varValue) {
        GLAD_GL_APPLE_flush_buffer_range$constants.SEGMENT.set(GLAD_GL_APPLE_flush_buffer_range$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_APPLE_vertex_array_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_APPLE_vertex_array_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_APPLE_vertex_array_object
     * }
     */
    public static OfInt GLAD_GL_APPLE_vertex_array_object$layout() {
        return GLAD_GL_APPLE_vertex_array_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_APPLE_vertex_array_object
     * }
     */
    public static MemorySegment GLAD_GL_APPLE_vertex_array_object$segment() {
        return GLAD_GL_APPLE_vertex_array_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_APPLE_vertex_array_object
     * }
     */
    public static int GLAD_GL_APPLE_vertex_array_object() {
        return GLAD_GL_APPLE_vertex_array_object$constants.SEGMENT.get(GLAD_GL_APPLE_vertex_array_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_APPLE_vertex_array_object
     * }
     */
    public static void GLAD_GL_APPLE_vertex_array_object(int varValue) {
        GLAD_GL_APPLE_vertex_array_object$constants.SEGMENT.set(GLAD_GL_APPLE_vertex_array_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_ES2_compatibility$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_ES2_compatibility").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_ES2_compatibility
     * }
     */
    public static OfInt GLAD_GL_ARB_ES2_compatibility$layout() {
        return GLAD_GL_ARB_ES2_compatibility$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_ES2_compatibility
     * }
     */
    public static MemorySegment GLAD_GL_ARB_ES2_compatibility$segment() {
        return GLAD_GL_ARB_ES2_compatibility$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_ES2_compatibility
     * }
     */
    public static int GLAD_GL_ARB_ES2_compatibility() {
        return GLAD_GL_ARB_ES2_compatibility$constants.SEGMENT.get(GLAD_GL_ARB_ES2_compatibility$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_ES2_compatibility
     * }
     */
    public static void GLAD_GL_ARB_ES2_compatibility(int varValue) {
        GLAD_GL_ARB_ES2_compatibility$constants.SEGMENT.set(GLAD_GL_ARB_ES2_compatibility$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_ES3_1_compatibility$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_ES3_1_compatibility").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_ES3_1_compatibility
     * }
     */
    public static OfInt GLAD_GL_ARB_ES3_1_compatibility$layout() {
        return GLAD_GL_ARB_ES3_1_compatibility$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_ES3_1_compatibility
     * }
     */
    public static MemorySegment GLAD_GL_ARB_ES3_1_compatibility$segment() {
        return GLAD_GL_ARB_ES3_1_compatibility$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_ES3_1_compatibility
     * }
     */
    public static int GLAD_GL_ARB_ES3_1_compatibility() {
        return GLAD_GL_ARB_ES3_1_compatibility$constants.SEGMENT.get(GLAD_GL_ARB_ES3_1_compatibility$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_ES3_1_compatibility
     * }
     */
    public static void GLAD_GL_ARB_ES3_1_compatibility(int varValue) {
        GLAD_GL_ARB_ES3_1_compatibility$constants.SEGMENT.set(GLAD_GL_ARB_ES3_1_compatibility$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_base_instance$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_base_instance").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_base_instance
     * }
     */
    public static OfInt GLAD_GL_ARB_base_instance$layout() {
        return GLAD_GL_ARB_base_instance$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_base_instance
     * }
     */
    public static MemorySegment GLAD_GL_ARB_base_instance$segment() {
        return GLAD_GL_ARB_base_instance$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_base_instance
     * }
     */
    public static int GLAD_GL_ARB_base_instance() {
        return GLAD_GL_ARB_base_instance$constants.SEGMENT.get(GLAD_GL_ARB_base_instance$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_base_instance
     * }
     */
    public static void GLAD_GL_ARB_base_instance(int varValue) {
        GLAD_GL_ARB_base_instance$constants.SEGMENT.set(GLAD_GL_ARB_base_instance$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_blend_func_extended$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_blend_func_extended").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_blend_func_extended
     * }
     */
    public static OfInt GLAD_GL_ARB_blend_func_extended$layout() {
        return GLAD_GL_ARB_blend_func_extended$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_blend_func_extended
     * }
     */
    public static MemorySegment GLAD_GL_ARB_blend_func_extended$segment() {
        return GLAD_GL_ARB_blend_func_extended$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_blend_func_extended
     * }
     */
    public static int GLAD_GL_ARB_blend_func_extended() {
        return GLAD_GL_ARB_blend_func_extended$constants.SEGMENT.get(GLAD_GL_ARB_blend_func_extended$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_blend_func_extended
     * }
     */
    public static void GLAD_GL_ARB_blend_func_extended(int varValue) {
        GLAD_GL_ARB_blend_func_extended$constants.SEGMENT.set(GLAD_GL_ARB_blend_func_extended$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_buffer_storage$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_buffer_storage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_buffer_storage
     * }
     */
    public static OfInt GLAD_GL_ARB_buffer_storage$layout() {
        return GLAD_GL_ARB_buffer_storage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_buffer_storage
     * }
     */
    public static MemorySegment GLAD_GL_ARB_buffer_storage$segment() {
        return GLAD_GL_ARB_buffer_storage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_buffer_storage
     * }
     */
    public static int GLAD_GL_ARB_buffer_storage() {
        return GLAD_GL_ARB_buffer_storage$constants.SEGMENT.get(GLAD_GL_ARB_buffer_storage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_buffer_storage
     * }
     */
    public static void GLAD_GL_ARB_buffer_storage(int varValue) {
        GLAD_GL_ARB_buffer_storage$constants.SEGMENT.set(GLAD_GL_ARB_buffer_storage$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_clear_buffer_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_clear_buffer_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clear_buffer_object
     * }
     */
    public static OfInt GLAD_GL_ARB_clear_buffer_object$layout() {
        return GLAD_GL_ARB_clear_buffer_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clear_buffer_object
     * }
     */
    public static MemorySegment GLAD_GL_ARB_clear_buffer_object$segment() {
        return GLAD_GL_ARB_clear_buffer_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clear_buffer_object
     * }
     */
    public static int GLAD_GL_ARB_clear_buffer_object() {
        return GLAD_GL_ARB_clear_buffer_object$constants.SEGMENT.get(GLAD_GL_ARB_clear_buffer_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clear_buffer_object
     * }
     */
    public static void GLAD_GL_ARB_clear_buffer_object(int varValue) {
        GLAD_GL_ARB_clear_buffer_object$constants.SEGMENT.set(GLAD_GL_ARB_clear_buffer_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_clear_texture$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_clear_texture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clear_texture
     * }
     */
    public static OfInt GLAD_GL_ARB_clear_texture$layout() {
        return GLAD_GL_ARB_clear_texture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clear_texture
     * }
     */
    public static MemorySegment GLAD_GL_ARB_clear_texture$segment() {
        return GLAD_GL_ARB_clear_texture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clear_texture
     * }
     */
    public static int GLAD_GL_ARB_clear_texture() {
        return GLAD_GL_ARB_clear_texture$constants.SEGMENT.get(GLAD_GL_ARB_clear_texture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clear_texture
     * }
     */
    public static void GLAD_GL_ARB_clear_texture(int varValue) {
        GLAD_GL_ARB_clear_texture$constants.SEGMENT.set(GLAD_GL_ARB_clear_texture$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_clip_control$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_clip_control").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clip_control
     * }
     */
    public static OfInt GLAD_GL_ARB_clip_control$layout() {
        return GLAD_GL_ARB_clip_control$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clip_control
     * }
     */
    public static MemorySegment GLAD_GL_ARB_clip_control$segment() {
        return GLAD_GL_ARB_clip_control$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clip_control
     * }
     */
    public static int GLAD_GL_ARB_clip_control() {
        return GLAD_GL_ARB_clip_control$constants.SEGMENT.get(GLAD_GL_ARB_clip_control$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_clip_control
     * }
     */
    public static void GLAD_GL_ARB_clip_control(int varValue) {
        GLAD_GL_ARB_clip_control$constants.SEGMENT.set(GLAD_GL_ARB_clip_control$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_color_buffer_float$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_color_buffer_float").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_color_buffer_float
     * }
     */
    public static OfInt GLAD_GL_ARB_color_buffer_float$layout() {
        return GLAD_GL_ARB_color_buffer_float$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_color_buffer_float
     * }
     */
    public static MemorySegment GLAD_GL_ARB_color_buffer_float$segment() {
        return GLAD_GL_ARB_color_buffer_float$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_color_buffer_float
     * }
     */
    public static int GLAD_GL_ARB_color_buffer_float() {
        return GLAD_GL_ARB_color_buffer_float$constants.SEGMENT.get(GLAD_GL_ARB_color_buffer_float$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_color_buffer_float
     * }
     */
    public static void GLAD_GL_ARB_color_buffer_float(int varValue) {
        GLAD_GL_ARB_color_buffer_float$constants.SEGMENT.set(GLAD_GL_ARB_color_buffer_float$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_compute_shader$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_compute_shader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_compute_shader
     * }
     */
    public static OfInt GLAD_GL_ARB_compute_shader$layout() {
        return GLAD_GL_ARB_compute_shader$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_compute_shader
     * }
     */
    public static MemorySegment GLAD_GL_ARB_compute_shader$segment() {
        return GLAD_GL_ARB_compute_shader$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_compute_shader
     * }
     */
    public static int GLAD_GL_ARB_compute_shader() {
        return GLAD_GL_ARB_compute_shader$constants.SEGMENT.get(GLAD_GL_ARB_compute_shader$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_compute_shader
     * }
     */
    public static void GLAD_GL_ARB_compute_shader(int varValue) {
        GLAD_GL_ARB_compute_shader$constants.SEGMENT.set(GLAD_GL_ARB_compute_shader$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_copy_buffer$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_copy_buffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_copy_buffer
     * }
     */
    public static OfInt GLAD_GL_ARB_copy_buffer$layout() {
        return GLAD_GL_ARB_copy_buffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_copy_buffer
     * }
     */
    public static MemorySegment GLAD_GL_ARB_copy_buffer$segment() {
        return GLAD_GL_ARB_copy_buffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_copy_buffer
     * }
     */
    public static int GLAD_GL_ARB_copy_buffer() {
        return GLAD_GL_ARB_copy_buffer$constants.SEGMENT.get(GLAD_GL_ARB_copy_buffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_copy_buffer
     * }
     */
    public static void GLAD_GL_ARB_copy_buffer(int varValue) {
        GLAD_GL_ARB_copy_buffer$constants.SEGMENT.set(GLAD_GL_ARB_copy_buffer$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_copy_image$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_copy_image").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_copy_image
     * }
     */
    public static OfInt GLAD_GL_ARB_copy_image$layout() {
        return GLAD_GL_ARB_copy_image$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_copy_image
     * }
     */
    public static MemorySegment GLAD_GL_ARB_copy_image$segment() {
        return GLAD_GL_ARB_copy_image$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_copy_image
     * }
     */
    public static int GLAD_GL_ARB_copy_image() {
        return GLAD_GL_ARB_copy_image$constants.SEGMENT.get(GLAD_GL_ARB_copy_image$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_copy_image
     * }
     */
    public static void GLAD_GL_ARB_copy_image(int varValue) {
        GLAD_GL_ARB_copy_image$constants.SEGMENT.set(GLAD_GL_ARB_copy_image$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_debug_output$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_debug_output").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_debug_output
     * }
     */
    public static OfInt GLAD_GL_ARB_debug_output$layout() {
        return GLAD_GL_ARB_debug_output$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_debug_output
     * }
     */
    public static MemorySegment GLAD_GL_ARB_debug_output$segment() {
        return GLAD_GL_ARB_debug_output$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_debug_output
     * }
     */
    public static int GLAD_GL_ARB_debug_output() {
        return GLAD_GL_ARB_debug_output$constants.SEGMENT.get(GLAD_GL_ARB_debug_output$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_debug_output
     * }
     */
    public static void GLAD_GL_ARB_debug_output(int varValue) {
        GLAD_GL_ARB_debug_output$constants.SEGMENT.set(GLAD_GL_ARB_debug_output$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_direct_state_access$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_direct_state_access").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_direct_state_access
     * }
     */
    public static OfInt GLAD_GL_ARB_direct_state_access$layout() {
        return GLAD_GL_ARB_direct_state_access$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_direct_state_access
     * }
     */
    public static MemorySegment GLAD_GL_ARB_direct_state_access$segment() {
        return GLAD_GL_ARB_direct_state_access$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_direct_state_access
     * }
     */
    public static int GLAD_GL_ARB_direct_state_access() {
        return GLAD_GL_ARB_direct_state_access$constants.SEGMENT.get(GLAD_GL_ARB_direct_state_access$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_direct_state_access
     * }
     */
    public static void GLAD_GL_ARB_direct_state_access(int varValue) {
        GLAD_GL_ARB_direct_state_access$constants.SEGMENT.set(GLAD_GL_ARB_direct_state_access$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_draw_buffers$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_draw_buffers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_buffers
     * }
     */
    public static OfInt GLAD_GL_ARB_draw_buffers$layout() {
        return GLAD_GL_ARB_draw_buffers$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_buffers
     * }
     */
    public static MemorySegment GLAD_GL_ARB_draw_buffers$segment() {
        return GLAD_GL_ARB_draw_buffers$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_buffers
     * }
     */
    public static int GLAD_GL_ARB_draw_buffers() {
        return GLAD_GL_ARB_draw_buffers$constants.SEGMENT.get(GLAD_GL_ARB_draw_buffers$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_buffers
     * }
     */
    public static void GLAD_GL_ARB_draw_buffers(int varValue) {
        GLAD_GL_ARB_draw_buffers$constants.SEGMENT.set(GLAD_GL_ARB_draw_buffers$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_draw_buffers_blend$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_draw_buffers_blend").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_buffers_blend
     * }
     */
    public static OfInt GLAD_GL_ARB_draw_buffers_blend$layout() {
        return GLAD_GL_ARB_draw_buffers_blend$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_buffers_blend
     * }
     */
    public static MemorySegment GLAD_GL_ARB_draw_buffers_blend$segment() {
        return GLAD_GL_ARB_draw_buffers_blend$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_buffers_blend
     * }
     */
    public static int GLAD_GL_ARB_draw_buffers_blend() {
        return GLAD_GL_ARB_draw_buffers_blend$constants.SEGMENT.get(GLAD_GL_ARB_draw_buffers_blend$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_buffers_blend
     * }
     */
    public static void GLAD_GL_ARB_draw_buffers_blend(int varValue) {
        GLAD_GL_ARB_draw_buffers_blend$constants.SEGMENT.set(GLAD_GL_ARB_draw_buffers_blend$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_draw_elements_base_vertex$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_draw_elements_base_vertex").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_elements_base_vertex
     * }
     */
    public static OfInt GLAD_GL_ARB_draw_elements_base_vertex$layout() {
        return GLAD_GL_ARB_draw_elements_base_vertex$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_elements_base_vertex
     * }
     */
    public static MemorySegment GLAD_GL_ARB_draw_elements_base_vertex$segment() {
        return GLAD_GL_ARB_draw_elements_base_vertex$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_elements_base_vertex
     * }
     */
    public static int GLAD_GL_ARB_draw_elements_base_vertex() {
        return GLAD_GL_ARB_draw_elements_base_vertex$constants.SEGMENT.get(GLAD_GL_ARB_draw_elements_base_vertex$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_elements_base_vertex
     * }
     */
    public static void GLAD_GL_ARB_draw_elements_base_vertex(int varValue) {
        GLAD_GL_ARB_draw_elements_base_vertex$constants.SEGMENT.set(GLAD_GL_ARB_draw_elements_base_vertex$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_draw_indirect$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_draw_indirect").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_indirect
     * }
     */
    public static OfInt GLAD_GL_ARB_draw_indirect$layout() {
        return GLAD_GL_ARB_draw_indirect$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_indirect
     * }
     */
    public static MemorySegment GLAD_GL_ARB_draw_indirect$segment() {
        return GLAD_GL_ARB_draw_indirect$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_indirect
     * }
     */
    public static int GLAD_GL_ARB_draw_indirect() {
        return GLAD_GL_ARB_draw_indirect$constants.SEGMENT.get(GLAD_GL_ARB_draw_indirect$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_indirect
     * }
     */
    public static void GLAD_GL_ARB_draw_indirect(int varValue) {
        GLAD_GL_ARB_draw_indirect$constants.SEGMENT.set(GLAD_GL_ARB_draw_indirect$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_draw_instanced$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_draw_instanced").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_instanced
     * }
     */
    public static OfInt GLAD_GL_ARB_draw_instanced$layout() {
        return GLAD_GL_ARB_draw_instanced$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_instanced
     * }
     */
    public static MemorySegment GLAD_GL_ARB_draw_instanced$segment() {
        return GLAD_GL_ARB_draw_instanced$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_instanced
     * }
     */
    public static int GLAD_GL_ARB_draw_instanced() {
        return GLAD_GL_ARB_draw_instanced$constants.SEGMENT.get(GLAD_GL_ARB_draw_instanced$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_draw_instanced
     * }
     */
    public static void GLAD_GL_ARB_draw_instanced(int varValue) {
        GLAD_GL_ARB_draw_instanced$constants.SEGMENT.set(GLAD_GL_ARB_draw_instanced$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_framebuffer_no_attachments$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_framebuffer_no_attachments").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_framebuffer_no_attachments
     * }
     */
    public static OfInt GLAD_GL_ARB_framebuffer_no_attachments$layout() {
        return GLAD_GL_ARB_framebuffer_no_attachments$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_framebuffer_no_attachments
     * }
     */
    public static MemorySegment GLAD_GL_ARB_framebuffer_no_attachments$segment() {
        return GLAD_GL_ARB_framebuffer_no_attachments$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_framebuffer_no_attachments
     * }
     */
    public static int GLAD_GL_ARB_framebuffer_no_attachments() {
        return GLAD_GL_ARB_framebuffer_no_attachments$constants.SEGMENT.get(GLAD_GL_ARB_framebuffer_no_attachments$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_framebuffer_no_attachments
     * }
     */
    public static void GLAD_GL_ARB_framebuffer_no_attachments(int varValue) {
        GLAD_GL_ARB_framebuffer_no_attachments$constants.SEGMENT.set(GLAD_GL_ARB_framebuffer_no_attachments$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_framebuffer_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_framebuffer_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_framebuffer_object
     * }
     */
    public static OfInt GLAD_GL_ARB_framebuffer_object$layout() {
        return GLAD_GL_ARB_framebuffer_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_framebuffer_object
     * }
     */
    public static MemorySegment GLAD_GL_ARB_framebuffer_object$segment() {
        return GLAD_GL_ARB_framebuffer_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_framebuffer_object
     * }
     */
    public static int GLAD_GL_ARB_framebuffer_object() {
        return GLAD_GL_ARB_framebuffer_object$constants.SEGMENT.get(GLAD_GL_ARB_framebuffer_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_framebuffer_object
     * }
     */
    public static void GLAD_GL_ARB_framebuffer_object(int varValue) {
        GLAD_GL_ARB_framebuffer_object$constants.SEGMENT.set(GLAD_GL_ARB_framebuffer_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_geometry_shader4$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_geometry_shader4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_geometry_shader4
     * }
     */
    public static OfInt GLAD_GL_ARB_geometry_shader4$layout() {
        return GLAD_GL_ARB_geometry_shader4$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_geometry_shader4
     * }
     */
    public static MemorySegment GLAD_GL_ARB_geometry_shader4$segment() {
        return GLAD_GL_ARB_geometry_shader4$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_geometry_shader4
     * }
     */
    public static int GLAD_GL_ARB_geometry_shader4() {
        return GLAD_GL_ARB_geometry_shader4$constants.SEGMENT.get(GLAD_GL_ARB_geometry_shader4$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_geometry_shader4
     * }
     */
    public static void GLAD_GL_ARB_geometry_shader4(int varValue) {
        GLAD_GL_ARB_geometry_shader4$constants.SEGMENT.set(GLAD_GL_ARB_geometry_shader4$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_get_program_binary$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_get_program_binary").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_get_program_binary
     * }
     */
    public static OfInt GLAD_GL_ARB_get_program_binary$layout() {
        return GLAD_GL_ARB_get_program_binary$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_get_program_binary
     * }
     */
    public static MemorySegment GLAD_GL_ARB_get_program_binary$segment() {
        return GLAD_GL_ARB_get_program_binary$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_get_program_binary
     * }
     */
    public static int GLAD_GL_ARB_get_program_binary() {
        return GLAD_GL_ARB_get_program_binary$constants.SEGMENT.get(GLAD_GL_ARB_get_program_binary$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_get_program_binary
     * }
     */
    public static void GLAD_GL_ARB_get_program_binary(int varValue) {
        GLAD_GL_ARB_get_program_binary$constants.SEGMENT.set(GLAD_GL_ARB_get_program_binary$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_get_texture_sub_image$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_get_texture_sub_image").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_get_texture_sub_image
     * }
     */
    public static OfInt GLAD_GL_ARB_get_texture_sub_image$layout() {
        return GLAD_GL_ARB_get_texture_sub_image$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_get_texture_sub_image
     * }
     */
    public static MemorySegment GLAD_GL_ARB_get_texture_sub_image$segment() {
        return GLAD_GL_ARB_get_texture_sub_image$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_get_texture_sub_image
     * }
     */
    public static int GLAD_GL_ARB_get_texture_sub_image() {
        return GLAD_GL_ARB_get_texture_sub_image$constants.SEGMENT.get(GLAD_GL_ARB_get_texture_sub_image$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_get_texture_sub_image
     * }
     */
    public static void GLAD_GL_ARB_get_texture_sub_image(int varValue) {
        GLAD_GL_ARB_get_texture_sub_image$constants.SEGMENT.set(GLAD_GL_ARB_get_texture_sub_image$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_gl_spirv$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_gl_spirv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_gl_spirv
     * }
     */
    public static OfInt GLAD_GL_ARB_gl_spirv$layout() {
        return GLAD_GL_ARB_gl_spirv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_gl_spirv
     * }
     */
    public static MemorySegment GLAD_GL_ARB_gl_spirv$segment() {
        return GLAD_GL_ARB_gl_spirv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_gl_spirv
     * }
     */
    public static int GLAD_GL_ARB_gl_spirv() {
        return GLAD_GL_ARB_gl_spirv$constants.SEGMENT.get(GLAD_GL_ARB_gl_spirv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_gl_spirv
     * }
     */
    public static void GLAD_GL_ARB_gl_spirv(int varValue) {
        GLAD_GL_ARB_gl_spirv$constants.SEGMENT.set(GLAD_GL_ARB_gl_spirv$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_gpu_shader_fp64$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_gpu_shader_fp64").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_gpu_shader_fp64
     * }
     */
    public static OfInt GLAD_GL_ARB_gpu_shader_fp64$layout() {
        return GLAD_GL_ARB_gpu_shader_fp64$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_gpu_shader_fp64
     * }
     */
    public static MemorySegment GLAD_GL_ARB_gpu_shader_fp64$segment() {
        return GLAD_GL_ARB_gpu_shader_fp64$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_gpu_shader_fp64
     * }
     */
    public static int GLAD_GL_ARB_gpu_shader_fp64() {
        return GLAD_GL_ARB_gpu_shader_fp64$constants.SEGMENT.get(GLAD_GL_ARB_gpu_shader_fp64$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_gpu_shader_fp64
     * }
     */
    public static void GLAD_GL_ARB_gpu_shader_fp64(int varValue) {
        GLAD_GL_ARB_gpu_shader_fp64$constants.SEGMENT.set(GLAD_GL_ARB_gpu_shader_fp64$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_imaging$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_imaging").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_imaging
     * }
     */
    public static OfInt GLAD_GL_ARB_imaging$layout() {
        return GLAD_GL_ARB_imaging$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_imaging
     * }
     */
    public static MemorySegment GLAD_GL_ARB_imaging$segment() {
        return GLAD_GL_ARB_imaging$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_imaging
     * }
     */
    public static int GLAD_GL_ARB_imaging() {
        return GLAD_GL_ARB_imaging$constants.SEGMENT.get(GLAD_GL_ARB_imaging$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_imaging
     * }
     */
    public static void GLAD_GL_ARB_imaging(int varValue) {
        GLAD_GL_ARB_imaging$constants.SEGMENT.set(GLAD_GL_ARB_imaging$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_indirect_parameters$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_indirect_parameters").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_indirect_parameters
     * }
     */
    public static OfInt GLAD_GL_ARB_indirect_parameters$layout() {
        return GLAD_GL_ARB_indirect_parameters$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_indirect_parameters
     * }
     */
    public static MemorySegment GLAD_GL_ARB_indirect_parameters$segment() {
        return GLAD_GL_ARB_indirect_parameters$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_indirect_parameters
     * }
     */
    public static int GLAD_GL_ARB_indirect_parameters() {
        return GLAD_GL_ARB_indirect_parameters$constants.SEGMENT.get(GLAD_GL_ARB_indirect_parameters$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_indirect_parameters
     * }
     */
    public static void GLAD_GL_ARB_indirect_parameters(int varValue) {
        GLAD_GL_ARB_indirect_parameters$constants.SEGMENT.set(GLAD_GL_ARB_indirect_parameters$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_instanced_arrays$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_instanced_arrays").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_instanced_arrays
     * }
     */
    public static OfInt GLAD_GL_ARB_instanced_arrays$layout() {
        return GLAD_GL_ARB_instanced_arrays$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_instanced_arrays
     * }
     */
    public static MemorySegment GLAD_GL_ARB_instanced_arrays$segment() {
        return GLAD_GL_ARB_instanced_arrays$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_instanced_arrays
     * }
     */
    public static int GLAD_GL_ARB_instanced_arrays() {
        return GLAD_GL_ARB_instanced_arrays$constants.SEGMENT.get(GLAD_GL_ARB_instanced_arrays$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_instanced_arrays
     * }
     */
    public static void GLAD_GL_ARB_instanced_arrays(int varValue) {
        GLAD_GL_ARB_instanced_arrays$constants.SEGMENT.set(GLAD_GL_ARB_instanced_arrays$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_internalformat_query$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_internalformat_query").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_internalformat_query
     * }
     */
    public static OfInt GLAD_GL_ARB_internalformat_query$layout() {
        return GLAD_GL_ARB_internalformat_query$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_internalformat_query
     * }
     */
    public static MemorySegment GLAD_GL_ARB_internalformat_query$segment() {
        return GLAD_GL_ARB_internalformat_query$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_internalformat_query
     * }
     */
    public static int GLAD_GL_ARB_internalformat_query() {
        return GLAD_GL_ARB_internalformat_query$constants.SEGMENT.get(GLAD_GL_ARB_internalformat_query$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_internalformat_query
     * }
     */
    public static void GLAD_GL_ARB_internalformat_query(int varValue) {
        GLAD_GL_ARB_internalformat_query$constants.SEGMENT.set(GLAD_GL_ARB_internalformat_query$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_internalformat_query2$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_internalformat_query2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_internalformat_query2
     * }
     */
    public static OfInt GLAD_GL_ARB_internalformat_query2$layout() {
        return GLAD_GL_ARB_internalformat_query2$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_internalformat_query2
     * }
     */
    public static MemorySegment GLAD_GL_ARB_internalformat_query2$segment() {
        return GLAD_GL_ARB_internalformat_query2$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_internalformat_query2
     * }
     */
    public static int GLAD_GL_ARB_internalformat_query2() {
        return GLAD_GL_ARB_internalformat_query2$constants.SEGMENT.get(GLAD_GL_ARB_internalformat_query2$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_internalformat_query2
     * }
     */
    public static void GLAD_GL_ARB_internalformat_query2(int varValue) {
        GLAD_GL_ARB_internalformat_query2$constants.SEGMENT.set(GLAD_GL_ARB_internalformat_query2$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_invalidate_subdata$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_invalidate_subdata").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_invalidate_subdata
     * }
     */
    public static OfInt GLAD_GL_ARB_invalidate_subdata$layout() {
        return GLAD_GL_ARB_invalidate_subdata$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_invalidate_subdata
     * }
     */
    public static MemorySegment GLAD_GL_ARB_invalidate_subdata$segment() {
        return GLAD_GL_ARB_invalidate_subdata$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_invalidate_subdata
     * }
     */
    public static int GLAD_GL_ARB_invalidate_subdata() {
        return GLAD_GL_ARB_invalidate_subdata$constants.SEGMENT.get(GLAD_GL_ARB_invalidate_subdata$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_invalidate_subdata
     * }
     */
    public static void GLAD_GL_ARB_invalidate_subdata(int varValue) {
        GLAD_GL_ARB_invalidate_subdata$constants.SEGMENT.set(GLAD_GL_ARB_invalidate_subdata$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_map_buffer_range$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_map_buffer_range").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_map_buffer_range
     * }
     */
    public static OfInt GLAD_GL_ARB_map_buffer_range$layout() {
        return GLAD_GL_ARB_map_buffer_range$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_map_buffer_range
     * }
     */
    public static MemorySegment GLAD_GL_ARB_map_buffer_range$segment() {
        return GLAD_GL_ARB_map_buffer_range$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_map_buffer_range
     * }
     */
    public static int GLAD_GL_ARB_map_buffer_range() {
        return GLAD_GL_ARB_map_buffer_range$constants.SEGMENT.get(GLAD_GL_ARB_map_buffer_range$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_map_buffer_range
     * }
     */
    public static void GLAD_GL_ARB_map_buffer_range(int varValue) {
        GLAD_GL_ARB_map_buffer_range$constants.SEGMENT.set(GLAD_GL_ARB_map_buffer_range$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_multi_bind$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_multi_bind").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multi_bind
     * }
     */
    public static OfInt GLAD_GL_ARB_multi_bind$layout() {
        return GLAD_GL_ARB_multi_bind$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multi_bind
     * }
     */
    public static MemorySegment GLAD_GL_ARB_multi_bind$segment() {
        return GLAD_GL_ARB_multi_bind$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multi_bind
     * }
     */
    public static int GLAD_GL_ARB_multi_bind() {
        return GLAD_GL_ARB_multi_bind$constants.SEGMENT.get(GLAD_GL_ARB_multi_bind$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multi_bind
     * }
     */
    public static void GLAD_GL_ARB_multi_bind(int varValue) {
        GLAD_GL_ARB_multi_bind$constants.SEGMENT.set(GLAD_GL_ARB_multi_bind$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_multi_draw_indirect$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_multi_draw_indirect").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multi_draw_indirect
     * }
     */
    public static OfInt GLAD_GL_ARB_multi_draw_indirect$layout() {
        return GLAD_GL_ARB_multi_draw_indirect$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multi_draw_indirect
     * }
     */
    public static MemorySegment GLAD_GL_ARB_multi_draw_indirect$segment() {
        return GLAD_GL_ARB_multi_draw_indirect$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multi_draw_indirect
     * }
     */
    public static int GLAD_GL_ARB_multi_draw_indirect() {
        return GLAD_GL_ARB_multi_draw_indirect$constants.SEGMENT.get(GLAD_GL_ARB_multi_draw_indirect$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multi_draw_indirect
     * }
     */
    public static void GLAD_GL_ARB_multi_draw_indirect(int varValue) {
        GLAD_GL_ARB_multi_draw_indirect$constants.SEGMENT.set(GLAD_GL_ARB_multi_draw_indirect$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_multisample$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_multisample").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multisample
     * }
     */
    public static OfInt GLAD_GL_ARB_multisample$layout() {
        return GLAD_GL_ARB_multisample$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multisample
     * }
     */
    public static MemorySegment GLAD_GL_ARB_multisample$segment() {
        return GLAD_GL_ARB_multisample$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multisample
     * }
     */
    public static int GLAD_GL_ARB_multisample() {
        return GLAD_GL_ARB_multisample$constants.SEGMENT.get(GLAD_GL_ARB_multisample$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multisample
     * }
     */
    public static void GLAD_GL_ARB_multisample(int varValue) {
        GLAD_GL_ARB_multisample$constants.SEGMENT.set(GLAD_GL_ARB_multisample$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_multitexture$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_multitexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multitexture
     * }
     */
    public static OfInt GLAD_GL_ARB_multitexture$layout() {
        return GLAD_GL_ARB_multitexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multitexture
     * }
     */
    public static MemorySegment GLAD_GL_ARB_multitexture$segment() {
        return GLAD_GL_ARB_multitexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multitexture
     * }
     */
    public static int GLAD_GL_ARB_multitexture() {
        return GLAD_GL_ARB_multitexture$constants.SEGMENT.get(GLAD_GL_ARB_multitexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_multitexture
     * }
     */
    public static void GLAD_GL_ARB_multitexture(int varValue) {
        GLAD_GL_ARB_multitexture$constants.SEGMENT.set(GLAD_GL_ARB_multitexture$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_occlusion_query$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_occlusion_query").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_occlusion_query
     * }
     */
    public static OfInt GLAD_GL_ARB_occlusion_query$layout() {
        return GLAD_GL_ARB_occlusion_query$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_occlusion_query
     * }
     */
    public static MemorySegment GLAD_GL_ARB_occlusion_query$segment() {
        return GLAD_GL_ARB_occlusion_query$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_occlusion_query
     * }
     */
    public static int GLAD_GL_ARB_occlusion_query() {
        return GLAD_GL_ARB_occlusion_query$constants.SEGMENT.get(GLAD_GL_ARB_occlusion_query$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_occlusion_query
     * }
     */
    public static void GLAD_GL_ARB_occlusion_query(int varValue) {
        GLAD_GL_ARB_occlusion_query$constants.SEGMENT.set(GLAD_GL_ARB_occlusion_query$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_point_parameters$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_point_parameters").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_point_parameters
     * }
     */
    public static OfInt GLAD_GL_ARB_point_parameters$layout() {
        return GLAD_GL_ARB_point_parameters$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_point_parameters
     * }
     */
    public static MemorySegment GLAD_GL_ARB_point_parameters$segment() {
        return GLAD_GL_ARB_point_parameters$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_point_parameters
     * }
     */
    public static int GLAD_GL_ARB_point_parameters() {
        return GLAD_GL_ARB_point_parameters$constants.SEGMENT.get(GLAD_GL_ARB_point_parameters$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_point_parameters
     * }
     */
    public static void GLAD_GL_ARB_point_parameters(int varValue) {
        GLAD_GL_ARB_point_parameters$constants.SEGMENT.set(GLAD_GL_ARB_point_parameters$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_polygon_offset_clamp$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_polygon_offset_clamp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_polygon_offset_clamp
     * }
     */
    public static OfInt GLAD_GL_ARB_polygon_offset_clamp$layout() {
        return GLAD_GL_ARB_polygon_offset_clamp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_polygon_offset_clamp
     * }
     */
    public static MemorySegment GLAD_GL_ARB_polygon_offset_clamp$segment() {
        return GLAD_GL_ARB_polygon_offset_clamp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_polygon_offset_clamp
     * }
     */
    public static int GLAD_GL_ARB_polygon_offset_clamp() {
        return GLAD_GL_ARB_polygon_offset_clamp$constants.SEGMENT.get(GLAD_GL_ARB_polygon_offset_clamp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_polygon_offset_clamp
     * }
     */
    public static void GLAD_GL_ARB_polygon_offset_clamp(int varValue) {
        GLAD_GL_ARB_polygon_offset_clamp$constants.SEGMENT.set(GLAD_GL_ARB_polygon_offset_clamp$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_program_interface_query$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_program_interface_query").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_program_interface_query
     * }
     */
    public static OfInt GLAD_GL_ARB_program_interface_query$layout() {
        return GLAD_GL_ARB_program_interface_query$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_program_interface_query
     * }
     */
    public static MemorySegment GLAD_GL_ARB_program_interface_query$segment() {
        return GLAD_GL_ARB_program_interface_query$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_program_interface_query
     * }
     */
    public static int GLAD_GL_ARB_program_interface_query() {
        return GLAD_GL_ARB_program_interface_query$constants.SEGMENT.get(GLAD_GL_ARB_program_interface_query$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_program_interface_query
     * }
     */
    public static void GLAD_GL_ARB_program_interface_query(int varValue) {
        GLAD_GL_ARB_program_interface_query$constants.SEGMENT.set(GLAD_GL_ARB_program_interface_query$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_provoking_vertex$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_provoking_vertex").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_provoking_vertex
     * }
     */
    public static OfInt GLAD_GL_ARB_provoking_vertex$layout() {
        return GLAD_GL_ARB_provoking_vertex$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_provoking_vertex
     * }
     */
    public static MemorySegment GLAD_GL_ARB_provoking_vertex$segment() {
        return GLAD_GL_ARB_provoking_vertex$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_provoking_vertex
     * }
     */
    public static int GLAD_GL_ARB_provoking_vertex() {
        return GLAD_GL_ARB_provoking_vertex$constants.SEGMENT.get(GLAD_GL_ARB_provoking_vertex$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_provoking_vertex
     * }
     */
    public static void GLAD_GL_ARB_provoking_vertex(int varValue) {
        GLAD_GL_ARB_provoking_vertex$constants.SEGMENT.set(GLAD_GL_ARB_provoking_vertex$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_robustness$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_robustness").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_robustness
     * }
     */
    public static OfInt GLAD_GL_ARB_robustness$layout() {
        return GLAD_GL_ARB_robustness$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_robustness
     * }
     */
    public static MemorySegment GLAD_GL_ARB_robustness$segment() {
        return GLAD_GL_ARB_robustness$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_robustness
     * }
     */
    public static int GLAD_GL_ARB_robustness() {
        return GLAD_GL_ARB_robustness$constants.SEGMENT.get(GLAD_GL_ARB_robustness$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_robustness
     * }
     */
    public static void GLAD_GL_ARB_robustness(int varValue) {
        GLAD_GL_ARB_robustness$constants.SEGMENT.set(GLAD_GL_ARB_robustness$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_sample_shading$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_sample_shading").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sample_shading
     * }
     */
    public static OfInt GLAD_GL_ARB_sample_shading$layout() {
        return GLAD_GL_ARB_sample_shading$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sample_shading
     * }
     */
    public static MemorySegment GLAD_GL_ARB_sample_shading$segment() {
        return GLAD_GL_ARB_sample_shading$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sample_shading
     * }
     */
    public static int GLAD_GL_ARB_sample_shading() {
        return GLAD_GL_ARB_sample_shading$constants.SEGMENT.get(GLAD_GL_ARB_sample_shading$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sample_shading
     * }
     */
    public static void GLAD_GL_ARB_sample_shading(int varValue) {
        GLAD_GL_ARB_sample_shading$constants.SEGMENT.set(GLAD_GL_ARB_sample_shading$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_sampler_objects$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_sampler_objects").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sampler_objects
     * }
     */
    public static OfInt GLAD_GL_ARB_sampler_objects$layout() {
        return GLAD_GL_ARB_sampler_objects$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sampler_objects
     * }
     */
    public static MemorySegment GLAD_GL_ARB_sampler_objects$segment() {
        return GLAD_GL_ARB_sampler_objects$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sampler_objects
     * }
     */
    public static int GLAD_GL_ARB_sampler_objects() {
        return GLAD_GL_ARB_sampler_objects$constants.SEGMENT.get(GLAD_GL_ARB_sampler_objects$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sampler_objects
     * }
     */
    public static void GLAD_GL_ARB_sampler_objects(int varValue) {
        GLAD_GL_ARB_sampler_objects$constants.SEGMENT.set(GLAD_GL_ARB_sampler_objects$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_separate_shader_objects$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_separate_shader_objects").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_separate_shader_objects
     * }
     */
    public static OfInt GLAD_GL_ARB_separate_shader_objects$layout() {
        return GLAD_GL_ARB_separate_shader_objects$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_separate_shader_objects
     * }
     */
    public static MemorySegment GLAD_GL_ARB_separate_shader_objects$segment() {
        return GLAD_GL_ARB_separate_shader_objects$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_separate_shader_objects
     * }
     */
    public static int GLAD_GL_ARB_separate_shader_objects() {
        return GLAD_GL_ARB_separate_shader_objects$constants.SEGMENT.get(GLAD_GL_ARB_separate_shader_objects$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_separate_shader_objects
     * }
     */
    public static void GLAD_GL_ARB_separate_shader_objects(int varValue) {
        GLAD_GL_ARB_separate_shader_objects$constants.SEGMENT.set(GLAD_GL_ARB_separate_shader_objects$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_shader_atomic_counters$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_shader_atomic_counters").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_atomic_counters
     * }
     */
    public static OfInt GLAD_GL_ARB_shader_atomic_counters$layout() {
        return GLAD_GL_ARB_shader_atomic_counters$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_atomic_counters
     * }
     */
    public static MemorySegment GLAD_GL_ARB_shader_atomic_counters$segment() {
        return GLAD_GL_ARB_shader_atomic_counters$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_atomic_counters
     * }
     */
    public static int GLAD_GL_ARB_shader_atomic_counters() {
        return GLAD_GL_ARB_shader_atomic_counters$constants.SEGMENT.get(GLAD_GL_ARB_shader_atomic_counters$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_atomic_counters
     * }
     */
    public static void GLAD_GL_ARB_shader_atomic_counters(int varValue) {
        GLAD_GL_ARB_shader_atomic_counters$constants.SEGMENT.set(GLAD_GL_ARB_shader_atomic_counters$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_shader_image_load_store$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_shader_image_load_store").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_image_load_store
     * }
     */
    public static OfInt GLAD_GL_ARB_shader_image_load_store$layout() {
        return GLAD_GL_ARB_shader_image_load_store$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_image_load_store
     * }
     */
    public static MemorySegment GLAD_GL_ARB_shader_image_load_store$segment() {
        return GLAD_GL_ARB_shader_image_load_store$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_image_load_store
     * }
     */
    public static int GLAD_GL_ARB_shader_image_load_store() {
        return GLAD_GL_ARB_shader_image_load_store$constants.SEGMENT.get(GLAD_GL_ARB_shader_image_load_store$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_image_load_store
     * }
     */
    public static void GLAD_GL_ARB_shader_image_load_store(int varValue) {
        GLAD_GL_ARB_shader_image_load_store$constants.SEGMENT.set(GLAD_GL_ARB_shader_image_load_store$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_shader_objects$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_shader_objects").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_objects
     * }
     */
    public static OfInt GLAD_GL_ARB_shader_objects$layout() {
        return GLAD_GL_ARB_shader_objects$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_objects
     * }
     */
    public static MemorySegment GLAD_GL_ARB_shader_objects$segment() {
        return GLAD_GL_ARB_shader_objects$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_objects
     * }
     */
    public static int GLAD_GL_ARB_shader_objects() {
        return GLAD_GL_ARB_shader_objects$constants.SEGMENT.get(GLAD_GL_ARB_shader_objects$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_objects
     * }
     */
    public static void GLAD_GL_ARB_shader_objects(int varValue) {
        GLAD_GL_ARB_shader_objects$constants.SEGMENT.set(GLAD_GL_ARB_shader_objects$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_shader_storage_buffer_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_shader_storage_buffer_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_storage_buffer_object
     * }
     */
    public static OfInt GLAD_GL_ARB_shader_storage_buffer_object$layout() {
        return GLAD_GL_ARB_shader_storage_buffer_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_storage_buffer_object
     * }
     */
    public static MemorySegment GLAD_GL_ARB_shader_storage_buffer_object$segment() {
        return GLAD_GL_ARB_shader_storage_buffer_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_storage_buffer_object
     * }
     */
    public static int GLAD_GL_ARB_shader_storage_buffer_object() {
        return GLAD_GL_ARB_shader_storage_buffer_object$constants.SEGMENT.get(GLAD_GL_ARB_shader_storage_buffer_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_storage_buffer_object
     * }
     */
    public static void GLAD_GL_ARB_shader_storage_buffer_object(int varValue) {
        GLAD_GL_ARB_shader_storage_buffer_object$constants.SEGMENT.set(GLAD_GL_ARB_shader_storage_buffer_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_shader_subroutine$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_shader_subroutine").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_subroutine
     * }
     */
    public static OfInt GLAD_GL_ARB_shader_subroutine$layout() {
        return GLAD_GL_ARB_shader_subroutine$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_subroutine
     * }
     */
    public static MemorySegment GLAD_GL_ARB_shader_subroutine$segment() {
        return GLAD_GL_ARB_shader_subroutine$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_subroutine
     * }
     */
    public static int GLAD_GL_ARB_shader_subroutine() {
        return GLAD_GL_ARB_shader_subroutine$constants.SEGMENT.get(GLAD_GL_ARB_shader_subroutine$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_shader_subroutine
     * }
     */
    public static void GLAD_GL_ARB_shader_subroutine(int varValue) {
        GLAD_GL_ARB_shader_subroutine$constants.SEGMENT.set(GLAD_GL_ARB_shader_subroutine$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_sync$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_sync").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sync
     * }
     */
    public static OfInt GLAD_GL_ARB_sync$layout() {
        return GLAD_GL_ARB_sync$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sync
     * }
     */
    public static MemorySegment GLAD_GL_ARB_sync$segment() {
        return GLAD_GL_ARB_sync$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sync
     * }
     */
    public static int GLAD_GL_ARB_sync() {
        return GLAD_GL_ARB_sync$constants.SEGMENT.get(GLAD_GL_ARB_sync$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_sync
     * }
     */
    public static void GLAD_GL_ARB_sync(int varValue) {
        GLAD_GL_ARB_sync$constants.SEGMENT.set(GLAD_GL_ARB_sync$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_tessellation_shader$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_tessellation_shader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_tessellation_shader
     * }
     */
    public static OfInt GLAD_GL_ARB_tessellation_shader$layout() {
        return GLAD_GL_ARB_tessellation_shader$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_tessellation_shader
     * }
     */
    public static MemorySegment GLAD_GL_ARB_tessellation_shader$segment() {
        return GLAD_GL_ARB_tessellation_shader$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_tessellation_shader
     * }
     */
    public static int GLAD_GL_ARB_tessellation_shader() {
        return GLAD_GL_ARB_tessellation_shader$constants.SEGMENT.get(GLAD_GL_ARB_tessellation_shader$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_tessellation_shader
     * }
     */
    public static void GLAD_GL_ARB_tessellation_shader(int varValue) {
        GLAD_GL_ARB_tessellation_shader$constants.SEGMENT.set(GLAD_GL_ARB_tessellation_shader$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_texture_barrier$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_texture_barrier").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_barrier
     * }
     */
    public static OfInt GLAD_GL_ARB_texture_barrier$layout() {
        return GLAD_GL_ARB_texture_barrier$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_barrier
     * }
     */
    public static MemorySegment GLAD_GL_ARB_texture_barrier$segment() {
        return GLAD_GL_ARB_texture_barrier$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_barrier
     * }
     */
    public static int GLAD_GL_ARB_texture_barrier() {
        return GLAD_GL_ARB_texture_barrier$constants.SEGMENT.get(GLAD_GL_ARB_texture_barrier$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_barrier
     * }
     */
    public static void GLAD_GL_ARB_texture_barrier(int varValue) {
        GLAD_GL_ARB_texture_barrier$constants.SEGMENT.set(GLAD_GL_ARB_texture_barrier$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_texture_buffer_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_texture_buffer_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_buffer_object
     * }
     */
    public static OfInt GLAD_GL_ARB_texture_buffer_object$layout() {
        return GLAD_GL_ARB_texture_buffer_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_buffer_object
     * }
     */
    public static MemorySegment GLAD_GL_ARB_texture_buffer_object$segment() {
        return GLAD_GL_ARB_texture_buffer_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_buffer_object
     * }
     */
    public static int GLAD_GL_ARB_texture_buffer_object() {
        return GLAD_GL_ARB_texture_buffer_object$constants.SEGMENT.get(GLAD_GL_ARB_texture_buffer_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_buffer_object
     * }
     */
    public static void GLAD_GL_ARB_texture_buffer_object(int varValue) {
        GLAD_GL_ARB_texture_buffer_object$constants.SEGMENT.set(GLAD_GL_ARB_texture_buffer_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_texture_buffer_range$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_texture_buffer_range").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_buffer_range
     * }
     */
    public static OfInt GLAD_GL_ARB_texture_buffer_range$layout() {
        return GLAD_GL_ARB_texture_buffer_range$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_buffer_range
     * }
     */
    public static MemorySegment GLAD_GL_ARB_texture_buffer_range$segment() {
        return GLAD_GL_ARB_texture_buffer_range$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_buffer_range
     * }
     */
    public static int GLAD_GL_ARB_texture_buffer_range() {
        return GLAD_GL_ARB_texture_buffer_range$constants.SEGMENT.get(GLAD_GL_ARB_texture_buffer_range$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_buffer_range
     * }
     */
    public static void GLAD_GL_ARB_texture_buffer_range(int varValue) {
        GLAD_GL_ARB_texture_buffer_range$constants.SEGMENT.set(GLAD_GL_ARB_texture_buffer_range$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_texture_compression$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_texture_compression").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_compression
     * }
     */
    public static OfInt GLAD_GL_ARB_texture_compression$layout() {
        return GLAD_GL_ARB_texture_compression$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_compression
     * }
     */
    public static MemorySegment GLAD_GL_ARB_texture_compression$segment() {
        return GLAD_GL_ARB_texture_compression$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_compression
     * }
     */
    public static int GLAD_GL_ARB_texture_compression() {
        return GLAD_GL_ARB_texture_compression$constants.SEGMENT.get(GLAD_GL_ARB_texture_compression$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_compression
     * }
     */
    public static void GLAD_GL_ARB_texture_compression(int varValue) {
        GLAD_GL_ARB_texture_compression$constants.SEGMENT.set(GLAD_GL_ARB_texture_compression$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_texture_multisample$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_texture_multisample").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_multisample
     * }
     */
    public static OfInt GLAD_GL_ARB_texture_multisample$layout() {
        return GLAD_GL_ARB_texture_multisample$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_multisample
     * }
     */
    public static MemorySegment GLAD_GL_ARB_texture_multisample$segment() {
        return GLAD_GL_ARB_texture_multisample$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_multisample
     * }
     */
    public static int GLAD_GL_ARB_texture_multisample() {
        return GLAD_GL_ARB_texture_multisample$constants.SEGMENT.get(GLAD_GL_ARB_texture_multisample$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_multisample
     * }
     */
    public static void GLAD_GL_ARB_texture_multisample(int varValue) {
        GLAD_GL_ARB_texture_multisample$constants.SEGMENT.set(GLAD_GL_ARB_texture_multisample$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_texture_storage$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_texture_storage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_storage
     * }
     */
    public static OfInt GLAD_GL_ARB_texture_storage$layout() {
        return GLAD_GL_ARB_texture_storage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_storage
     * }
     */
    public static MemorySegment GLAD_GL_ARB_texture_storage$segment() {
        return GLAD_GL_ARB_texture_storage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_storage
     * }
     */
    public static int GLAD_GL_ARB_texture_storage() {
        return GLAD_GL_ARB_texture_storage$constants.SEGMENT.get(GLAD_GL_ARB_texture_storage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_storage
     * }
     */
    public static void GLAD_GL_ARB_texture_storage(int varValue) {
        GLAD_GL_ARB_texture_storage$constants.SEGMENT.set(GLAD_GL_ARB_texture_storage$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_texture_storage_multisample$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_texture_storage_multisample").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_storage_multisample
     * }
     */
    public static OfInt GLAD_GL_ARB_texture_storage_multisample$layout() {
        return GLAD_GL_ARB_texture_storage_multisample$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_storage_multisample
     * }
     */
    public static MemorySegment GLAD_GL_ARB_texture_storage_multisample$segment() {
        return GLAD_GL_ARB_texture_storage_multisample$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_storage_multisample
     * }
     */
    public static int GLAD_GL_ARB_texture_storage_multisample() {
        return GLAD_GL_ARB_texture_storage_multisample$constants.SEGMENT.get(GLAD_GL_ARB_texture_storage_multisample$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_storage_multisample
     * }
     */
    public static void GLAD_GL_ARB_texture_storage_multisample(int varValue) {
        GLAD_GL_ARB_texture_storage_multisample$constants.SEGMENT.set(GLAD_GL_ARB_texture_storage_multisample$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_texture_view$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_texture_view").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_view
     * }
     */
    public static OfInt GLAD_GL_ARB_texture_view$layout() {
        return GLAD_GL_ARB_texture_view$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_view
     * }
     */
    public static MemorySegment GLAD_GL_ARB_texture_view$segment() {
        return GLAD_GL_ARB_texture_view$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_view
     * }
     */
    public static int GLAD_GL_ARB_texture_view() {
        return GLAD_GL_ARB_texture_view$constants.SEGMENT.get(GLAD_GL_ARB_texture_view$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_texture_view
     * }
     */
    public static void GLAD_GL_ARB_texture_view(int varValue) {
        GLAD_GL_ARB_texture_view$constants.SEGMENT.set(GLAD_GL_ARB_texture_view$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_timer_query$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_timer_query").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_timer_query
     * }
     */
    public static OfInt GLAD_GL_ARB_timer_query$layout() {
        return GLAD_GL_ARB_timer_query$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_timer_query
     * }
     */
    public static MemorySegment GLAD_GL_ARB_timer_query$segment() {
        return GLAD_GL_ARB_timer_query$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_timer_query
     * }
     */
    public static int GLAD_GL_ARB_timer_query() {
        return GLAD_GL_ARB_timer_query$constants.SEGMENT.get(GLAD_GL_ARB_timer_query$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_timer_query
     * }
     */
    public static void GLAD_GL_ARB_timer_query(int varValue) {
        GLAD_GL_ARB_timer_query$constants.SEGMENT.set(GLAD_GL_ARB_timer_query$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_transform_feedback2$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_transform_feedback2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback2
     * }
     */
    public static OfInt GLAD_GL_ARB_transform_feedback2$layout() {
        return GLAD_GL_ARB_transform_feedback2$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback2
     * }
     */
    public static MemorySegment GLAD_GL_ARB_transform_feedback2$segment() {
        return GLAD_GL_ARB_transform_feedback2$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback2
     * }
     */
    public static int GLAD_GL_ARB_transform_feedback2() {
        return GLAD_GL_ARB_transform_feedback2$constants.SEGMENT.get(GLAD_GL_ARB_transform_feedback2$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback2
     * }
     */
    public static void GLAD_GL_ARB_transform_feedback2(int varValue) {
        GLAD_GL_ARB_transform_feedback2$constants.SEGMENT.set(GLAD_GL_ARB_transform_feedback2$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_transform_feedback3$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_transform_feedback3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback3
     * }
     */
    public static OfInt GLAD_GL_ARB_transform_feedback3$layout() {
        return GLAD_GL_ARB_transform_feedback3$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback3
     * }
     */
    public static MemorySegment GLAD_GL_ARB_transform_feedback3$segment() {
        return GLAD_GL_ARB_transform_feedback3$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback3
     * }
     */
    public static int GLAD_GL_ARB_transform_feedback3() {
        return GLAD_GL_ARB_transform_feedback3$constants.SEGMENT.get(GLAD_GL_ARB_transform_feedback3$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback3
     * }
     */
    public static void GLAD_GL_ARB_transform_feedback3(int varValue) {
        GLAD_GL_ARB_transform_feedback3$constants.SEGMENT.set(GLAD_GL_ARB_transform_feedback3$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_transform_feedback_instanced$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_transform_feedback_instanced").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback_instanced
     * }
     */
    public static OfInt GLAD_GL_ARB_transform_feedback_instanced$layout() {
        return GLAD_GL_ARB_transform_feedback_instanced$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback_instanced
     * }
     */
    public static MemorySegment GLAD_GL_ARB_transform_feedback_instanced$segment() {
        return GLAD_GL_ARB_transform_feedback_instanced$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback_instanced
     * }
     */
    public static int GLAD_GL_ARB_transform_feedback_instanced() {
        return GLAD_GL_ARB_transform_feedback_instanced$constants.SEGMENT.get(GLAD_GL_ARB_transform_feedback_instanced$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transform_feedback_instanced
     * }
     */
    public static void GLAD_GL_ARB_transform_feedback_instanced(int varValue) {
        GLAD_GL_ARB_transform_feedback_instanced$constants.SEGMENT.set(GLAD_GL_ARB_transform_feedback_instanced$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_transpose_matrix$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_transpose_matrix").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transpose_matrix
     * }
     */
    public static OfInt GLAD_GL_ARB_transpose_matrix$layout() {
        return GLAD_GL_ARB_transpose_matrix$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transpose_matrix
     * }
     */
    public static MemorySegment GLAD_GL_ARB_transpose_matrix$segment() {
        return GLAD_GL_ARB_transpose_matrix$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transpose_matrix
     * }
     */
    public static int GLAD_GL_ARB_transpose_matrix() {
        return GLAD_GL_ARB_transpose_matrix$constants.SEGMENT.get(GLAD_GL_ARB_transpose_matrix$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_transpose_matrix
     * }
     */
    public static void GLAD_GL_ARB_transpose_matrix(int varValue) {
        GLAD_GL_ARB_transpose_matrix$constants.SEGMENT.set(GLAD_GL_ARB_transpose_matrix$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_uniform_buffer_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_uniform_buffer_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_uniform_buffer_object
     * }
     */
    public static OfInt GLAD_GL_ARB_uniform_buffer_object$layout() {
        return GLAD_GL_ARB_uniform_buffer_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_uniform_buffer_object
     * }
     */
    public static MemorySegment GLAD_GL_ARB_uniform_buffer_object$segment() {
        return GLAD_GL_ARB_uniform_buffer_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_uniform_buffer_object
     * }
     */
    public static int GLAD_GL_ARB_uniform_buffer_object() {
        return GLAD_GL_ARB_uniform_buffer_object$constants.SEGMENT.get(GLAD_GL_ARB_uniform_buffer_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_uniform_buffer_object
     * }
     */
    public static void GLAD_GL_ARB_uniform_buffer_object(int varValue) {
        GLAD_GL_ARB_uniform_buffer_object$constants.SEGMENT.set(GLAD_GL_ARB_uniform_buffer_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_vertex_array_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_vertex_array_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_array_object
     * }
     */
    public static OfInt GLAD_GL_ARB_vertex_array_object$layout() {
        return GLAD_GL_ARB_vertex_array_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_array_object
     * }
     */
    public static MemorySegment GLAD_GL_ARB_vertex_array_object$segment() {
        return GLAD_GL_ARB_vertex_array_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_array_object
     * }
     */
    public static int GLAD_GL_ARB_vertex_array_object() {
        return GLAD_GL_ARB_vertex_array_object$constants.SEGMENT.get(GLAD_GL_ARB_vertex_array_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_array_object
     * }
     */
    public static void GLAD_GL_ARB_vertex_array_object(int varValue) {
        GLAD_GL_ARB_vertex_array_object$constants.SEGMENT.set(GLAD_GL_ARB_vertex_array_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_vertex_attrib_64bit$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_vertex_attrib_64bit").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_attrib_64bit
     * }
     */
    public static OfInt GLAD_GL_ARB_vertex_attrib_64bit$layout() {
        return GLAD_GL_ARB_vertex_attrib_64bit$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_attrib_64bit
     * }
     */
    public static MemorySegment GLAD_GL_ARB_vertex_attrib_64bit$segment() {
        return GLAD_GL_ARB_vertex_attrib_64bit$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_attrib_64bit
     * }
     */
    public static int GLAD_GL_ARB_vertex_attrib_64bit() {
        return GLAD_GL_ARB_vertex_attrib_64bit$constants.SEGMENT.get(GLAD_GL_ARB_vertex_attrib_64bit$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_attrib_64bit
     * }
     */
    public static void GLAD_GL_ARB_vertex_attrib_64bit(int varValue) {
        GLAD_GL_ARB_vertex_attrib_64bit$constants.SEGMENT.set(GLAD_GL_ARB_vertex_attrib_64bit$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_vertex_attrib_binding$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_vertex_attrib_binding").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_attrib_binding
     * }
     */
    public static OfInt GLAD_GL_ARB_vertex_attrib_binding$layout() {
        return GLAD_GL_ARB_vertex_attrib_binding$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_attrib_binding
     * }
     */
    public static MemorySegment GLAD_GL_ARB_vertex_attrib_binding$segment() {
        return GLAD_GL_ARB_vertex_attrib_binding$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_attrib_binding
     * }
     */
    public static int GLAD_GL_ARB_vertex_attrib_binding() {
        return GLAD_GL_ARB_vertex_attrib_binding$constants.SEGMENT.get(GLAD_GL_ARB_vertex_attrib_binding$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_attrib_binding
     * }
     */
    public static void GLAD_GL_ARB_vertex_attrib_binding(int varValue) {
        GLAD_GL_ARB_vertex_attrib_binding$constants.SEGMENT.set(GLAD_GL_ARB_vertex_attrib_binding$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_vertex_buffer_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_vertex_buffer_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_buffer_object
     * }
     */
    public static OfInt GLAD_GL_ARB_vertex_buffer_object$layout() {
        return GLAD_GL_ARB_vertex_buffer_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_buffer_object
     * }
     */
    public static MemorySegment GLAD_GL_ARB_vertex_buffer_object$segment() {
        return GLAD_GL_ARB_vertex_buffer_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_buffer_object
     * }
     */
    public static int GLAD_GL_ARB_vertex_buffer_object() {
        return GLAD_GL_ARB_vertex_buffer_object$constants.SEGMENT.get(GLAD_GL_ARB_vertex_buffer_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_buffer_object
     * }
     */
    public static void GLAD_GL_ARB_vertex_buffer_object(int varValue) {
        GLAD_GL_ARB_vertex_buffer_object$constants.SEGMENT.set(GLAD_GL_ARB_vertex_buffer_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_vertex_program$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_vertex_program").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_program
     * }
     */
    public static OfInt GLAD_GL_ARB_vertex_program$layout() {
        return GLAD_GL_ARB_vertex_program$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_program
     * }
     */
    public static MemorySegment GLAD_GL_ARB_vertex_program$segment() {
        return GLAD_GL_ARB_vertex_program$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_program
     * }
     */
    public static int GLAD_GL_ARB_vertex_program() {
        return GLAD_GL_ARB_vertex_program$constants.SEGMENT.get(GLAD_GL_ARB_vertex_program$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_program
     * }
     */
    public static void GLAD_GL_ARB_vertex_program(int varValue) {
        GLAD_GL_ARB_vertex_program$constants.SEGMENT.set(GLAD_GL_ARB_vertex_program$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_vertex_shader$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_vertex_shader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_shader
     * }
     */
    public static OfInt GLAD_GL_ARB_vertex_shader$layout() {
        return GLAD_GL_ARB_vertex_shader$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_shader
     * }
     */
    public static MemorySegment GLAD_GL_ARB_vertex_shader$segment() {
        return GLAD_GL_ARB_vertex_shader$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_shader
     * }
     */
    public static int GLAD_GL_ARB_vertex_shader() {
        return GLAD_GL_ARB_vertex_shader$constants.SEGMENT.get(GLAD_GL_ARB_vertex_shader$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_shader
     * }
     */
    public static void GLAD_GL_ARB_vertex_shader(int varValue) {
        GLAD_GL_ARB_vertex_shader$constants.SEGMENT.set(GLAD_GL_ARB_vertex_shader$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_vertex_type_2_10_10_10_rev$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_vertex_type_2_10_10_10_rev").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_type_2_10_10_10_rev
     * }
     */
    public static OfInt GLAD_GL_ARB_vertex_type_2_10_10_10_rev$layout() {
        return GLAD_GL_ARB_vertex_type_2_10_10_10_rev$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_type_2_10_10_10_rev
     * }
     */
    public static MemorySegment GLAD_GL_ARB_vertex_type_2_10_10_10_rev$segment() {
        return GLAD_GL_ARB_vertex_type_2_10_10_10_rev$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_type_2_10_10_10_rev
     * }
     */
    public static int GLAD_GL_ARB_vertex_type_2_10_10_10_rev() {
        return GLAD_GL_ARB_vertex_type_2_10_10_10_rev$constants.SEGMENT.get(GLAD_GL_ARB_vertex_type_2_10_10_10_rev$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_vertex_type_2_10_10_10_rev
     * }
     */
    public static void GLAD_GL_ARB_vertex_type_2_10_10_10_rev(int varValue) {
        GLAD_GL_ARB_vertex_type_2_10_10_10_rev$constants.SEGMENT.set(GLAD_GL_ARB_vertex_type_2_10_10_10_rev$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_viewport_array$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_viewport_array").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_viewport_array
     * }
     */
    public static OfInt GLAD_GL_ARB_viewport_array$layout() {
        return GLAD_GL_ARB_viewport_array$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_viewport_array
     * }
     */
    public static MemorySegment GLAD_GL_ARB_viewport_array$segment() {
        return GLAD_GL_ARB_viewport_array$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_viewport_array
     * }
     */
    public static int GLAD_GL_ARB_viewport_array() {
        return GLAD_GL_ARB_viewport_array$constants.SEGMENT.get(GLAD_GL_ARB_viewport_array$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_viewport_array
     * }
     */
    public static void GLAD_GL_ARB_viewport_array(int varValue) {
        GLAD_GL_ARB_viewport_array$constants.SEGMENT.set(GLAD_GL_ARB_viewport_array$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ARB_window_pos$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ARB_window_pos").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_window_pos
     * }
     */
    public static OfInt GLAD_GL_ARB_window_pos$layout() {
        return GLAD_GL_ARB_window_pos$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_window_pos
     * }
     */
    public static MemorySegment GLAD_GL_ARB_window_pos$segment() {
        return GLAD_GL_ARB_window_pos$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_window_pos
     * }
     */
    public static int GLAD_GL_ARB_window_pos() {
        return GLAD_GL_ARB_window_pos$constants.SEGMENT.get(GLAD_GL_ARB_window_pos$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ARB_window_pos
     * }
     */
    public static void GLAD_GL_ARB_window_pos(int varValue) {
        GLAD_GL_ARB_window_pos$constants.SEGMENT.set(GLAD_GL_ARB_window_pos$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ATI_draw_buffers$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ATI_draw_buffers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ATI_draw_buffers
     * }
     */
    public static OfInt GLAD_GL_ATI_draw_buffers$layout() {
        return GLAD_GL_ATI_draw_buffers$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ATI_draw_buffers
     * }
     */
    public static MemorySegment GLAD_GL_ATI_draw_buffers$segment() {
        return GLAD_GL_ATI_draw_buffers$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ATI_draw_buffers
     * }
     */
    public static int GLAD_GL_ATI_draw_buffers() {
        return GLAD_GL_ATI_draw_buffers$constants.SEGMENT.get(GLAD_GL_ATI_draw_buffers$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ATI_draw_buffers
     * }
     */
    public static void GLAD_GL_ATI_draw_buffers(int varValue) {
        GLAD_GL_ATI_draw_buffers$constants.SEGMENT.set(GLAD_GL_ATI_draw_buffers$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_ATI_separate_stencil$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_ATI_separate_stencil").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ATI_separate_stencil
     * }
     */
    public static OfInt GLAD_GL_ATI_separate_stencil$layout() {
        return GLAD_GL_ATI_separate_stencil$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ATI_separate_stencil
     * }
     */
    public static MemorySegment GLAD_GL_ATI_separate_stencil$segment() {
        return GLAD_GL_ATI_separate_stencil$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ATI_separate_stencil
     * }
     */
    public static int GLAD_GL_ATI_separate_stencil() {
        return GLAD_GL_ATI_separate_stencil$constants.SEGMENT.get(GLAD_GL_ATI_separate_stencil$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_ATI_separate_stencil
     * }
     */
    public static void GLAD_GL_ATI_separate_stencil(int varValue) {
        GLAD_GL_ATI_separate_stencil$constants.SEGMENT.set(GLAD_GL_ATI_separate_stencil$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_blend_color$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_blend_color").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_color
     * }
     */
    public static OfInt GLAD_GL_EXT_blend_color$layout() {
        return GLAD_GL_EXT_blend_color$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_color
     * }
     */
    public static MemorySegment GLAD_GL_EXT_blend_color$segment() {
        return GLAD_GL_EXT_blend_color$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_color
     * }
     */
    public static int GLAD_GL_EXT_blend_color() {
        return GLAD_GL_EXT_blend_color$constants.SEGMENT.get(GLAD_GL_EXT_blend_color$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_color
     * }
     */
    public static void GLAD_GL_EXT_blend_color(int varValue) {
        GLAD_GL_EXT_blend_color$constants.SEGMENT.set(GLAD_GL_EXT_blend_color$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_blend_equation_separate$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_blend_equation_separate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_equation_separate
     * }
     */
    public static OfInt GLAD_GL_EXT_blend_equation_separate$layout() {
        return GLAD_GL_EXT_blend_equation_separate$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_equation_separate
     * }
     */
    public static MemorySegment GLAD_GL_EXT_blend_equation_separate$segment() {
        return GLAD_GL_EXT_blend_equation_separate$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_equation_separate
     * }
     */
    public static int GLAD_GL_EXT_blend_equation_separate() {
        return GLAD_GL_EXT_blend_equation_separate$constants.SEGMENT.get(GLAD_GL_EXT_blend_equation_separate$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_equation_separate
     * }
     */
    public static void GLAD_GL_EXT_blend_equation_separate(int varValue) {
        GLAD_GL_EXT_blend_equation_separate$constants.SEGMENT.set(GLAD_GL_EXT_blend_equation_separate$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_blend_func_separate$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_blend_func_separate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_func_separate
     * }
     */
    public static OfInt GLAD_GL_EXT_blend_func_separate$layout() {
        return GLAD_GL_EXT_blend_func_separate$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_func_separate
     * }
     */
    public static MemorySegment GLAD_GL_EXT_blend_func_separate$segment() {
        return GLAD_GL_EXT_blend_func_separate$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_func_separate
     * }
     */
    public static int GLAD_GL_EXT_blend_func_separate() {
        return GLAD_GL_EXT_blend_func_separate$constants.SEGMENT.get(GLAD_GL_EXT_blend_func_separate$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_func_separate
     * }
     */
    public static void GLAD_GL_EXT_blend_func_separate(int varValue) {
        GLAD_GL_EXT_blend_func_separate$constants.SEGMENT.set(GLAD_GL_EXT_blend_func_separate$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_blend_minmax$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_blend_minmax").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_minmax
     * }
     */
    public static OfInt GLAD_GL_EXT_blend_minmax$layout() {
        return GLAD_GL_EXT_blend_minmax$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_minmax
     * }
     */
    public static MemorySegment GLAD_GL_EXT_blend_minmax$segment() {
        return GLAD_GL_EXT_blend_minmax$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_minmax
     * }
     */
    public static int GLAD_GL_EXT_blend_minmax() {
        return GLAD_GL_EXT_blend_minmax$constants.SEGMENT.get(GLAD_GL_EXT_blend_minmax$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_blend_minmax
     * }
     */
    public static void GLAD_GL_EXT_blend_minmax(int varValue) {
        GLAD_GL_EXT_blend_minmax$constants.SEGMENT.set(GLAD_GL_EXT_blend_minmax$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_copy_texture$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_copy_texture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_copy_texture
     * }
     */
    public static OfInt GLAD_GL_EXT_copy_texture$layout() {
        return GLAD_GL_EXT_copy_texture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_copy_texture
     * }
     */
    public static MemorySegment GLAD_GL_EXT_copy_texture$segment() {
        return GLAD_GL_EXT_copy_texture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_copy_texture
     * }
     */
    public static int GLAD_GL_EXT_copy_texture() {
        return GLAD_GL_EXT_copy_texture$constants.SEGMENT.get(GLAD_GL_EXT_copy_texture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_copy_texture
     * }
     */
    public static void GLAD_GL_EXT_copy_texture(int varValue) {
        GLAD_GL_EXT_copy_texture$constants.SEGMENT.set(GLAD_GL_EXT_copy_texture$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_direct_state_access$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_direct_state_access").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_direct_state_access
     * }
     */
    public static OfInt GLAD_GL_EXT_direct_state_access$layout() {
        return GLAD_GL_EXT_direct_state_access$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_direct_state_access
     * }
     */
    public static MemorySegment GLAD_GL_EXT_direct_state_access$segment() {
        return GLAD_GL_EXT_direct_state_access$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_direct_state_access
     * }
     */
    public static int GLAD_GL_EXT_direct_state_access() {
        return GLAD_GL_EXT_direct_state_access$constants.SEGMENT.get(GLAD_GL_EXT_direct_state_access$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_direct_state_access
     * }
     */
    public static void GLAD_GL_EXT_direct_state_access(int varValue) {
        GLAD_GL_EXT_direct_state_access$constants.SEGMENT.set(GLAD_GL_EXT_direct_state_access$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_draw_buffers2$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_draw_buffers2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_buffers2
     * }
     */
    public static OfInt GLAD_GL_EXT_draw_buffers2$layout() {
        return GLAD_GL_EXT_draw_buffers2$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_buffers2
     * }
     */
    public static MemorySegment GLAD_GL_EXT_draw_buffers2$segment() {
        return GLAD_GL_EXT_draw_buffers2$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_buffers2
     * }
     */
    public static int GLAD_GL_EXT_draw_buffers2() {
        return GLAD_GL_EXT_draw_buffers2$constants.SEGMENT.get(GLAD_GL_EXT_draw_buffers2$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_buffers2
     * }
     */
    public static void GLAD_GL_EXT_draw_buffers2(int varValue) {
        GLAD_GL_EXT_draw_buffers2$constants.SEGMENT.set(GLAD_GL_EXT_draw_buffers2$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_draw_instanced$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_draw_instanced").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_instanced
     * }
     */
    public static OfInt GLAD_GL_EXT_draw_instanced$layout() {
        return GLAD_GL_EXT_draw_instanced$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_instanced
     * }
     */
    public static MemorySegment GLAD_GL_EXT_draw_instanced$segment() {
        return GLAD_GL_EXT_draw_instanced$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_instanced
     * }
     */
    public static int GLAD_GL_EXT_draw_instanced() {
        return GLAD_GL_EXT_draw_instanced$constants.SEGMENT.get(GLAD_GL_EXT_draw_instanced$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_instanced
     * }
     */
    public static void GLAD_GL_EXT_draw_instanced(int varValue) {
        GLAD_GL_EXT_draw_instanced$constants.SEGMENT.set(GLAD_GL_EXT_draw_instanced$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_draw_range_elements$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_draw_range_elements").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_range_elements
     * }
     */
    public static OfInt GLAD_GL_EXT_draw_range_elements$layout() {
        return GLAD_GL_EXT_draw_range_elements$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_range_elements
     * }
     */
    public static MemorySegment GLAD_GL_EXT_draw_range_elements$segment() {
        return GLAD_GL_EXT_draw_range_elements$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_range_elements
     * }
     */
    public static int GLAD_GL_EXT_draw_range_elements() {
        return GLAD_GL_EXT_draw_range_elements$constants.SEGMENT.get(GLAD_GL_EXT_draw_range_elements$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_draw_range_elements
     * }
     */
    public static void GLAD_GL_EXT_draw_range_elements(int varValue) {
        GLAD_GL_EXT_draw_range_elements$constants.SEGMENT.set(GLAD_GL_EXT_draw_range_elements$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_fog_coord$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_fog_coord").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_fog_coord
     * }
     */
    public static OfInt GLAD_GL_EXT_fog_coord$layout() {
        return GLAD_GL_EXT_fog_coord$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_fog_coord
     * }
     */
    public static MemorySegment GLAD_GL_EXT_fog_coord$segment() {
        return GLAD_GL_EXT_fog_coord$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_fog_coord
     * }
     */
    public static int GLAD_GL_EXT_fog_coord() {
        return GLAD_GL_EXT_fog_coord$constants.SEGMENT.get(GLAD_GL_EXT_fog_coord$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_fog_coord
     * }
     */
    public static void GLAD_GL_EXT_fog_coord(int varValue) {
        GLAD_GL_EXT_fog_coord$constants.SEGMENT.set(GLAD_GL_EXT_fog_coord$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_framebuffer_blit$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_framebuffer_blit").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_blit
     * }
     */
    public static OfInt GLAD_GL_EXT_framebuffer_blit$layout() {
        return GLAD_GL_EXT_framebuffer_blit$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_blit
     * }
     */
    public static MemorySegment GLAD_GL_EXT_framebuffer_blit$segment() {
        return GLAD_GL_EXT_framebuffer_blit$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_blit
     * }
     */
    public static int GLAD_GL_EXT_framebuffer_blit() {
        return GLAD_GL_EXT_framebuffer_blit$constants.SEGMENT.get(GLAD_GL_EXT_framebuffer_blit$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_blit
     * }
     */
    public static void GLAD_GL_EXT_framebuffer_blit(int varValue) {
        GLAD_GL_EXT_framebuffer_blit$constants.SEGMENT.set(GLAD_GL_EXT_framebuffer_blit$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_framebuffer_multisample$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_framebuffer_multisample").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_multisample
     * }
     */
    public static OfInt GLAD_GL_EXT_framebuffer_multisample$layout() {
        return GLAD_GL_EXT_framebuffer_multisample$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_multisample
     * }
     */
    public static MemorySegment GLAD_GL_EXT_framebuffer_multisample$segment() {
        return GLAD_GL_EXT_framebuffer_multisample$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_multisample
     * }
     */
    public static int GLAD_GL_EXT_framebuffer_multisample() {
        return GLAD_GL_EXT_framebuffer_multisample$constants.SEGMENT.get(GLAD_GL_EXT_framebuffer_multisample$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_multisample
     * }
     */
    public static void GLAD_GL_EXT_framebuffer_multisample(int varValue) {
        GLAD_GL_EXT_framebuffer_multisample$constants.SEGMENT.set(GLAD_GL_EXT_framebuffer_multisample$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_framebuffer_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_framebuffer_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_object
     * }
     */
    public static OfInt GLAD_GL_EXT_framebuffer_object$layout() {
        return GLAD_GL_EXT_framebuffer_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_object
     * }
     */
    public static MemorySegment GLAD_GL_EXT_framebuffer_object$segment() {
        return GLAD_GL_EXT_framebuffer_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_object
     * }
     */
    public static int GLAD_GL_EXT_framebuffer_object() {
        return GLAD_GL_EXT_framebuffer_object$constants.SEGMENT.get(GLAD_GL_EXT_framebuffer_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_framebuffer_object
     * }
     */
    public static void GLAD_GL_EXT_framebuffer_object(int varValue) {
        GLAD_GL_EXT_framebuffer_object$constants.SEGMENT.set(GLAD_GL_EXT_framebuffer_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_geometry_shader4$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_geometry_shader4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_geometry_shader4
     * }
     */
    public static OfInt GLAD_GL_EXT_geometry_shader4$layout() {
        return GLAD_GL_EXT_geometry_shader4$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_geometry_shader4
     * }
     */
    public static MemorySegment GLAD_GL_EXT_geometry_shader4$segment() {
        return GLAD_GL_EXT_geometry_shader4$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_geometry_shader4
     * }
     */
    public static int GLAD_GL_EXT_geometry_shader4() {
        return GLAD_GL_EXT_geometry_shader4$constants.SEGMENT.get(GLAD_GL_EXT_geometry_shader4$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_geometry_shader4
     * }
     */
    public static void GLAD_GL_EXT_geometry_shader4(int varValue) {
        GLAD_GL_EXT_geometry_shader4$constants.SEGMENT.set(GLAD_GL_EXT_geometry_shader4$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_gpu_shader4$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_gpu_shader4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_gpu_shader4
     * }
     */
    public static OfInt GLAD_GL_EXT_gpu_shader4$layout() {
        return GLAD_GL_EXT_gpu_shader4$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_gpu_shader4
     * }
     */
    public static MemorySegment GLAD_GL_EXT_gpu_shader4$segment() {
        return GLAD_GL_EXT_gpu_shader4$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_gpu_shader4
     * }
     */
    public static int GLAD_GL_EXT_gpu_shader4() {
        return GLAD_GL_EXT_gpu_shader4$constants.SEGMENT.get(GLAD_GL_EXT_gpu_shader4$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_gpu_shader4
     * }
     */
    public static void GLAD_GL_EXT_gpu_shader4(int varValue) {
        GLAD_GL_EXT_gpu_shader4$constants.SEGMENT.set(GLAD_GL_EXT_gpu_shader4$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_multi_draw_arrays$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_multi_draw_arrays").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_multi_draw_arrays
     * }
     */
    public static OfInt GLAD_GL_EXT_multi_draw_arrays$layout() {
        return GLAD_GL_EXT_multi_draw_arrays$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_multi_draw_arrays
     * }
     */
    public static MemorySegment GLAD_GL_EXT_multi_draw_arrays$segment() {
        return GLAD_GL_EXT_multi_draw_arrays$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_multi_draw_arrays
     * }
     */
    public static int GLAD_GL_EXT_multi_draw_arrays() {
        return GLAD_GL_EXT_multi_draw_arrays$constants.SEGMENT.get(GLAD_GL_EXT_multi_draw_arrays$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_multi_draw_arrays
     * }
     */
    public static void GLAD_GL_EXT_multi_draw_arrays(int varValue) {
        GLAD_GL_EXT_multi_draw_arrays$constants.SEGMENT.set(GLAD_GL_EXT_multi_draw_arrays$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_point_parameters$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_point_parameters").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_point_parameters
     * }
     */
    public static OfInt GLAD_GL_EXT_point_parameters$layout() {
        return GLAD_GL_EXT_point_parameters$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_point_parameters
     * }
     */
    public static MemorySegment GLAD_GL_EXT_point_parameters$segment() {
        return GLAD_GL_EXT_point_parameters$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_point_parameters
     * }
     */
    public static int GLAD_GL_EXT_point_parameters() {
        return GLAD_GL_EXT_point_parameters$constants.SEGMENT.get(GLAD_GL_EXT_point_parameters$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_point_parameters
     * }
     */
    public static void GLAD_GL_EXT_point_parameters(int varValue) {
        GLAD_GL_EXT_point_parameters$constants.SEGMENT.set(GLAD_GL_EXT_point_parameters$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_polygon_offset_clamp$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_polygon_offset_clamp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_polygon_offset_clamp
     * }
     */
    public static OfInt GLAD_GL_EXT_polygon_offset_clamp$layout() {
        return GLAD_GL_EXT_polygon_offset_clamp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_polygon_offset_clamp
     * }
     */
    public static MemorySegment GLAD_GL_EXT_polygon_offset_clamp$segment() {
        return GLAD_GL_EXT_polygon_offset_clamp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_polygon_offset_clamp
     * }
     */
    public static int GLAD_GL_EXT_polygon_offset_clamp() {
        return GLAD_GL_EXT_polygon_offset_clamp$constants.SEGMENT.get(GLAD_GL_EXT_polygon_offset_clamp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_polygon_offset_clamp
     * }
     */
    public static void GLAD_GL_EXT_polygon_offset_clamp(int varValue) {
        GLAD_GL_EXT_polygon_offset_clamp$constants.SEGMENT.set(GLAD_GL_EXT_polygon_offset_clamp$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_provoking_vertex$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_provoking_vertex").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_provoking_vertex
     * }
     */
    public static OfInt GLAD_GL_EXT_provoking_vertex$layout() {
        return GLAD_GL_EXT_provoking_vertex$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_provoking_vertex
     * }
     */
    public static MemorySegment GLAD_GL_EXT_provoking_vertex$segment() {
        return GLAD_GL_EXT_provoking_vertex$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_provoking_vertex
     * }
     */
    public static int GLAD_GL_EXT_provoking_vertex() {
        return GLAD_GL_EXT_provoking_vertex$constants.SEGMENT.get(GLAD_GL_EXT_provoking_vertex$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_provoking_vertex
     * }
     */
    public static void GLAD_GL_EXT_provoking_vertex(int varValue) {
        GLAD_GL_EXT_provoking_vertex$constants.SEGMENT.set(GLAD_GL_EXT_provoking_vertex$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_secondary_color$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_secondary_color").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_secondary_color
     * }
     */
    public static OfInt GLAD_GL_EXT_secondary_color$layout() {
        return GLAD_GL_EXT_secondary_color$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_secondary_color
     * }
     */
    public static MemorySegment GLAD_GL_EXT_secondary_color$segment() {
        return GLAD_GL_EXT_secondary_color$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_secondary_color
     * }
     */
    public static int GLAD_GL_EXT_secondary_color() {
        return GLAD_GL_EXT_secondary_color$constants.SEGMENT.get(GLAD_GL_EXT_secondary_color$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_secondary_color
     * }
     */
    public static void GLAD_GL_EXT_secondary_color(int varValue) {
        GLAD_GL_EXT_secondary_color$constants.SEGMENT.set(GLAD_GL_EXT_secondary_color$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_shader_image_load_store$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_shader_image_load_store").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_shader_image_load_store
     * }
     */
    public static OfInt GLAD_GL_EXT_shader_image_load_store$layout() {
        return GLAD_GL_EXT_shader_image_load_store$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_shader_image_load_store
     * }
     */
    public static MemorySegment GLAD_GL_EXT_shader_image_load_store$segment() {
        return GLAD_GL_EXT_shader_image_load_store$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_shader_image_load_store
     * }
     */
    public static int GLAD_GL_EXT_shader_image_load_store() {
        return GLAD_GL_EXT_shader_image_load_store$constants.SEGMENT.get(GLAD_GL_EXT_shader_image_load_store$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_shader_image_load_store
     * }
     */
    public static void GLAD_GL_EXT_shader_image_load_store(int varValue) {
        GLAD_GL_EXT_shader_image_load_store$constants.SEGMENT.set(GLAD_GL_EXT_shader_image_load_store$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_subtexture$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_subtexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_subtexture
     * }
     */
    public static OfInt GLAD_GL_EXT_subtexture$layout() {
        return GLAD_GL_EXT_subtexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_subtexture
     * }
     */
    public static MemorySegment GLAD_GL_EXT_subtexture$segment() {
        return GLAD_GL_EXT_subtexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_subtexture
     * }
     */
    public static int GLAD_GL_EXT_subtexture() {
        return GLAD_GL_EXT_subtexture$constants.SEGMENT.get(GLAD_GL_EXT_subtexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_subtexture
     * }
     */
    public static void GLAD_GL_EXT_subtexture(int varValue) {
        GLAD_GL_EXT_subtexture$constants.SEGMENT.set(GLAD_GL_EXT_subtexture$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_texture3D$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_texture3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture3D
     * }
     */
    public static OfInt GLAD_GL_EXT_texture3D$layout() {
        return GLAD_GL_EXT_texture3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture3D
     * }
     */
    public static MemorySegment GLAD_GL_EXT_texture3D$segment() {
        return GLAD_GL_EXT_texture3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture3D
     * }
     */
    public static int GLAD_GL_EXT_texture3D() {
        return GLAD_GL_EXT_texture3D$constants.SEGMENT.get(GLAD_GL_EXT_texture3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture3D
     * }
     */
    public static void GLAD_GL_EXT_texture3D(int varValue) {
        GLAD_GL_EXT_texture3D$constants.SEGMENT.set(GLAD_GL_EXT_texture3D$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_texture_array$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_texture_array").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_array
     * }
     */
    public static OfInt GLAD_GL_EXT_texture_array$layout() {
        return GLAD_GL_EXT_texture_array$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_array
     * }
     */
    public static MemorySegment GLAD_GL_EXT_texture_array$segment() {
        return GLAD_GL_EXT_texture_array$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_array
     * }
     */
    public static int GLAD_GL_EXT_texture_array() {
        return GLAD_GL_EXT_texture_array$constants.SEGMENT.get(GLAD_GL_EXT_texture_array$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_array
     * }
     */
    public static void GLAD_GL_EXT_texture_array(int varValue) {
        GLAD_GL_EXT_texture_array$constants.SEGMENT.set(GLAD_GL_EXT_texture_array$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_texture_buffer_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_texture_buffer_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_buffer_object
     * }
     */
    public static OfInt GLAD_GL_EXT_texture_buffer_object$layout() {
        return GLAD_GL_EXT_texture_buffer_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_buffer_object
     * }
     */
    public static MemorySegment GLAD_GL_EXT_texture_buffer_object$segment() {
        return GLAD_GL_EXT_texture_buffer_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_buffer_object
     * }
     */
    public static int GLAD_GL_EXT_texture_buffer_object() {
        return GLAD_GL_EXT_texture_buffer_object$constants.SEGMENT.get(GLAD_GL_EXT_texture_buffer_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_buffer_object
     * }
     */
    public static void GLAD_GL_EXT_texture_buffer_object(int varValue) {
        GLAD_GL_EXT_texture_buffer_object$constants.SEGMENT.set(GLAD_GL_EXT_texture_buffer_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_texture_integer$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_texture_integer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_integer
     * }
     */
    public static OfInt GLAD_GL_EXT_texture_integer$layout() {
        return GLAD_GL_EXT_texture_integer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_integer
     * }
     */
    public static MemorySegment GLAD_GL_EXT_texture_integer$segment() {
        return GLAD_GL_EXT_texture_integer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_integer
     * }
     */
    public static int GLAD_GL_EXT_texture_integer() {
        return GLAD_GL_EXT_texture_integer$constants.SEGMENT.get(GLAD_GL_EXT_texture_integer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_integer
     * }
     */
    public static void GLAD_GL_EXT_texture_integer(int varValue) {
        GLAD_GL_EXT_texture_integer$constants.SEGMENT.set(GLAD_GL_EXT_texture_integer$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_texture_object$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_texture_object").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_object
     * }
     */
    public static OfInt GLAD_GL_EXT_texture_object$layout() {
        return GLAD_GL_EXT_texture_object$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_object
     * }
     */
    public static MemorySegment GLAD_GL_EXT_texture_object$segment() {
        return GLAD_GL_EXT_texture_object$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_object
     * }
     */
    public static int GLAD_GL_EXT_texture_object() {
        return GLAD_GL_EXT_texture_object$constants.SEGMENT.get(GLAD_GL_EXT_texture_object$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_object
     * }
     */
    public static void GLAD_GL_EXT_texture_object(int varValue) {
        GLAD_GL_EXT_texture_object$constants.SEGMENT.set(GLAD_GL_EXT_texture_object$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_texture_storage$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_texture_storage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_storage
     * }
     */
    public static OfInt GLAD_GL_EXT_texture_storage$layout() {
        return GLAD_GL_EXT_texture_storage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_storage
     * }
     */
    public static MemorySegment GLAD_GL_EXT_texture_storage$segment() {
        return GLAD_GL_EXT_texture_storage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_storage
     * }
     */
    public static int GLAD_GL_EXT_texture_storage() {
        return GLAD_GL_EXT_texture_storage$constants.SEGMENT.get(GLAD_GL_EXT_texture_storage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_texture_storage
     * }
     */
    public static void GLAD_GL_EXT_texture_storage(int varValue) {
        GLAD_GL_EXT_texture_storage$constants.SEGMENT.set(GLAD_GL_EXT_texture_storage$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_timer_query$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_timer_query").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_timer_query
     * }
     */
    public static OfInt GLAD_GL_EXT_timer_query$layout() {
        return GLAD_GL_EXT_timer_query$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_timer_query
     * }
     */
    public static MemorySegment GLAD_GL_EXT_timer_query$segment() {
        return GLAD_GL_EXT_timer_query$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_timer_query
     * }
     */
    public static int GLAD_GL_EXT_timer_query() {
        return GLAD_GL_EXT_timer_query$constants.SEGMENT.get(GLAD_GL_EXT_timer_query$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_timer_query
     * }
     */
    public static void GLAD_GL_EXT_timer_query(int varValue) {
        GLAD_GL_EXT_timer_query$constants.SEGMENT.set(GLAD_GL_EXT_timer_query$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_transform_feedback$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_transform_feedback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_transform_feedback
     * }
     */
    public static OfInt GLAD_GL_EXT_transform_feedback$layout() {
        return GLAD_GL_EXT_transform_feedback$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_transform_feedback
     * }
     */
    public static MemorySegment GLAD_GL_EXT_transform_feedback$segment() {
        return GLAD_GL_EXT_transform_feedback$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_transform_feedback
     * }
     */
    public static int GLAD_GL_EXT_transform_feedback() {
        return GLAD_GL_EXT_transform_feedback$constants.SEGMENT.get(GLAD_GL_EXT_transform_feedback$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_transform_feedback
     * }
     */
    public static void GLAD_GL_EXT_transform_feedback(int varValue) {
        GLAD_GL_EXT_transform_feedback$constants.SEGMENT.set(GLAD_GL_EXT_transform_feedback$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_vertex_array$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_vertex_array").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_vertex_array
     * }
     */
    public static OfInt GLAD_GL_EXT_vertex_array$layout() {
        return GLAD_GL_EXT_vertex_array$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_vertex_array
     * }
     */
    public static MemorySegment GLAD_GL_EXT_vertex_array$segment() {
        return GLAD_GL_EXT_vertex_array$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_vertex_array
     * }
     */
    public static int GLAD_GL_EXT_vertex_array() {
        return GLAD_GL_EXT_vertex_array$constants.SEGMENT.get(GLAD_GL_EXT_vertex_array$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_vertex_array
     * }
     */
    public static void GLAD_GL_EXT_vertex_array(int varValue) {
        GLAD_GL_EXT_vertex_array$constants.SEGMENT.set(GLAD_GL_EXT_vertex_array$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_EXT_vertex_attrib_64bit$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_EXT_vertex_attrib_64bit").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_vertex_attrib_64bit
     * }
     */
    public static OfInt GLAD_GL_EXT_vertex_attrib_64bit$layout() {
        return GLAD_GL_EXT_vertex_attrib_64bit$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_vertex_attrib_64bit
     * }
     */
    public static MemorySegment GLAD_GL_EXT_vertex_attrib_64bit$segment() {
        return GLAD_GL_EXT_vertex_attrib_64bit$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_vertex_attrib_64bit
     * }
     */
    public static int GLAD_GL_EXT_vertex_attrib_64bit() {
        return GLAD_GL_EXT_vertex_attrib_64bit$constants.SEGMENT.get(GLAD_GL_EXT_vertex_attrib_64bit$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_EXT_vertex_attrib_64bit
     * }
     */
    public static void GLAD_GL_EXT_vertex_attrib_64bit(int varValue) {
        GLAD_GL_EXT_vertex_attrib_64bit$constants.SEGMENT.set(GLAD_GL_EXT_vertex_attrib_64bit$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_INGR_blend_func_separate$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_INGR_blend_func_separate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_INGR_blend_func_separate
     * }
     */
    public static OfInt GLAD_GL_INGR_blend_func_separate$layout() {
        return GLAD_GL_INGR_blend_func_separate$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_INGR_blend_func_separate
     * }
     */
    public static MemorySegment GLAD_GL_INGR_blend_func_separate$segment() {
        return GLAD_GL_INGR_blend_func_separate$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_INGR_blend_func_separate
     * }
     */
    public static int GLAD_GL_INGR_blend_func_separate() {
        return GLAD_GL_INGR_blend_func_separate$constants.SEGMENT.get(GLAD_GL_INGR_blend_func_separate$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_INGR_blend_func_separate
     * }
     */
    public static void GLAD_GL_INGR_blend_func_separate(int varValue) {
        GLAD_GL_INGR_blend_func_separate$constants.SEGMENT.set(GLAD_GL_INGR_blend_func_separate$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_KHR_debug$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_KHR_debug").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_KHR_debug
     * }
     */
    public static OfInt GLAD_GL_KHR_debug$layout() {
        return GLAD_GL_KHR_debug$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_KHR_debug
     * }
     */
    public static MemorySegment GLAD_GL_KHR_debug$segment() {
        return GLAD_GL_KHR_debug$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_KHR_debug
     * }
     */
    public static int GLAD_GL_KHR_debug() {
        return GLAD_GL_KHR_debug$constants.SEGMENT.get(GLAD_GL_KHR_debug$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_KHR_debug
     * }
     */
    public static void GLAD_GL_KHR_debug(int varValue) {
        GLAD_GL_KHR_debug$constants.SEGMENT.set(GLAD_GL_KHR_debug$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_KHR_robustness$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_KHR_robustness").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_KHR_robustness
     * }
     */
    public static OfInt GLAD_GL_KHR_robustness$layout() {
        return GLAD_GL_KHR_robustness$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_KHR_robustness
     * }
     */
    public static MemorySegment GLAD_GL_KHR_robustness$segment() {
        return GLAD_GL_KHR_robustness$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_KHR_robustness
     * }
     */
    public static int GLAD_GL_KHR_robustness() {
        return GLAD_GL_KHR_robustness$constants.SEGMENT.get(GLAD_GL_KHR_robustness$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_KHR_robustness
     * }
     */
    public static void GLAD_GL_KHR_robustness(int varValue) {
        GLAD_GL_KHR_robustness$constants.SEGMENT.set(GLAD_GL_KHR_robustness$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_MESA_window_pos$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_MESA_window_pos").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_MESA_window_pos
     * }
     */
    public static OfInt GLAD_GL_MESA_window_pos$layout() {
        return GLAD_GL_MESA_window_pos$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_MESA_window_pos
     * }
     */
    public static MemorySegment GLAD_GL_MESA_window_pos$segment() {
        return GLAD_GL_MESA_window_pos$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_MESA_window_pos
     * }
     */
    public static int GLAD_GL_MESA_window_pos() {
        return GLAD_GL_MESA_window_pos$constants.SEGMENT.get(GLAD_GL_MESA_window_pos$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_MESA_window_pos
     * }
     */
    public static void GLAD_GL_MESA_window_pos(int varValue) {
        GLAD_GL_MESA_window_pos$constants.SEGMENT.set(GLAD_GL_MESA_window_pos$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NVX_conditional_render$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NVX_conditional_render").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NVX_conditional_render
     * }
     */
    public static OfInt GLAD_GL_NVX_conditional_render$layout() {
        return GLAD_GL_NVX_conditional_render$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NVX_conditional_render
     * }
     */
    public static MemorySegment GLAD_GL_NVX_conditional_render$segment() {
        return GLAD_GL_NVX_conditional_render$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NVX_conditional_render
     * }
     */
    public static int GLAD_GL_NVX_conditional_render() {
        return GLAD_GL_NVX_conditional_render$constants.SEGMENT.get(GLAD_GL_NVX_conditional_render$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NVX_conditional_render
     * }
     */
    public static void GLAD_GL_NVX_conditional_render(int varValue) {
        GLAD_GL_NVX_conditional_render$constants.SEGMENT.set(GLAD_GL_NVX_conditional_render$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NV_conditional_render$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NV_conditional_render").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_conditional_render
     * }
     */
    public static OfInt GLAD_GL_NV_conditional_render$layout() {
        return GLAD_GL_NV_conditional_render$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_conditional_render
     * }
     */
    public static MemorySegment GLAD_GL_NV_conditional_render$segment() {
        return GLAD_GL_NV_conditional_render$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_conditional_render
     * }
     */
    public static int GLAD_GL_NV_conditional_render() {
        return GLAD_GL_NV_conditional_render$constants.SEGMENT.get(GLAD_GL_NV_conditional_render$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_conditional_render
     * }
     */
    public static void GLAD_GL_NV_conditional_render(int varValue) {
        GLAD_GL_NV_conditional_render$constants.SEGMENT.set(GLAD_GL_NV_conditional_render$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NV_explicit_multisample$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NV_explicit_multisample").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_explicit_multisample
     * }
     */
    public static OfInt GLAD_GL_NV_explicit_multisample$layout() {
        return GLAD_GL_NV_explicit_multisample$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_explicit_multisample
     * }
     */
    public static MemorySegment GLAD_GL_NV_explicit_multisample$segment() {
        return GLAD_GL_NV_explicit_multisample$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_explicit_multisample
     * }
     */
    public static int GLAD_GL_NV_explicit_multisample() {
        return GLAD_GL_NV_explicit_multisample$constants.SEGMENT.get(GLAD_GL_NV_explicit_multisample$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_explicit_multisample
     * }
     */
    public static void GLAD_GL_NV_explicit_multisample(int varValue) {
        GLAD_GL_NV_explicit_multisample$constants.SEGMENT.set(GLAD_GL_NV_explicit_multisample$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NV_geometry_program4$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NV_geometry_program4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_geometry_program4
     * }
     */
    public static OfInt GLAD_GL_NV_geometry_program4$layout() {
        return GLAD_GL_NV_geometry_program4$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_geometry_program4
     * }
     */
    public static MemorySegment GLAD_GL_NV_geometry_program4$segment() {
        return GLAD_GL_NV_geometry_program4$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_geometry_program4
     * }
     */
    public static int GLAD_GL_NV_geometry_program4() {
        return GLAD_GL_NV_geometry_program4$constants.SEGMENT.get(GLAD_GL_NV_geometry_program4$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_geometry_program4
     * }
     */
    public static void GLAD_GL_NV_geometry_program4(int varValue) {
        GLAD_GL_NV_geometry_program4$constants.SEGMENT.set(GLAD_GL_NV_geometry_program4$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NV_point_sprite$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NV_point_sprite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_point_sprite
     * }
     */
    public static OfInt GLAD_GL_NV_point_sprite$layout() {
        return GLAD_GL_NV_point_sprite$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_point_sprite
     * }
     */
    public static MemorySegment GLAD_GL_NV_point_sprite$segment() {
        return GLAD_GL_NV_point_sprite$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_point_sprite
     * }
     */
    public static int GLAD_GL_NV_point_sprite() {
        return GLAD_GL_NV_point_sprite$constants.SEGMENT.get(GLAD_GL_NV_point_sprite$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_point_sprite
     * }
     */
    public static void GLAD_GL_NV_point_sprite(int varValue) {
        GLAD_GL_NV_point_sprite$constants.SEGMENT.set(GLAD_GL_NV_point_sprite$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NV_transform_feedback$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NV_transform_feedback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_transform_feedback
     * }
     */
    public static OfInt GLAD_GL_NV_transform_feedback$layout() {
        return GLAD_GL_NV_transform_feedback$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_transform_feedback
     * }
     */
    public static MemorySegment GLAD_GL_NV_transform_feedback$segment() {
        return GLAD_GL_NV_transform_feedback$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_transform_feedback
     * }
     */
    public static int GLAD_GL_NV_transform_feedback() {
        return GLAD_GL_NV_transform_feedback$constants.SEGMENT.get(GLAD_GL_NV_transform_feedback$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_transform_feedback
     * }
     */
    public static void GLAD_GL_NV_transform_feedback(int varValue) {
        GLAD_GL_NV_transform_feedback$constants.SEGMENT.set(GLAD_GL_NV_transform_feedback$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NV_transform_feedback2$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NV_transform_feedback2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_transform_feedback2
     * }
     */
    public static OfInt GLAD_GL_NV_transform_feedback2$layout() {
        return GLAD_GL_NV_transform_feedback2$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_transform_feedback2
     * }
     */
    public static MemorySegment GLAD_GL_NV_transform_feedback2$segment() {
        return GLAD_GL_NV_transform_feedback2$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_transform_feedback2
     * }
     */
    public static int GLAD_GL_NV_transform_feedback2() {
        return GLAD_GL_NV_transform_feedback2$constants.SEGMENT.get(GLAD_GL_NV_transform_feedback2$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_transform_feedback2
     * }
     */
    public static void GLAD_GL_NV_transform_feedback2(int varValue) {
        GLAD_GL_NV_transform_feedback2$constants.SEGMENT.set(GLAD_GL_NV_transform_feedback2$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NV_vertex_program$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NV_vertex_program").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_vertex_program
     * }
     */
    public static OfInt GLAD_GL_NV_vertex_program$layout() {
        return GLAD_GL_NV_vertex_program$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_vertex_program
     * }
     */
    public static MemorySegment GLAD_GL_NV_vertex_program$segment() {
        return GLAD_GL_NV_vertex_program$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_vertex_program
     * }
     */
    public static int GLAD_GL_NV_vertex_program() {
        return GLAD_GL_NV_vertex_program$constants.SEGMENT.get(GLAD_GL_NV_vertex_program$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_vertex_program
     * }
     */
    public static void GLAD_GL_NV_vertex_program(int varValue) {
        GLAD_GL_NV_vertex_program$constants.SEGMENT.set(GLAD_GL_NV_vertex_program$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_NV_vertex_program4$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_NV_vertex_program4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_vertex_program4
     * }
     */
    public static OfInt GLAD_GL_NV_vertex_program4$layout() {
        return GLAD_GL_NV_vertex_program4$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_vertex_program4
     * }
     */
    public static MemorySegment GLAD_GL_NV_vertex_program4$segment() {
        return GLAD_GL_NV_vertex_program4$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_vertex_program4
     * }
     */
    public static int GLAD_GL_NV_vertex_program4() {
        return GLAD_GL_NV_vertex_program4$constants.SEGMENT.get(GLAD_GL_NV_vertex_program4$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_NV_vertex_program4
     * }
     */
    public static void GLAD_GL_NV_vertex_program4(int varValue) {
        GLAD_GL_NV_vertex_program4$constants.SEGMENT.set(GLAD_GL_NV_vertex_program4$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_OES_single_precision$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_OES_single_precision").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_OES_single_precision
     * }
     */
    public static OfInt GLAD_GL_OES_single_precision$layout() {
        return GLAD_GL_OES_single_precision$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_OES_single_precision
     * }
     */
    public static MemorySegment GLAD_GL_OES_single_precision$segment() {
        return GLAD_GL_OES_single_precision$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_OES_single_precision
     * }
     */
    public static int GLAD_GL_OES_single_precision() {
        return GLAD_GL_OES_single_precision$constants.SEGMENT.get(GLAD_GL_OES_single_precision$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_OES_single_precision
     * }
     */
    public static void GLAD_GL_OES_single_precision(int varValue) {
        GLAD_GL_OES_single_precision$constants.SEGMENT.set(GLAD_GL_OES_single_precision$constants.LAYOUT, 0L, varValue);
    }

    private static class GLAD_GL_SGIS_point_parameters$constants {
        public static final OfInt LAYOUT = glcore.C_INT;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("GLAD_GL_SGIS_point_parameters").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_SGIS_point_parameters
     * }
     */
    public static OfInt GLAD_GL_SGIS_point_parameters$layout() {
        return GLAD_GL_SGIS_point_parameters$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_SGIS_point_parameters
     * }
     */
    public static MemorySegment GLAD_GL_SGIS_point_parameters$segment() {
        return GLAD_GL_SGIS_point_parameters$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_SGIS_point_parameters
     * }
     */
    public static int GLAD_GL_SGIS_point_parameters() {
        return GLAD_GL_SGIS_point_parameters$constants.SEGMENT.get(GLAD_GL_SGIS_point_parameters$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int GLAD_GL_SGIS_point_parameters
     * }
     */
    public static void GLAD_GL_SGIS_point_parameters(int varValue) {
        GLAD_GL_SGIS_point_parameters$constants.SEGMENT.set(GLAD_GL_SGIS_point_parameters$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glAccum$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glAccum").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACCUMPROC glad_glAccum
     * }
     */
    public static AddressLayout glad_glAccum$layout() {
        return glad_glAccum$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACCUMPROC glad_glAccum
     * }
     */
    public static MemorySegment glad_glAccum$segment() {
        return glad_glAccum$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACCUMPROC glad_glAccum
     * }
     */
    public static MemorySegment glad_glAccum() {
        return glad_glAccum$constants.SEGMENT.get(glad_glAccum$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACCUMPROC glad_glAccum
     * }
     */
    public static void glad_glAccum(MemorySegment varValue) {
        glad_glAccum$constants.SEGMENT.set(glad_glAccum$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glAccum$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glAccum").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACCUMPROC glad_debug_glAccum
     * }
     */
    public static AddressLayout glad_debug_glAccum$layout() {
        return glad_debug_glAccum$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACCUMPROC glad_debug_glAccum
     * }
     */
    public static MemorySegment glad_debug_glAccum$segment() {
        return glad_debug_glAccum$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACCUMPROC glad_debug_glAccum
     * }
     */
    public static MemorySegment glad_debug_glAccum() {
        return glad_debug_glAccum$constants.SEGMENT.get(glad_debug_glAccum$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACCUMPROC glad_debug_glAccum
     * }
     */
    public static void glad_debug_glAccum(MemorySegment varValue) {
        glad_debug_glAccum$constants.SEGMENT.set(glad_debug_glAccum$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glActiveShaderProgram$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glActiveShaderProgram").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram
     * }
     */
    public static AddressLayout glad_glActiveShaderProgram$layout() {
        return glad_glActiveShaderProgram$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram
     * }
     */
    public static MemorySegment glad_glActiveShaderProgram$segment() {
        return glad_glActiveShaderProgram$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram
     * }
     */
    public static MemorySegment glad_glActiveShaderProgram() {
        return glad_glActiveShaderProgram$constants.SEGMENT.get(glad_glActiveShaderProgram$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram
     * }
     */
    public static void glad_glActiveShaderProgram(MemorySegment varValue) {
        glad_glActiveShaderProgram$constants.SEGMENT.set(glad_glActiveShaderProgram$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glActiveShaderProgram$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glActiveShaderProgram").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram
     * }
     */
    public static AddressLayout glad_debug_glActiveShaderProgram$layout() {
        return glad_debug_glActiveShaderProgram$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram
     * }
     */
    public static MemorySegment glad_debug_glActiveShaderProgram$segment() {
        return glad_debug_glActiveShaderProgram$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram
     * }
     */
    public static MemorySegment glad_debug_glActiveShaderProgram() {
        return glad_debug_glActiveShaderProgram$constants.SEGMENT.get(glad_debug_glActiveShaderProgram$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram
     * }
     */
    public static void glad_debug_glActiveShaderProgram(MemorySegment varValue) {
        glad_debug_glActiveShaderProgram$constants.SEGMENT.set(glad_debug_glActiveShaderProgram$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glActiveTexture$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glActiveTexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREPROC glad_glActiveTexture
     * }
     */
    public static AddressLayout glad_glActiveTexture$layout() {
        return glad_glActiveTexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREPROC glad_glActiveTexture
     * }
     */
    public static MemorySegment glad_glActiveTexture$segment() {
        return glad_glActiveTexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREPROC glad_glActiveTexture
     * }
     */
    public static MemorySegment glad_glActiveTexture() {
        return glad_glActiveTexture$constants.SEGMENT.get(glad_glActiveTexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREPROC glad_glActiveTexture
     * }
     */
    public static void glad_glActiveTexture(MemorySegment varValue) {
        glad_glActiveTexture$constants.SEGMENT.set(glad_glActiveTexture$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glActiveTexture$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glActiveTexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture
     * }
     */
    public static AddressLayout glad_debug_glActiveTexture$layout() {
        return glad_debug_glActiveTexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture
     * }
     */
    public static MemorySegment glad_debug_glActiveTexture$segment() {
        return glad_debug_glActiveTexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture
     * }
     */
    public static MemorySegment glad_debug_glActiveTexture() {
        return glad_debug_glActiveTexture$constants.SEGMENT.get(glad_debug_glActiveTexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture
     * }
     */
    public static void glad_debug_glActiveTexture(MemorySegment varValue) {
        glad_debug_glActiveTexture$constants.SEGMENT.set(glad_debug_glActiveTexture$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glActiveTextureARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glActiveTextureARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB
     * }
     */
    public static AddressLayout glad_glActiveTextureARB$layout() {
        return glad_glActiveTextureARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB
     * }
     */
    public static MemorySegment glad_glActiveTextureARB$segment() {
        return glad_glActiveTextureARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB
     * }
     */
    public static MemorySegment glad_glActiveTextureARB() {
        return glad_glActiveTextureARB$constants.SEGMENT.get(glad_glActiveTextureARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB
     * }
     */
    public static void glad_glActiveTextureARB(MemorySegment varValue) {
        glad_glActiveTextureARB$constants.SEGMENT.set(glad_glActiveTextureARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glActiveTextureARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glActiveTextureARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREARBPROC glad_debug_glActiveTextureARB
     * }
     */
    public static AddressLayout glad_debug_glActiveTextureARB$layout() {
        return glad_debug_glActiveTextureARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREARBPROC glad_debug_glActiveTextureARB
     * }
     */
    public static MemorySegment glad_debug_glActiveTextureARB$segment() {
        return glad_debug_glActiveTextureARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREARBPROC glad_debug_glActiveTextureARB
     * }
     */
    public static MemorySegment glad_debug_glActiveTextureARB() {
        return glad_debug_glActiveTextureARB$constants.SEGMENT.get(glad_debug_glActiveTextureARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVETEXTUREARBPROC glad_debug_glActiveTextureARB
     * }
     */
    public static void glad_debug_glActiveTextureARB(MemorySegment varValue) {
        glad_debug_glActiveTextureARB$constants.SEGMENT.set(glad_debug_glActiveTextureARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glActiveVaryingNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glActiveVaryingNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVEVARYINGNVPROC glad_glActiveVaryingNV
     * }
     */
    public static AddressLayout glad_glActiveVaryingNV$layout() {
        return glad_glActiveVaryingNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVEVARYINGNVPROC glad_glActiveVaryingNV
     * }
     */
    public static MemorySegment glad_glActiveVaryingNV$segment() {
        return glad_glActiveVaryingNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVEVARYINGNVPROC glad_glActiveVaryingNV
     * }
     */
    public static MemorySegment glad_glActiveVaryingNV() {
        return glad_glActiveVaryingNV$constants.SEGMENT.get(glad_glActiveVaryingNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVEVARYINGNVPROC glad_glActiveVaryingNV
     * }
     */
    public static void glad_glActiveVaryingNV(MemorySegment varValue) {
        glad_glActiveVaryingNV$constants.SEGMENT.set(glad_glActiveVaryingNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glActiveVaryingNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glActiveVaryingNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVEVARYINGNVPROC glad_debug_glActiveVaryingNV
     * }
     */
    public static AddressLayout glad_debug_glActiveVaryingNV$layout() {
        return glad_debug_glActiveVaryingNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVEVARYINGNVPROC glad_debug_glActiveVaryingNV
     * }
     */
    public static MemorySegment glad_debug_glActiveVaryingNV$segment() {
        return glad_debug_glActiveVaryingNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVEVARYINGNVPROC glad_debug_glActiveVaryingNV
     * }
     */
    public static MemorySegment glad_debug_glActiveVaryingNV() {
        return glad_debug_glActiveVaryingNV$constants.SEGMENT.get(glad_debug_glActiveVaryingNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLACTIVEVARYINGNVPROC glad_debug_glActiveVaryingNV
     * }
     */
    public static void glad_debug_glActiveVaryingNV(MemorySegment varValue) {
        glad_debug_glActiveVaryingNV$constants.SEGMENT.set(glad_debug_glActiveVaryingNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glAlphaFunc$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glAlphaFunc").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLALPHAFUNCPROC glad_glAlphaFunc
     * }
     */
    public static AddressLayout glad_glAlphaFunc$layout() {
        return glad_glAlphaFunc$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLALPHAFUNCPROC glad_glAlphaFunc
     * }
     */
    public static MemorySegment glad_glAlphaFunc$segment() {
        return glad_glAlphaFunc$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLALPHAFUNCPROC glad_glAlphaFunc
     * }
     */
    public static MemorySegment glad_glAlphaFunc() {
        return glad_glAlphaFunc$constants.SEGMENT.get(glad_glAlphaFunc$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLALPHAFUNCPROC glad_glAlphaFunc
     * }
     */
    public static void glad_glAlphaFunc(MemorySegment varValue) {
        glad_glAlphaFunc$constants.SEGMENT.set(glad_glAlphaFunc$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glAlphaFunc$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glAlphaFunc").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLALPHAFUNCPROC glad_debug_glAlphaFunc
     * }
     */
    public static AddressLayout glad_debug_glAlphaFunc$layout() {
        return glad_debug_glAlphaFunc$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLALPHAFUNCPROC glad_debug_glAlphaFunc
     * }
     */
    public static MemorySegment glad_debug_glAlphaFunc$segment() {
        return glad_debug_glAlphaFunc$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLALPHAFUNCPROC glad_debug_glAlphaFunc
     * }
     */
    public static MemorySegment glad_debug_glAlphaFunc() {
        return glad_debug_glAlphaFunc$constants.SEGMENT.get(glad_debug_glAlphaFunc$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLALPHAFUNCPROC glad_debug_glAlphaFunc
     * }
     */
    public static void glad_debug_glAlphaFunc(MemorySegment varValue) {
        glad_debug_glAlphaFunc$constants.SEGMENT.set(glad_debug_glAlphaFunc$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glAreProgramsResidentNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glAreProgramsResidentNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLAREPROGRAMSRESIDENTNVPROC glad_glAreProgramsResidentNV
     * }
     */
    public static AddressLayout glad_glAreProgramsResidentNV$layout() {
        return glad_glAreProgramsResidentNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLAREPROGRAMSRESIDENTNVPROC glad_glAreProgramsResidentNV
     * }
     */
    public static MemorySegment glad_glAreProgramsResidentNV$segment() {
        return glad_glAreProgramsResidentNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLAREPROGRAMSRESIDENTNVPROC glad_glAreProgramsResidentNV
     * }
     */
    public static MemorySegment glad_glAreProgramsResidentNV() {
        return glad_glAreProgramsResidentNV$constants.SEGMENT.get(glad_glAreProgramsResidentNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLAREPROGRAMSRESIDENTNVPROC glad_glAreProgramsResidentNV
     * }
     */
    public static void glad_glAreProgramsResidentNV(MemorySegment varValue) {
        glad_glAreProgramsResidentNV$constants.SEGMENT.set(glad_glAreProgramsResidentNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glAreProgramsResidentNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glAreProgramsResidentNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLAREPROGRAMSRESIDENTNVPROC glad_debug_glAreProgramsResidentNV
     * }
     */
    public static AddressLayout glad_debug_glAreProgramsResidentNV$layout() {
        return glad_debug_glAreProgramsResidentNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLAREPROGRAMSRESIDENTNVPROC glad_debug_glAreProgramsResidentNV
     * }
     */
    public static MemorySegment glad_debug_glAreProgramsResidentNV$segment() {
        return glad_debug_glAreProgramsResidentNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLAREPROGRAMSRESIDENTNVPROC glad_debug_glAreProgramsResidentNV
     * }
     */
    public static MemorySegment glad_debug_glAreProgramsResidentNV() {
        return glad_debug_glAreProgramsResidentNV$constants.SEGMENT.get(glad_debug_glAreProgramsResidentNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLAREPROGRAMSRESIDENTNVPROC glad_debug_glAreProgramsResidentNV
     * }
     */
    public static void glad_debug_glAreProgramsResidentNV(MemorySegment varValue) {
        glad_debug_glAreProgramsResidentNV$constants.SEGMENT.set(glad_debug_glAreProgramsResidentNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glAreTexturesResident$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glAreTexturesResident").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident
     * }
     */
    public static AddressLayout glad_glAreTexturesResident$layout() {
        return glad_glAreTexturesResident$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident
     * }
     */
    public static MemorySegment glad_glAreTexturesResident$segment() {
        return glad_glAreTexturesResident$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident
     * }
     */
    public static MemorySegment glad_glAreTexturesResident() {
        return glad_glAreTexturesResident$constants.SEGMENT.get(glad_glAreTexturesResident$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident
     * }
     */
    public static void glad_glAreTexturesResident(MemorySegment varValue) {
        glad_glAreTexturesResident$constants.SEGMENT.set(glad_glAreTexturesResident$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glAreTexturesResident$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glAreTexturesResident").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTPROC glad_debug_glAreTexturesResident
     * }
     */
    public static AddressLayout glad_debug_glAreTexturesResident$layout() {
        return glad_debug_glAreTexturesResident$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTPROC glad_debug_glAreTexturesResident
     * }
     */
    public static MemorySegment glad_debug_glAreTexturesResident$segment() {
        return glad_debug_glAreTexturesResident$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTPROC glad_debug_glAreTexturesResident
     * }
     */
    public static MemorySegment glad_debug_glAreTexturesResident() {
        return glad_debug_glAreTexturesResident$constants.SEGMENT.get(glad_debug_glAreTexturesResident$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTPROC glad_debug_glAreTexturesResident
     * }
     */
    public static void glad_debug_glAreTexturesResident(MemorySegment varValue) {
        glad_debug_glAreTexturesResident$constants.SEGMENT.set(glad_debug_glAreTexturesResident$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glAreTexturesResidentEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glAreTexturesResidentEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTEXTPROC glad_glAreTexturesResidentEXT
     * }
     */
    public static AddressLayout glad_glAreTexturesResidentEXT$layout() {
        return glad_glAreTexturesResidentEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTEXTPROC glad_glAreTexturesResidentEXT
     * }
     */
    public static MemorySegment glad_glAreTexturesResidentEXT$segment() {
        return glad_glAreTexturesResidentEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTEXTPROC glad_glAreTexturesResidentEXT
     * }
     */
    public static MemorySegment glad_glAreTexturesResidentEXT() {
        return glad_glAreTexturesResidentEXT$constants.SEGMENT.get(glad_glAreTexturesResidentEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTEXTPROC glad_glAreTexturesResidentEXT
     * }
     */
    public static void glad_glAreTexturesResidentEXT(MemorySegment varValue) {
        glad_glAreTexturesResidentEXT$constants.SEGMENT.set(glad_glAreTexturesResidentEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glAreTexturesResidentEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glAreTexturesResidentEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTEXTPROC glad_debug_glAreTexturesResidentEXT
     * }
     */
    public static AddressLayout glad_debug_glAreTexturesResidentEXT$layout() {
        return glad_debug_glAreTexturesResidentEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTEXTPROC glad_debug_glAreTexturesResidentEXT
     * }
     */
    public static MemorySegment glad_debug_glAreTexturesResidentEXT$segment() {
        return glad_debug_glAreTexturesResidentEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTEXTPROC glad_debug_glAreTexturesResidentEXT
     * }
     */
    public static MemorySegment glad_debug_glAreTexturesResidentEXT() {
        return glad_debug_glAreTexturesResidentEXT$constants.SEGMENT.get(glad_debug_glAreTexturesResidentEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLARETEXTURESRESIDENTEXTPROC glad_debug_glAreTexturesResidentEXT
     * }
     */
    public static void glad_debug_glAreTexturesResidentEXT(MemorySegment varValue) {
        glad_debug_glAreTexturesResidentEXT$constants.SEGMENT.set(glad_debug_glAreTexturesResidentEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glArrayElement$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glArrayElement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTPROC glad_glArrayElement
     * }
     */
    public static AddressLayout glad_glArrayElement$layout() {
        return glad_glArrayElement$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTPROC glad_glArrayElement
     * }
     */
    public static MemorySegment glad_glArrayElement$segment() {
        return glad_glArrayElement$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTPROC glad_glArrayElement
     * }
     */
    public static MemorySegment glad_glArrayElement() {
        return glad_glArrayElement$constants.SEGMENT.get(glad_glArrayElement$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTPROC glad_glArrayElement
     * }
     */
    public static void glad_glArrayElement(MemorySegment varValue) {
        glad_glArrayElement$constants.SEGMENT.set(glad_glArrayElement$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glArrayElement$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glArrayElement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTPROC glad_debug_glArrayElement
     * }
     */
    public static AddressLayout glad_debug_glArrayElement$layout() {
        return glad_debug_glArrayElement$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTPROC glad_debug_glArrayElement
     * }
     */
    public static MemorySegment glad_debug_glArrayElement$segment() {
        return glad_debug_glArrayElement$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTPROC glad_debug_glArrayElement
     * }
     */
    public static MemorySegment glad_debug_glArrayElement() {
        return glad_debug_glArrayElement$constants.SEGMENT.get(glad_debug_glArrayElement$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTPROC glad_debug_glArrayElement
     * }
     */
    public static void glad_debug_glArrayElement(MemorySegment varValue) {
        glad_debug_glArrayElement$constants.SEGMENT.set(glad_debug_glArrayElement$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glArrayElementEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glArrayElementEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTEXTPROC glad_glArrayElementEXT
     * }
     */
    public static AddressLayout glad_glArrayElementEXT$layout() {
        return glad_glArrayElementEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTEXTPROC glad_glArrayElementEXT
     * }
     */
    public static MemorySegment glad_glArrayElementEXT$segment() {
        return glad_glArrayElementEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTEXTPROC glad_glArrayElementEXT
     * }
     */
    public static MemorySegment glad_glArrayElementEXT() {
        return glad_glArrayElementEXT$constants.SEGMENT.get(glad_glArrayElementEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTEXTPROC glad_glArrayElementEXT
     * }
     */
    public static void glad_glArrayElementEXT(MemorySegment varValue) {
        glad_glArrayElementEXT$constants.SEGMENT.set(glad_glArrayElementEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glArrayElementEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glArrayElementEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTEXTPROC glad_debug_glArrayElementEXT
     * }
     */
    public static AddressLayout glad_debug_glArrayElementEXT$layout() {
        return glad_debug_glArrayElementEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTEXTPROC glad_debug_glArrayElementEXT
     * }
     */
    public static MemorySegment glad_debug_glArrayElementEXT$segment() {
        return glad_debug_glArrayElementEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTEXTPROC glad_debug_glArrayElementEXT
     * }
     */
    public static MemorySegment glad_debug_glArrayElementEXT() {
        return glad_debug_glArrayElementEXT$constants.SEGMENT.get(glad_debug_glArrayElementEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLARRAYELEMENTEXTPROC glad_debug_glArrayElementEXT
     * }
     */
    public static void glad_debug_glArrayElementEXT(MemorySegment varValue) {
        glad_debug_glArrayElementEXT$constants.SEGMENT.set(glad_debug_glArrayElementEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glAttachObjectARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glAttachObjectARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB
     * }
     */
    public static AddressLayout glad_glAttachObjectARB$layout() {
        return glad_glAttachObjectARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB
     * }
     */
    public static MemorySegment glad_glAttachObjectARB$segment() {
        return glad_glAttachObjectARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB
     * }
     */
    public static MemorySegment glad_glAttachObjectARB() {
        return glad_glAttachObjectARB$constants.SEGMENT.get(glad_glAttachObjectARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB
     * }
     */
    public static void glad_glAttachObjectARB(MemorySegment varValue) {
        glad_glAttachObjectARB$constants.SEGMENT.set(glad_glAttachObjectARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glAttachObjectARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glAttachObjectARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHOBJECTARBPROC glad_debug_glAttachObjectARB
     * }
     */
    public static AddressLayout glad_debug_glAttachObjectARB$layout() {
        return glad_debug_glAttachObjectARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHOBJECTARBPROC glad_debug_glAttachObjectARB
     * }
     */
    public static MemorySegment glad_debug_glAttachObjectARB$segment() {
        return glad_debug_glAttachObjectARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHOBJECTARBPROC glad_debug_glAttachObjectARB
     * }
     */
    public static MemorySegment glad_debug_glAttachObjectARB() {
        return glad_debug_glAttachObjectARB$constants.SEGMENT.get(glad_debug_glAttachObjectARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHOBJECTARBPROC glad_debug_glAttachObjectARB
     * }
     */
    public static void glad_debug_glAttachObjectARB(MemorySegment varValue) {
        glad_debug_glAttachObjectARB$constants.SEGMENT.set(glad_debug_glAttachObjectARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glAttachShader$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glAttachShader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHSHADERPROC glad_glAttachShader
     * }
     */
    public static AddressLayout glad_glAttachShader$layout() {
        return glad_glAttachShader$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHSHADERPROC glad_glAttachShader
     * }
     */
    public static MemorySegment glad_glAttachShader$segment() {
        return glad_glAttachShader$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHSHADERPROC glad_glAttachShader
     * }
     */
    public static MemorySegment glad_glAttachShader() {
        return glad_glAttachShader$constants.SEGMENT.get(glad_glAttachShader$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHSHADERPROC glad_glAttachShader
     * }
     */
    public static void glad_glAttachShader(MemorySegment varValue) {
        glad_glAttachShader$constants.SEGMENT.set(glad_glAttachShader$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glAttachShader$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glAttachShader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHSHADERPROC glad_debug_glAttachShader
     * }
     */
    public static AddressLayout glad_debug_glAttachShader$layout() {
        return glad_debug_glAttachShader$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHSHADERPROC glad_debug_glAttachShader
     * }
     */
    public static MemorySegment glad_debug_glAttachShader$segment() {
        return glad_debug_glAttachShader$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHSHADERPROC glad_debug_glAttachShader
     * }
     */
    public static MemorySegment glad_debug_glAttachShader() {
        return glad_debug_glAttachShader$constants.SEGMENT.get(glad_debug_glAttachShader$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLATTACHSHADERPROC glad_debug_glAttachShader
     * }
     */
    public static void glad_debug_glAttachShader(MemorySegment varValue) {
        glad_debug_glAttachShader$constants.SEGMENT.set(glad_debug_glAttachShader$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBegin$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBegin").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINPROC glad_glBegin
     * }
     */
    public static AddressLayout glad_glBegin$layout() {
        return glad_glBegin$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINPROC glad_glBegin
     * }
     */
    public static MemorySegment glad_glBegin$segment() {
        return glad_glBegin$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINPROC glad_glBegin
     * }
     */
    public static MemorySegment glad_glBegin() {
        return glad_glBegin$constants.SEGMENT.get(glad_glBegin$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINPROC glad_glBegin
     * }
     */
    public static void glad_glBegin(MemorySegment varValue) {
        glad_glBegin$constants.SEGMENT.set(glad_glBegin$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBegin$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBegin").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINPROC glad_debug_glBegin
     * }
     */
    public static AddressLayout glad_debug_glBegin$layout() {
        return glad_debug_glBegin$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINPROC glad_debug_glBegin
     * }
     */
    public static MemorySegment glad_debug_glBegin$segment() {
        return glad_debug_glBegin$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINPROC glad_debug_glBegin
     * }
     */
    public static MemorySegment glad_debug_glBegin() {
        return glad_debug_glBegin$constants.SEGMENT.get(glad_debug_glBegin$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINPROC glad_debug_glBegin
     * }
     */
    public static void glad_debug_glBegin(MemorySegment varValue) {
        glad_debug_glBegin$constants.SEGMENT.set(glad_debug_glBegin$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginConditionalRender$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginConditionalRender").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender
     * }
     */
    public static AddressLayout glad_glBeginConditionalRender$layout() {
        return glad_glBeginConditionalRender$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender
     * }
     */
    public static MemorySegment glad_glBeginConditionalRender$segment() {
        return glad_glBeginConditionalRender$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender
     * }
     */
    public static MemorySegment glad_glBeginConditionalRender() {
        return glad_glBeginConditionalRender$constants.SEGMENT.get(glad_glBeginConditionalRender$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender
     * }
     */
    public static void glad_glBeginConditionalRender(MemorySegment varValue) {
        glad_glBeginConditionalRender$constants.SEGMENT.set(glad_glBeginConditionalRender$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginConditionalRender$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginConditionalRender").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender
     * }
     */
    public static AddressLayout glad_debug_glBeginConditionalRender$layout() {
        return glad_debug_glBeginConditionalRender$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender
     * }
     */
    public static MemorySegment glad_debug_glBeginConditionalRender$segment() {
        return glad_debug_glBeginConditionalRender$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender
     * }
     */
    public static MemorySegment glad_debug_glBeginConditionalRender() {
        return glad_debug_glBeginConditionalRender$constants.SEGMENT.get(glad_debug_glBeginConditionalRender$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender
     * }
     */
    public static void glad_debug_glBeginConditionalRender(MemorySegment varValue) {
        glad_debug_glBeginConditionalRender$constants.SEGMENT.set(glad_debug_glBeginConditionalRender$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginConditionalRenderNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginConditionalRenderNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVPROC glad_glBeginConditionalRenderNV
     * }
     */
    public static AddressLayout glad_glBeginConditionalRenderNV$layout() {
        return glad_glBeginConditionalRenderNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVPROC glad_glBeginConditionalRenderNV
     * }
     */
    public static MemorySegment glad_glBeginConditionalRenderNV$segment() {
        return glad_glBeginConditionalRenderNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVPROC glad_glBeginConditionalRenderNV
     * }
     */
    public static MemorySegment glad_glBeginConditionalRenderNV() {
        return glad_glBeginConditionalRenderNV$constants.SEGMENT.get(glad_glBeginConditionalRenderNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVPROC glad_glBeginConditionalRenderNV
     * }
     */
    public static void glad_glBeginConditionalRenderNV(MemorySegment varValue) {
        glad_glBeginConditionalRenderNV$constants.SEGMENT.set(glad_glBeginConditionalRenderNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginConditionalRenderNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginConditionalRenderNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVPROC glad_debug_glBeginConditionalRenderNV
     * }
     */
    public static AddressLayout glad_debug_glBeginConditionalRenderNV$layout() {
        return glad_debug_glBeginConditionalRenderNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVPROC glad_debug_glBeginConditionalRenderNV
     * }
     */
    public static MemorySegment glad_debug_glBeginConditionalRenderNV$segment() {
        return glad_debug_glBeginConditionalRenderNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVPROC glad_debug_glBeginConditionalRenderNV
     * }
     */
    public static MemorySegment glad_debug_glBeginConditionalRenderNV() {
        return glad_debug_glBeginConditionalRenderNV$constants.SEGMENT.get(glad_debug_glBeginConditionalRenderNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVPROC glad_debug_glBeginConditionalRenderNV
     * }
     */
    public static void glad_debug_glBeginConditionalRenderNV(MemorySegment varValue) {
        glad_debug_glBeginConditionalRenderNV$constants.SEGMENT.set(glad_debug_glBeginConditionalRenderNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginConditionalRenderNVX$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginConditionalRenderNVX").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVXPROC glad_glBeginConditionalRenderNVX
     * }
     */
    public static AddressLayout glad_glBeginConditionalRenderNVX$layout() {
        return glad_glBeginConditionalRenderNVX$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVXPROC glad_glBeginConditionalRenderNVX
     * }
     */
    public static MemorySegment glad_glBeginConditionalRenderNVX$segment() {
        return glad_glBeginConditionalRenderNVX$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVXPROC glad_glBeginConditionalRenderNVX
     * }
     */
    public static MemorySegment glad_glBeginConditionalRenderNVX() {
        return glad_glBeginConditionalRenderNVX$constants.SEGMENT.get(glad_glBeginConditionalRenderNVX$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVXPROC glad_glBeginConditionalRenderNVX
     * }
     */
    public static void glad_glBeginConditionalRenderNVX(MemorySegment varValue) {
        glad_glBeginConditionalRenderNVX$constants.SEGMENT.set(glad_glBeginConditionalRenderNVX$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginConditionalRenderNVX$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginConditionalRenderNVX").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVXPROC glad_debug_glBeginConditionalRenderNVX
     * }
     */
    public static AddressLayout glad_debug_glBeginConditionalRenderNVX$layout() {
        return glad_debug_glBeginConditionalRenderNVX$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVXPROC glad_debug_glBeginConditionalRenderNVX
     * }
     */
    public static MemorySegment glad_debug_glBeginConditionalRenderNVX$segment() {
        return glad_debug_glBeginConditionalRenderNVX$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVXPROC glad_debug_glBeginConditionalRenderNVX
     * }
     */
    public static MemorySegment glad_debug_glBeginConditionalRenderNVX() {
        return glad_debug_glBeginConditionalRenderNVX$constants.SEGMENT.get(glad_debug_glBeginConditionalRenderNVX$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINCONDITIONALRENDERNVXPROC glad_debug_glBeginConditionalRenderNVX
     * }
     */
    public static void glad_debug_glBeginConditionalRenderNVX(MemorySegment varValue) {
        glad_debug_glBeginConditionalRenderNVX$constants.SEGMENT.set(glad_debug_glBeginConditionalRenderNVX$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginQuery$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginQuery").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYPROC glad_glBeginQuery
     * }
     */
    public static AddressLayout glad_glBeginQuery$layout() {
        return glad_glBeginQuery$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYPROC glad_glBeginQuery
     * }
     */
    public static MemorySegment glad_glBeginQuery$segment() {
        return glad_glBeginQuery$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYPROC glad_glBeginQuery
     * }
     */
    public static MemorySegment glad_glBeginQuery() {
        return glad_glBeginQuery$constants.SEGMENT.get(glad_glBeginQuery$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYPROC glad_glBeginQuery
     * }
     */
    public static void glad_glBeginQuery(MemorySegment varValue) {
        glad_glBeginQuery$constants.SEGMENT.set(glad_glBeginQuery$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginQuery$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginQuery").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYPROC glad_debug_glBeginQuery
     * }
     */
    public static AddressLayout glad_debug_glBeginQuery$layout() {
        return glad_debug_glBeginQuery$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYPROC glad_debug_glBeginQuery
     * }
     */
    public static MemorySegment glad_debug_glBeginQuery$segment() {
        return glad_debug_glBeginQuery$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYPROC glad_debug_glBeginQuery
     * }
     */
    public static MemorySegment glad_debug_glBeginQuery() {
        return glad_debug_glBeginQuery$constants.SEGMENT.get(glad_debug_glBeginQuery$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYPROC glad_debug_glBeginQuery
     * }
     */
    public static void glad_debug_glBeginQuery(MemorySegment varValue) {
        glad_debug_glBeginQuery$constants.SEGMENT.set(glad_debug_glBeginQuery$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginQueryARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginQueryARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB
     * }
     */
    public static AddressLayout glad_glBeginQueryARB$layout() {
        return glad_glBeginQueryARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB
     * }
     */
    public static MemorySegment glad_glBeginQueryARB$segment() {
        return glad_glBeginQueryARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB
     * }
     */
    public static MemorySegment glad_glBeginQueryARB() {
        return glad_glBeginQueryARB$constants.SEGMENT.get(glad_glBeginQueryARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB
     * }
     */
    public static void glad_glBeginQueryARB(MemorySegment varValue) {
        glad_glBeginQueryARB$constants.SEGMENT.set(glad_glBeginQueryARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginQueryARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginQueryARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYARBPROC glad_debug_glBeginQueryARB
     * }
     */
    public static AddressLayout glad_debug_glBeginQueryARB$layout() {
        return glad_debug_glBeginQueryARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYARBPROC glad_debug_glBeginQueryARB
     * }
     */
    public static MemorySegment glad_debug_glBeginQueryARB$segment() {
        return glad_debug_glBeginQueryARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYARBPROC glad_debug_glBeginQueryARB
     * }
     */
    public static MemorySegment glad_debug_glBeginQueryARB() {
        return glad_debug_glBeginQueryARB$constants.SEGMENT.get(glad_debug_glBeginQueryARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYARBPROC glad_debug_glBeginQueryARB
     * }
     */
    public static void glad_debug_glBeginQueryARB(MemorySegment varValue) {
        glad_debug_glBeginQueryARB$constants.SEGMENT.set(glad_debug_glBeginQueryARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginQueryIndexed$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginQueryIndexed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed
     * }
     */
    public static AddressLayout glad_glBeginQueryIndexed$layout() {
        return glad_glBeginQueryIndexed$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed
     * }
     */
    public static MemorySegment glad_glBeginQueryIndexed$segment() {
        return glad_glBeginQueryIndexed$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed
     * }
     */
    public static MemorySegment glad_glBeginQueryIndexed() {
        return glad_glBeginQueryIndexed$constants.SEGMENT.get(glad_glBeginQueryIndexed$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed
     * }
     */
    public static void glad_glBeginQueryIndexed(MemorySegment varValue) {
        glad_glBeginQueryIndexed$constants.SEGMENT.set(glad_glBeginQueryIndexed$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginQueryIndexed$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginQueryIndexed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed
     * }
     */
    public static AddressLayout glad_debug_glBeginQueryIndexed$layout() {
        return glad_debug_glBeginQueryIndexed$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed
     * }
     */
    public static MemorySegment glad_debug_glBeginQueryIndexed$segment() {
        return glad_debug_glBeginQueryIndexed$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed
     * }
     */
    public static MemorySegment glad_debug_glBeginQueryIndexed() {
        return glad_debug_glBeginQueryIndexed$constants.SEGMENT.get(glad_debug_glBeginQueryIndexed$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed
     * }
     */
    public static void glad_debug_glBeginQueryIndexed(MemorySegment varValue) {
        glad_debug_glBeginQueryIndexed$constants.SEGMENT.set(glad_debug_glBeginQueryIndexed$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginTransformFeedback$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginTransformFeedback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback
     * }
     */
    public static AddressLayout glad_glBeginTransformFeedback$layout() {
        return glad_glBeginTransformFeedback$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback
     * }
     */
    public static MemorySegment glad_glBeginTransformFeedback$segment() {
        return glad_glBeginTransformFeedback$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback
     * }
     */
    public static MemorySegment glad_glBeginTransformFeedback() {
        return glad_glBeginTransformFeedback$constants.SEGMENT.get(glad_glBeginTransformFeedback$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback
     * }
     */
    public static void glad_glBeginTransformFeedback(MemorySegment varValue) {
        glad_glBeginTransformFeedback$constants.SEGMENT.set(glad_glBeginTransformFeedback$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginTransformFeedback$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginTransformFeedback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback
     * }
     */
    public static AddressLayout glad_debug_glBeginTransformFeedback$layout() {
        return glad_debug_glBeginTransformFeedback$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback
     * }
     */
    public static MemorySegment glad_debug_glBeginTransformFeedback$segment() {
        return glad_debug_glBeginTransformFeedback$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback
     * }
     */
    public static MemorySegment glad_debug_glBeginTransformFeedback() {
        return glad_debug_glBeginTransformFeedback$constants.SEGMENT.get(glad_debug_glBeginTransformFeedback$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback
     * }
     */
    public static void glad_debug_glBeginTransformFeedback(MemorySegment varValue) {
        glad_debug_glBeginTransformFeedback$constants.SEGMENT.set(glad_debug_glBeginTransformFeedback$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginTransformFeedbackEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginTransformFeedbackEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_glBeginTransformFeedbackEXT
     * }
     */
    public static AddressLayout glad_glBeginTransformFeedbackEXT$layout() {
        return glad_glBeginTransformFeedbackEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_glBeginTransformFeedbackEXT
     * }
     */
    public static MemorySegment glad_glBeginTransformFeedbackEXT$segment() {
        return glad_glBeginTransformFeedbackEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_glBeginTransformFeedbackEXT
     * }
     */
    public static MemorySegment glad_glBeginTransformFeedbackEXT() {
        return glad_glBeginTransformFeedbackEXT$constants.SEGMENT.get(glad_glBeginTransformFeedbackEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_glBeginTransformFeedbackEXT
     * }
     */
    public static void glad_glBeginTransformFeedbackEXT(MemorySegment varValue) {
        glad_glBeginTransformFeedbackEXT$constants.SEGMENT.set(glad_glBeginTransformFeedbackEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginTransformFeedbackEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginTransformFeedbackEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_debug_glBeginTransformFeedbackEXT
     * }
     */
    public static AddressLayout glad_debug_glBeginTransformFeedbackEXT$layout() {
        return glad_debug_glBeginTransformFeedbackEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_debug_glBeginTransformFeedbackEXT
     * }
     */
    public static MemorySegment glad_debug_glBeginTransformFeedbackEXT$segment() {
        return glad_debug_glBeginTransformFeedbackEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_debug_glBeginTransformFeedbackEXT
     * }
     */
    public static MemorySegment glad_debug_glBeginTransformFeedbackEXT() {
        return glad_debug_glBeginTransformFeedbackEXT$constants.SEGMENT.get(glad_debug_glBeginTransformFeedbackEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_debug_glBeginTransformFeedbackEXT
     * }
     */
    public static void glad_debug_glBeginTransformFeedbackEXT(MemorySegment varValue) {
        glad_debug_glBeginTransformFeedbackEXT$constants.SEGMENT.set(glad_debug_glBeginTransformFeedbackEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBeginTransformFeedbackNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBeginTransformFeedbackNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_glBeginTransformFeedbackNV
     * }
     */
    public static AddressLayout glad_glBeginTransformFeedbackNV$layout() {
        return glad_glBeginTransformFeedbackNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_glBeginTransformFeedbackNV
     * }
     */
    public static MemorySegment glad_glBeginTransformFeedbackNV$segment() {
        return glad_glBeginTransformFeedbackNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_glBeginTransformFeedbackNV
     * }
     */
    public static MemorySegment glad_glBeginTransformFeedbackNV() {
        return glad_glBeginTransformFeedbackNV$constants.SEGMENT.get(glad_glBeginTransformFeedbackNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_glBeginTransformFeedbackNV
     * }
     */
    public static void glad_glBeginTransformFeedbackNV(MemorySegment varValue) {
        glad_glBeginTransformFeedbackNV$constants.SEGMENT.set(glad_glBeginTransformFeedbackNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBeginTransformFeedbackNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBeginTransformFeedbackNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_debug_glBeginTransformFeedbackNV
     * }
     */
    public static AddressLayout glad_debug_glBeginTransformFeedbackNV$layout() {
        return glad_debug_glBeginTransformFeedbackNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_debug_glBeginTransformFeedbackNV
     * }
     */
    public static MemorySegment glad_debug_glBeginTransformFeedbackNV$segment() {
        return glad_debug_glBeginTransformFeedbackNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_debug_glBeginTransformFeedbackNV
     * }
     */
    public static MemorySegment glad_debug_glBeginTransformFeedbackNV() {
        return glad_debug_glBeginTransformFeedbackNV$constants.SEGMENT.get(glad_debug_glBeginTransformFeedbackNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_debug_glBeginTransformFeedbackNV
     * }
     */
    public static void glad_debug_glBeginTransformFeedbackNV(MemorySegment varValue) {
        glad_debug_glBeginTransformFeedbackNV$constants.SEGMENT.set(glad_debug_glBeginTransformFeedbackNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindAttribLocation$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindAttribLocation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation
     * }
     */
    public static AddressLayout glad_glBindAttribLocation$layout() {
        return glad_glBindAttribLocation$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation
     * }
     */
    public static MemorySegment glad_glBindAttribLocation$segment() {
        return glad_glBindAttribLocation$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation
     * }
     */
    public static MemorySegment glad_glBindAttribLocation() {
        return glad_glBindAttribLocation$constants.SEGMENT.get(glad_glBindAttribLocation$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation
     * }
     */
    public static void glad_glBindAttribLocation(MemorySegment varValue) {
        glad_glBindAttribLocation$constants.SEGMENT.set(glad_glBindAttribLocation$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindAttribLocation$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindAttribLocation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation
     * }
     */
    public static AddressLayout glad_debug_glBindAttribLocation$layout() {
        return glad_debug_glBindAttribLocation$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation
     * }
     */
    public static MemorySegment glad_debug_glBindAttribLocation$segment() {
        return glad_debug_glBindAttribLocation$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation
     * }
     */
    public static MemorySegment glad_debug_glBindAttribLocation() {
        return glad_debug_glBindAttribLocation$constants.SEGMENT.get(glad_debug_glBindAttribLocation$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation
     * }
     */
    public static void glad_debug_glBindAttribLocation(MemorySegment varValue) {
        glad_debug_glBindAttribLocation$constants.SEGMENT.set(glad_debug_glBindAttribLocation$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindAttribLocationARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindAttribLocationARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB
     * }
     */
    public static AddressLayout glad_glBindAttribLocationARB$layout() {
        return glad_glBindAttribLocationARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB
     * }
     */
    public static MemorySegment glad_glBindAttribLocationARB$segment() {
        return glad_glBindAttribLocationARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB
     * }
     */
    public static MemorySegment glad_glBindAttribLocationARB() {
        return glad_glBindAttribLocationARB$constants.SEGMENT.get(glad_glBindAttribLocationARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB
     * }
     */
    public static void glad_glBindAttribLocationARB(MemorySegment varValue) {
        glad_glBindAttribLocationARB$constants.SEGMENT.set(glad_glBindAttribLocationARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindAttribLocationARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindAttribLocationARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONARBPROC glad_debug_glBindAttribLocationARB
     * }
     */
    public static AddressLayout glad_debug_glBindAttribLocationARB$layout() {
        return glad_debug_glBindAttribLocationARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONARBPROC glad_debug_glBindAttribLocationARB
     * }
     */
    public static MemorySegment glad_debug_glBindAttribLocationARB$segment() {
        return glad_debug_glBindAttribLocationARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONARBPROC glad_debug_glBindAttribLocationARB
     * }
     */
    public static MemorySegment glad_debug_glBindAttribLocationARB() {
        return glad_debug_glBindAttribLocationARB$constants.SEGMENT.get(glad_debug_glBindAttribLocationARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDATTRIBLOCATIONARBPROC glad_debug_glBindAttribLocationARB
     * }
     */
    public static void glad_debug_glBindAttribLocationARB(MemorySegment varValue) {
        glad_debug_glBindAttribLocationARB$constants.SEGMENT.set(glad_debug_glBindAttribLocationARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERPROC glad_glBindBuffer
     * }
     */
    public static AddressLayout glad_glBindBuffer$layout() {
        return glad_glBindBuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERPROC glad_glBindBuffer
     * }
     */
    public static MemorySegment glad_glBindBuffer$segment() {
        return glad_glBindBuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERPROC glad_glBindBuffer
     * }
     */
    public static MemorySegment glad_glBindBuffer() {
        return glad_glBindBuffer$constants.SEGMENT.get(glad_glBindBuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERPROC glad_glBindBuffer
     * }
     */
    public static void glad_glBindBuffer(MemorySegment varValue) {
        glad_glBindBuffer$constants.SEGMENT.set(glad_glBindBuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERPROC glad_debug_glBindBuffer
     * }
     */
    public static AddressLayout glad_debug_glBindBuffer$layout() {
        return glad_debug_glBindBuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERPROC glad_debug_glBindBuffer
     * }
     */
    public static MemorySegment glad_debug_glBindBuffer$segment() {
        return glad_debug_glBindBuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERPROC glad_debug_glBindBuffer
     * }
     */
    public static MemorySegment glad_debug_glBindBuffer() {
        return glad_debug_glBindBuffer$constants.SEGMENT.get(glad_debug_glBindBuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERPROC glad_debug_glBindBuffer
     * }
     */
    public static void glad_debug_glBindBuffer(MemorySegment varValue) {
        glad_debug_glBindBuffer$constants.SEGMENT.set(glad_debug_glBindBuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERARBPROC glad_glBindBufferARB
     * }
     */
    public static AddressLayout glad_glBindBufferARB$layout() {
        return glad_glBindBufferARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERARBPROC glad_glBindBufferARB
     * }
     */
    public static MemorySegment glad_glBindBufferARB$segment() {
        return glad_glBindBufferARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERARBPROC glad_glBindBufferARB
     * }
     */
    public static MemorySegment glad_glBindBufferARB() {
        return glad_glBindBufferARB$constants.SEGMENT.get(glad_glBindBufferARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERARBPROC glad_glBindBufferARB
     * }
     */
    public static void glad_glBindBufferARB(MemorySegment varValue) {
        glad_glBindBufferARB$constants.SEGMENT.set(glad_glBindBufferARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERARBPROC glad_debug_glBindBufferARB
     * }
     */
    public static AddressLayout glad_debug_glBindBufferARB$layout() {
        return glad_debug_glBindBufferARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERARBPROC glad_debug_glBindBufferARB
     * }
     */
    public static MemorySegment glad_debug_glBindBufferARB$segment() {
        return glad_debug_glBindBufferARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERARBPROC glad_debug_glBindBufferARB
     * }
     */
    public static MemorySegment glad_debug_glBindBufferARB() {
        return glad_debug_glBindBufferARB$constants.SEGMENT.get(glad_debug_glBindBufferARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERARBPROC glad_debug_glBindBufferARB
     * }
     */
    public static void glad_debug_glBindBufferARB(MemorySegment varValue) {
        glad_debug_glBindBufferARB$constants.SEGMENT.set(glad_debug_glBindBufferARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferBase$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferBase").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase
     * }
     */
    public static AddressLayout glad_glBindBufferBase$layout() {
        return glad_glBindBufferBase$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase
     * }
     */
    public static MemorySegment glad_glBindBufferBase$segment() {
        return glad_glBindBufferBase$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase
     * }
     */
    public static MemorySegment glad_glBindBufferBase() {
        return glad_glBindBufferBase$constants.SEGMENT.get(glad_glBindBufferBase$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase
     * }
     */
    public static void glad_glBindBufferBase(MemorySegment varValue) {
        glad_glBindBufferBase$constants.SEGMENT.set(glad_glBindBufferBase$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferBase$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferBase").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase
     * }
     */
    public static AddressLayout glad_debug_glBindBufferBase$layout() {
        return glad_debug_glBindBufferBase$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase
     * }
     */
    public static MemorySegment glad_debug_glBindBufferBase$segment() {
        return glad_debug_glBindBufferBase$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase
     * }
     */
    public static MemorySegment glad_debug_glBindBufferBase() {
        return glad_debug_glBindBufferBase$constants.SEGMENT.get(glad_debug_glBindBufferBase$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase
     * }
     */
    public static void glad_debug_glBindBufferBase(MemorySegment varValue) {
        glad_debug_glBindBufferBase$constants.SEGMENT.set(glad_debug_glBindBufferBase$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferBaseEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferBaseEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEEXTPROC glad_glBindBufferBaseEXT
     * }
     */
    public static AddressLayout glad_glBindBufferBaseEXT$layout() {
        return glad_glBindBufferBaseEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEEXTPROC glad_glBindBufferBaseEXT
     * }
     */
    public static MemorySegment glad_glBindBufferBaseEXT$segment() {
        return glad_glBindBufferBaseEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEEXTPROC glad_glBindBufferBaseEXT
     * }
     */
    public static MemorySegment glad_glBindBufferBaseEXT() {
        return glad_glBindBufferBaseEXT$constants.SEGMENT.get(glad_glBindBufferBaseEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEEXTPROC glad_glBindBufferBaseEXT
     * }
     */
    public static void glad_glBindBufferBaseEXT(MemorySegment varValue) {
        glad_glBindBufferBaseEXT$constants.SEGMENT.set(glad_glBindBufferBaseEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferBaseEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferBaseEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEEXTPROC glad_debug_glBindBufferBaseEXT
     * }
     */
    public static AddressLayout glad_debug_glBindBufferBaseEXT$layout() {
        return glad_debug_glBindBufferBaseEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEEXTPROC glad_debug_glBindBufferBaseEXT
     * }
     */
    public static MemorySegment glad_debug_glBindBufferBaseEXT$segment() {
        return glad_debug_glBindBufferBaseEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEEXTPROC glad_debug_glBindBufferBaseEXT
     * }
     */
    public static MemorySegment glad_debug_glBindBufferBaseEXT() {
        return glad_debug_glBindBufferBaseEXT$constants.SEGMENT.get(glad_debug_glBindBufferBaseEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASEEXTPROC glad_debug_glBindBufferBaseEXT
     * }
     */
    public static void glad_debug_glBindBufferBaseEXT(MemorySegment varValue) {
        glad_debug_glBindBufferBaseEXT$constants.SEGMENT.set(glad_debug_glBindBufferBaseEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferBaseNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferBaseNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASENVPROC glad_glBindBufferBaseNV
     * }
     */
    public static AddressLayout glad_glBindBufferBaseNV$layout() {
        return glad_glBindBufferBaseNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASENVPROC glad_glBindBufferBaseNV
     * }
     */
    public static MemorySegment glad_glBindBufferBaseNV$segment() {
        return glad_glBindBufferBaseNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASENVPROC glad_glBindBufferBaseNV
     * }
     */
    public static MemorySegment glad_glBindBufferBaseNV() {
        return glad_glBindBufferBaseNV$constants.SEGMENT.get(glad_glBindBufferBaseNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASENVPROC glad_glBindBufferBaseNV
     * }
     */
    public static void glad_glBindBufferBaseNV(MemorySegment varValue) {
        glad_glBindBufferBaseNV$constants.SEGMENT.set(glad_glBindBufferBaseNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferBaseNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferBaseNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASENVPROC glad_debug_glBindBufferBaseNV
     * }
     */
    public static AddressLayout glad_debug_glBindBufferBaseNV$layout() {
        return glad_debug_glBindBufferBaseNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASENVPROC glad_debug_glBindBufferBaseNV
     * }
     */
    public static MemorySegment glad_debug_glBindBufferBaseNV$segment() {
        return glad_debug_glBindBufferBaseNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASENVPROC glad_debug_glBindBufferBaseNV
     * }
     */
    public static MemorySegment glad_debug_glBindBufferBaseNV() {
        return glad_debug_glBindBufferBaseNV$constants.SEGMENT.get(glad_debug_glBindBufferBaseNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERBASENVPROC glad_debug_glBindBufferBaseNV
     * }
     */
    public static void glad_debug_glBindBufferBaseNV(MemorySegment varValue) {
        glad_debug_glBindBufferBaseNV$constants.SEGMENT.set(glad_debug_glBindBufferBaseNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferOffsetEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferOffsetEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETEXTPROC glad_glBindBufferOffsetEXT
     * }
     */
    public static AddressLayout glad_glBindBufferOffsetEXT$layout() {
        return glad_glBindBufferOffsetEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETEXTPROC glad_glBindBufferOffsetEXT
     * }
     */
    public static MemorySegment glad_glBindBufferOffsetEXT$segment() {
        return glad_glBindBufferOffsetEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETEXTPROC glad_glBindBufferOffsetEXT
     * }
     */
    public static MemorySegment glad_glBindBufferOffsetEXT() {
        return glad_glBindBufferOffsetEXT$constants.SEGMENT.get(glad_glBindBufferOffsetEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETEXTPROC glad_glBindBufferOffsetEXT
     * }
     */
    public static void glad_glBindBufferOffsetEXT(MemorySegment varValue) {
        glad_glBindBufferOffsetEXT$constants.SEGMENT.set(glad_glBindBufferOffsetEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferOffsetEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferOffsetEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETEXTPROC glad_debug_glBindBufferOffsetEXT
     * }
     */
    public static AddressLayout glad_debug_glBindBufferOffsetEXT$layout() {
        return glad_debug_glBindBufferOffsetEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETEXTPROC glad_debug_glBindBufferOffsetEXT
     * }
     */
    public static MemorySegment glad_debug_glBindBufferOffsetEXT$segment() {
        return glad_debug_glBindBufferOffsetEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETEXTPROC glad_debug_glBindBufferOffsetEXT
     * }
     */
    public static MemorySegment glad_debug_glBindBufferOffsetEXT() {
        return glad_debug_glBindBufferOffsetEXT$constants.SEGMENT.get(glad_debug_glBindBufferOffsetEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETEXTPROC glad_debug_glBindBufferOffsetEXT
     * }
     */
    public static void glad_debug_glBindBufferOffsetEXT(MemorySegment varValue) {
        glad_debug_glBindBufferOffsetEXT$constants.SEGMENT.set(glad_debug_glBindBufferOffsetEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferOffsetNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferOffsetNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETNVPROC glad_glBindBufferOffsetNV
     * }
     */
    public static AddressLayout glad_glBindBufferOffsetNV$layout() {
        return glad_glBindBufferOffsetNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETNVPROC glad_glBindBufferOffsetNV
     * }
     */
    public static MemorySegment glad_glBindBufferOffsetNV$segment() {
        return glad_glBindBufferOffsetNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETNVPROC glad_glBindBufferOffsetNV
     * }
     */
    public static MemorySegment glad_glBindBufferOffsetNV() {
        return glad_glBindBufferOffsetNV$constants.SEGMENT.get(glad_glBindBufferOffsetNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETNVPROC glad_glBindBufferOffsetNV
     * }
     */
    public static void glad_glBindBufferOffsetNV(MemorySegment varValue) {
        glad_glBindBufferOffsetNV$constants.SEGMENT.set(glad_glBindBufferOffsetNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferOffsetNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferOffsetNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETNVPROC glad_debug_glBindBufferOffsetNV
     * }
     */
    public static AddressLayout glad_debug_glBindBufferOffsetNV$layout() {
        return glad_debug_glBindBufferOffsetNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETNVPROC glad_debug_glBindBufferOffsetNV
     * }
     */
    public static MemorySegment glad_debug_glBindBufferOffsetNV$segment() {
        return glad_debug_glBindBufferOffsetNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETNVPROC glad_debug_glBindBufferOffsetNV
     * }
     */
    public static MemorySegment glad_debug_glBindBufferOffsetNV() {
        return glad_debug_glBindBufferOffsetNV$constants.SEGMENT.get(glad_debug_glBindBufferOffsetNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFEROFFSETNVPROC glad_debug_glBindBufferOffsetNV
     * }
     */
    public static void glad_debug_glBindBufferOffsetNV(MemorySegment varValue) {
        glad_debug_glBindBufferOffsetNV$constants.SEGMENT.set(glad_debug_glBindBufferOffsetNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferRange$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferRange").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange
     * }
     */
    public static AddressLayout glad_glBindBufferRange$layout() {
        return glad_glBindBufferRange$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange
     * }
     */
    public static MemorySegment glad_glBindBufferRange$segment() {
        return glad_glBindBufferRange$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange
     * }
     */
    public static MemorySegment glad_glBindBufferRange() {
        return glad_glBindBufferRange$constants.SEGMENT.get(glad_glBindBufferRange$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange
     * }
     */
    public static void glad_glBindBufferRange(MemorySegment varValue) {
        glad_glBindBufferRange$constants.SEGMENT.set(glad_glBindBufferRange$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferRange$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferRange").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange
     * }
     */
    public static AddressLayout glad_debug_glBindBufferRange$layout() {
        return glad_debug_glBindBufferRange$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange
     * }
     */
    public static MemorySegment glad_debug_glBindBufferRange$segment() {
        return glad_debug_glBindBufferRange$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange
     * }
     */
    public static MemorySegment glad_debug_glBindBufferRange() {
        return glad_debug_glBindBufferRange$constants.SEGMENT.get(glad_debug_glBindBufferRange$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange
     * }
     */
    public static void glad_debug_glBindBufferRange(MemorySegment varValue) {
        glad_debug_glBindBufferRange$constants.SEGMENT.set(glad_debug_glBindBufferRange$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferRangeEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferRangeEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEEXTPROC glad_glBindBufferRangeEXT
     * }
     */
    public static AddressLayout glad_glBindBufferRangeEXT$layout() {
        return glad_glBindBufferRangeEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEEXTPROC glad_glBindBufferRangeEXT
     * }
     */
    public static MemorySegment glad_glBindBufferRangeEXT$segment() {
        return glad_glBindBufferRangeEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEEXTPROC glad_glBindBufferRangeEXT
     * }
     */
    public static MemorySegment glad_glBindBufferRangeEXT() {
        return glad_glBindBufferRangeEXT$constants.SEGMENT.get(glad_glBindBufferRangeEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEEXTPROC glad_glBindBufferRangeEXT
     * }
     */
    public static void glad_glBindBufferRangeEXT(MemorySegment varValue) {
        glad_glBindBufferRangeEXT$constants.SEGMENT.set(glad_glBindBufferRangeEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferRangeEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferRangeEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEEXTPROC glad_debug_glBindBufferRangeEXT
     * }
     */
    public static AddressLayout glad_debug_glBindBufferRangeEXT$layout() {
        return glad_debug_glBindBufferRangeEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEEXTPROC glad_debug_glBindBufferRangeEXT
     * }
     */
    public static MemorySegment glad_debug_glBindBufferRangeEXT$segment() {
        return glad_debug_glBindBufferRangeEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEEXTPROC glad_debug_glBindBufferRangeEXT
     * }
     */
    public static MemorySegment glad_debug_glBindBufferRangeEXT() {
        return glad_debug_glBindBufferRangeEXT$constants.SEGMENT.get(glad_debug_glBindBufferRangeEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGEEXTPROC glad_debug_glBindBufferRangeEXT
     * }
     */
    public static void glad_debug_glBindBufferRangeEXT(MemorySegment varValue) {
        glad_debug_glBindBufferRangeEXT$constants.SEGMENT.set(glad_debug_glBindBufferRangeEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBufferRangeNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBufferRangeNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGENVPROC glad_glBindBufferRangeNV
     * }
     */
    public static AddressLayout glad_glBindBufferRangeNV$layout() {
        return glad_glBindBufferRangeNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGENVPROC glad_glBindBufferRangeNV
     * }
     */
    public static MemorySegment glad_glBindBufferRangeNV$segment() {
        return glad_glBindBufferRangeNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGENVPROC glad_glBindBufferRangeNV
     * }
     */
    public static MemorySegment glad_glBindBufferRangeNV() {
        return glad_glBindBufferRangeNV$constants.SEGMENT.get(glad_glBindBufferRangeNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGENVPROC glad_glBindBufferRangeNV
     * }
     */
    public static void glad_glBindBufferRangeNV(MemorySegment varValue) {
        glad_glBindBufferRangeNV$constants.SEGMENT.set(glad_glBindBufferRangeNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBufferRangeNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBufferRangeNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGENVPROC glad_debug_glBindBufferRangeNV
     * }
     */
    public static AddressLayout glad_debug_glBindBufferRangeNV$layout() {
        return glad_debug_glBindBufferRangeNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGENVPROC glad_debug_glBindBufferRangeNV
     * }
     */
    public static MemorySegment glad_debug_glBindBufferRangeNV$segment() {
        return glad_debug_glBindBufferRangeNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGENVPROC glad_debug_glBindBufferRangeNV
     * }
     */
    public static MemorySegment glad_debug_glBindBufferRangeNV() {
        return glad_debug_glBindBufferRangeNV$constants.SEGMENT.get(glad_debug_glBindBufferRangeNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERRANGENVPROC glad_debug_glBindBufferRangeNV
     * }
     */
    public static void glad_debug_glBindBufferRangeNV(MemorySegment varValue) {
        glad_debug_glBindBufferRangeNV$constants.SEGMENT.set(glad_debug_glBindBufferRangeNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBuffersBase$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBuffersBase").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase
     * }
     */
    public static AddressLayout glad_glBindBuffersBase$layout() {
        return glad_glBindBuffersBase$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase
     * }
     */
    public static MemorySegment glad_glBindBuffersBase$segment() {
        return glad_glBindBuffersBase$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase
     * }
     */
    public static MemorySegment glad_glBindBuffersBase() {
        return glad_glBindBuffersBase$constants.SEGMENT.get(glad_glBindBuffersBase$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase
     * }
     */
    public static void glad_glBindBuffersBase(MemorySegment varValue) {
        glad_glBindBuffersBase$constants.SEGMENT.set(glad_glBindBuffersBase$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBuffersBase$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBuffersBase").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSBASEPROC glad_debug_glBindBuffersBase
     * }
     */
    public static AddressLayout glad_debug_glBindBuffersBase$layout() {
        return glad_debug_glBindBuffersBase$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSBASEPROC glad_debug_glBindBuffersBase
     * }
     */
    public static MemorySegment glad_debug_glBindBuffersBase$segment() {
        return glad_debug_glBindBuffersBase$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSBASEPROC glad_debug_glBindBuffersBase
     * }
     */
    public static MemorySegment glad_debug_glBindBuffersBase() {
        return glad_debug_glBindBuffersBase$constants.SEGMENT.get(glad_debug_glBindBuffersBase$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSBASEPROC glad_debug_glBindBuffersBase
     * }
     */
    public static void glad_debug_glBindBuffersBase(MemorySegment varValue) {
        glad_debug_glBindBuffersBase$constants.SEGMENT.set(glad_debug_glBindBuffersBase$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindBuffersRange$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindBuffersRange").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange
     * }
     */
    public static AddressLayout glad_glBindBuffersRange$layout() {
        return glad_glBindBuffersRange$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange
     * }
     */
    public static MemorySegment glad_glBindBuffersRange$segment() {
        return glad_glBindBuffersRange$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange
     * }
     */
    public static MemorySegment glad_glBindBuffersRange() {
        return glad_glBindBuffersRange$constants.SEGMENT.get(glad_glBindBuffersRange$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange
     * }
     */
    public static void glad_glBindBuffersRange(MemorySegment varValue) {
        glad_glBindBuffersRange$constants.SEGMENT.set(glad_glBindBuffersRange$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindBuffersRange$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindBuffersRange").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSRANGEPROC glad_debug_glBindBuffersRange
     * }
     */
    public static AddressLayout glad_debug_glBindBuffersRange$layout() {
        return glad_debug_glBindBuffersRange$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSRANGEPROC glad_debug_glBindBuffersRange
     * }
     */
    public static MemorySegment glad_debug_glBindBuffersRange$segment() {
        return glad_debug_glBindBuffersRange$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSRANGEPROC glad_debug_glBindBuffersRange
     * }
     */
    public static MemorySegment glad_debug_glBindBuffersRange() {
        return glad_debug_glBindBuffersRange$constants.SEGMENT.get(glad_debug_glBindBuffersRange$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDBUFFERSRANGEPROC glad_debug_glBindBuffersRange
     * }
     */
    public static void glad_debug_glBindBuffersRange(MemorySegment varValue) {
        glad_debug_glBindBuffersRange$constants.SEGMENT.set(glad_debug_glBindBuffersRange$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindFragDataLocation$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindFragDataLocation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation
     * }
     */
    public static AddressLayout glad_glBindFragDataLocation$layout() {
        return glad_glBindFragDataLocation$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation
     * }
     */
    public static MemorySegment glad_glBindFragDataLocation$segment() {
        return glad_glBindFragDataLocation$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation
     * }
     */
    public static MemorySegment glad_glBindFragDataLocation() {
        return glad_glBindFragDataLocation$constants.SEGMENT.get(glad_glBindFragDataLocation$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation
     * }
     */
    public static void glad_glBindFragDataLocation(MemorySegment varValue) {
        glad_glBindFragDataLocation$constants.SEGMENT.set(glad_glBindFragDataLocation$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindFragDataLocation$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindFragDataLocation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation
     * }
     */
    public static AddressLayout glad_debug_glBindFragDataLocation$layout() {
        return glad_debug_glBindFragDataLocation$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation
     * }
     */
    public static MemorySegment glad_debug_glBindFragDataLocation$segment() {
        return glad_debug_glBindFragDataLocation$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation
     * }
     */
    public static MemorySegment glad_debug_glBindFragDataLocation() {
        return glad_debug_glBindFragDataLocation$constants.SEGMENT.get(glad_debug_glBindFragDataLocation$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation
     * }
     */
    public static void glad_debug_glBindFragDataLocation(MemorySegment varValue) {
        glad_debug_glBindFragDataLocation$constants.SEGMENT.set(glad_debug_glBindFragDataLocation$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindFragDataLocationEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindFragDataLocationEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONEXTPROC glad_glBindFragDataLocationEXT
     * }
     */
    public static AddressLayout glad_glBindFragDataLocationEXT$layout() {
        return glad_glBindFragDataLocationEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONEXTPROC glad_glBindFragDataLocationEXT
     * }
     */
    public static MemorySegment glad_glBindFragDataLocationEXT$segment() {
        return glad_glBindFragDataLocationEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONEXTPROC glad_glBindFragDataLocationEXT
     * }
     */
    public static MemorySegment glad_glBindFragDataLocationEXT() {
        return glad_glBindFragDataLocationEXT$constants.SEGMENT.get(glad_glBindFragDataLocationEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONEXTPROC glad_glBindFragDataLocationEXT
     * }
     */
    public static void glad_glBindFragDataLocationEXT(MemorySegment varValue) {
        glad_glBindFragDataLocationEXT$constants.SEGMENT.set(glad_glBindFragDataLocationEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindFragDataLocationEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindFragDataLocationEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONEXTPROC glad_debug_glBindFragDataLocationEXT
     * }
     */
    public static AddressLayout glad_debug_glBindFragDataLocationEXT$layout() {
        return glad_debug_glBindFragDataLocationEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONEXTPROC glad_debug_glBindFragDataLocationEXT
     * }
     */
    public static MemorySegment glad_debug_glBindFragDataLocationEXT$segment() {
        return glad_debug_glBindFragDataLocationEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONEXTPROC glad_debug_glBindFragDataLocationEXT
     * }
     */
    public static MemorySegment glad_debug_glBindFragDataLocationEXT() {
        return glad_debug_glBindFragDataLocationEXT$constants.SEGMENT.get(glad_debug_glBindFragDataLocationEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONEXTPROC glad_debug_glBindFragDataLocationEXT
     * }
     */
    public static void glad_debug_glBindFragDataLocationEXT(MemorySegment varValue) {
        glad_debug_glBindFragDataLocationEXT$constants.SEGMENT.set(glad_debug_glBindFragDataLocationEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindFragDataLocationIndexed$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindFragDataLocationIndexed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed
     * }
     */
    public static AddressLayout glad_glBindFragDataLocationIndexed$layout() {
        return glad_glBindFragDataLocationIndexed$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed
     * }
     */
    public static MemorySegment glad_glBindFragDataLocationIndexed$segment() {
        return glad_glBindFragDataLocationIndexed$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed
     * }
     */
    public static MemorySegment glad_glBindFragDataLocationIndexed() {
        return glad_glBindFragDataLocationIndexed$constants.SEGMENT.get(glad_glBindFragDataLocationIndexed$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed
     * }
     */
    public static void glad_glBindFragDataLocationIndexed(MemorySegment varValue) {
        glad_glBindFragDataLocationIndexed$constants.SEGMENT.set(glad_glBindFragDataLocationIndexed$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindFragDataLocationIndexed$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindFragDataLocationIndexed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed
     * }
     */
    public static AddressLayout glad_debug_glBindFragDataLocationIndexed$layout() {
        return glad_debug_glBindFragDataLocationIndexed$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed
     * }
     */
    public static MemorySegment glad_debug_glBindFragDataLocationIndexed$segment() {
        return glad_debug_glBindFragDataLocationIndexed$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed
     * }
     */
    public static MemorySegment glad_debug_glBindFragDataLocationIndexed() {
        return glad_debug_glBindFragDataLocationIndexed$constants.SEGMENT.get(glad_debug_glBindFragDataLocationIndexed$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed
     * }
     */
    public static void glad_debug_glBindFragDataLocationIndexed(MemorySegment varValue) {
        glad_debug_glBindFragDataLocationIndexed$constants.SEGMENT.set(glad_debug_glBindFragDataLocationIndexed$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindFramebuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindFramebuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer
     * }
     */
    public static AddressLayout glad_glBindFramebuffer$layout() {
        return glad_glBindFramebuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer
     * }
     */
    public static MemorySegment glad_glBindFramebuffer$segment() {
        return glad_glBindFramebuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer
     * }
     */
    public static MemorySegment glad_glBindFramebuffer() {
        return glad_glBindFramebuffer$constants.SEGMENT.get(glad_glBindFramebuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer
     * }
     */
    public static void glad_glBindFramebuffer(MemorySegment varValue) {
        glad_glBindFramebuffer$constants.SEGMENT.set(glad_glBindFramebuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindFramebuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindFramebuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer
     * }
     */
    public static AddressLayout glad_debug_glBindFramebuffer$layout() {
        return glad_debug_glBindFramebuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer
     * }
     */
    public static MemorySegment glad_debug_glBindFramebuffer$segment() {
        return glad_debug_glBindFramebuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer
     * }
     */
    public static MemorySegment glad_debug_glBindFramebuffer() {
        return glad_debug_glBindFramebuffer$constants.SEGMENT.get(glad_debug_glBindFramebuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer
     * }
     */
    public static void glad_debug_glBindFramebuffer(MemorySegment varValue) {
        glad_debug_glBindFramebuffer$constants.SEGMENT.set(glad_debug_glBindFramebuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindFramebufferEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindFramebufferEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFEREXTPROC glad_glBindFramebufferEXT
     * }
     */
    public static AddressLayout glad_glBindFramebufferEXT$layout() {
        return glad_glBindFramebufferEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFEREXTPROC glad_glBindFramebufferEXT
     * }
     */
    public static MemorySegment glad_glBindFramebufferEXT$segment() {
        return glad_glBindFramebufferEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFEREXTPROC glad_glBindFramebufferEXT
     * }
     */
    public static MemorySegment glad_glBindFramebufferEXT() {
        return glad_glBindFramebufferEXT$constants.SEGMENT.get(glad_glBindFramebufferEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFEREXTPROC glad_glBindFramebufferEXT
     * }
     */
    public static void glad_glBindFramebufferEXT(MemorySegment varValue) {
        glad_glBindFramebufferEXT$constants.SEGMENT.set(glad_glBindFramebufferEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindFramebufferEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindFramebufferEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFEREXTPROC glad_debug_glBindFramebufferEXT
     * }
     */
    public static AddressLayout glad_debug_glBindFramebufferEXT$layout() {
        return glad_debug_glBindFramebufferEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFEREXTPROC glad_debug_glBindFramebufferEXT
     * }
     */
    public static MemorySegment glad_debug_glBindFramebufferEXT$segment() {
        return glad_debug_glBindFramebufferEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFEREXTPROC glad_debug_glBindFramebufferEXT
     * }
     */
    public static MemorySegment glad_debug_glBindFramebufferEXT() {
        return glad_debug_glBindFramebufferEXT$constants.SEGMENT.get(glad_debug_glBindFramebufferEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDFRAMEBUFFEREXTPROC glad_debug_glBindFramebufferEXT
     * }
     */
    public static void glad_debug_glBindFramebufferEXT(MemorySegment varValue) {
        glad_debug_glBindFramebufferEXT$constants.SEGMENT.set(glad_debug_glBindFramebufferEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindImageTexture$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindImageTexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture
     * }
     */
    public static AddressLayout glad_glBindImageTexture$layout() {
        return glad_glBindImageTexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture
     * }
     */
    public static MemorySegment glad_glBindImageTexture$segment() {
        return glad_glBindImageTexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture
     * }
     */
    public static MemorySegment glad_glBindImageTexture() {
        return glad_glBindImageTexture$constants.SEGMENT.get(glad_glBindImageTexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture
     * }
     */
    public static void glad_glBindImageTexture(MemorySegment varValue) {
        glad_glBindImageTexture$constants.SEGMENT.set(glad_glBindImageTexture$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindImageTexture$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindImageTexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREPROC glad_debug_glBindImageTexture
     * }
     */
    public static AddressLayout glad_debug_glBindImageTexture$layout() {
        return glad_debug_glBindImageTexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREPROC glad_debug_glBindImageTexture
     * }
     */
    public static MemorySegment glad_debug_glBindImageTexture$segment() {
        return glad_debug_glBindImageTexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREPROC glad_debug_glBindImageTexture
     * }
     */
    public static MemorySegment glad_debug_glBindImageTexture() {
        return glad_debug_glBindImageTexture$constants.SEGMENT.get(glad_debug_glBindImageTexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREPROC glad_debug_glBindImageTexture
     * }
     */
    public static void glad_debug_glBindImageTexture(MemorySegment varValue) {
        glad_debug_glBindImageTexture$constants.SEGMENT.set(glad_debug_glBindImageTexture$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindImageTextureEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindImageTextureEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREEXTPROC glad_glBindImageTextureEXT
     * }
     */
    public static AddressLayout glad_glBindImageTextureEXT$layout() {
        return glad_glBindImageTextureEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREEXTPROC glad_glBindImageTextureEXT
     * }
     */
    public static MemorySegment glad_glBindImageTextureEXT$segment() {
        return glad_glBindImageTextureEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREEXTPROC glad_glBindImageTextureEXT
     * }
     */
    public static MemorySegment glad_glBindImageTextureEXT() {
        return glad_glBindImageTextureEXT$constants.SEGMENT.get(glad_glBindImageTextureEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREEXTPROC glad_glBindImageTextureEXT
     * }
     */
    public static void glad_glBindImageTextureEXT(MemorySegment varValue) {
        glad_glBindImageTextureEXT$constants.SEGMENT.set(glad_glBindImageTextureEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindImageTextureEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindImageTextureEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREEXTPROC glad_debug_glBindImageTextureEXT
     * }
     */
    public static AddressLayout glad_debug_glBindImageTextureEXT$layout() {
        return glad_debug_glBindImageTextureEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREEXTPROC glad_debug_glBindImageTextureEXT
     * }
     */
    public static MemorySegment glad_debug_glBindImageTextureEXT$segment() {
        return glad_debug_glBindImageTextureEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREEXTPROC glad_debug_glBindImageTextureEXT
     * }
     */
    public static MemorySegment glad_debug_glBindImageTextureEXT() {
        return glad_debug_glBindImageTextureEXT$constants.SEGMENT.get(glad_debug_glBindImageTextureEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTUREEXTPROC glad_debug_glBindImageTextureEXT
     * }
     */
    public static void glad_debug_glBindImageTextureEXT(MemorySegment varValue) {
        glad_debug_glBindImageTextureEXT$constants.SEGMENT.set(glad_debug_glBindImageTextureEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindImageTextures$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindImageTextures").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures
     * }
     */
    public static AddressLayout glad_glBindImageTextures$layout() {
        return glad_glBindImageTextures$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures
     * }
     */
    public static MemorySegment glad_glBindImageTextures$segment() {
        return glad_glBindImageTextures$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures
     * }
     */
    public static MemorySegment glad_glBindImageTextures() {
        return glad_glBindImageTextures$constants.SEGMENT.get(glad_glBindImageTextures$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures
     * }
     */
    public static void glad_glBindImageTextures(MemorySegment varValue) {
        glad_glBindImageTextures$constants.SEGMENT.set(glad_glBindImageTextures$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindImageTextures$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindImageTextures").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTURESPROC glad_debug_glBindImageTextures
     * }
     */
    public static AddressLayout glad_debug_glBindImageTextures$layout() {
        return glad_debug_glBindImageTextures$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTURESPROC glad_debug_glBindImageTextures
     * }
     */
    public static MemorySegment glad_debug_glBindImageTextures$segment() {
        return glad_debug_glBindImageTextures$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTURESPROC glad_debug_glBindImageTextures
     * }
     */
    public static MemorySegment glad_debug_glBindImageTextures() {
        return glad_debug_glBindImageTextures$constants.SEGMENT.get(glad_debug_glBindImageTextures$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDIMAGETEXTURESPROC glad_debug_glBindImageTextures
     * }
     */
    public static void glad_debug_glBindImageTextures(MemorySegment varValue) {
        glad_debug_glBindImageTextures$constants.SEGMENT.set(glad_debug_glBindImageTextures$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindMultiTextureEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindMultiTextureEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDMULTITEXTUREEXTPROC glad_glBindMultiTextureEXT
     * }
     */
    public static AddressLayout glad_glBindMultiTextureEXT$layout() {
        return glad_glBindMultiTextureEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDMULTITEXTUREEXTPROC glad_glBindMultiTextureEXT
     * }
     */
    public static MemorySegment glad_glBindMultiTextureEXT$segment() {
        return glad_glBindMultiTextureEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDMULTITEXTUREEXTPROC glad_glBindMultiTextureEXT
     * }
     */
    public static MemorySegment glad_glBindMultiTextureEXT() {
        return glad_glBindMultiTextureEXT$constants.SEGMENT.get(glad_glBindMultiTextureEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDMULTITEXTUREEXTPROC glad_glBindMultiTextureEXT
     * }
     */
    public static void glad_glBindMultiTextureEXT(MemorySegment varValue) {
        glad_glBindMultiTextureEXT$constants.SEGMENT.set(glad_glBindMultiTextureEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindMultiTextureEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindMultiTextureEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDMULTITEXTUREEXTPROC glad_debug_glBindMultiTextureEXT
     * }
     */
    public static AddressLayout glad_debug_glBindMultiTextureEXT$layout() {
        return glad_debug_glBindMultiTextureEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDMULTITEXTUREEXTPROC glad_debug_glBindMultiTextureEXT
     * }
     */
    public static MemorySegment glad_debug_glBindMultiTextureEXT$segment() {
        return glad_debug_glBindMultiTextureEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDMULTITEXTUREEXTPROC glad_debug_glBindMultiTextureEXT
     * }
     */
    public static MemorySegment glad_debug_glBindMultiTextureEXT() {
        return glad_debug_glBindMultiTextureEXT$constants.SEGMENT.get(glad_debug_glBindMultiTextureEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDMULTITEXTUREEXTPROC glad_debug_glBindMultiTextureEXT
     * }
     */
    public static void glad_debug_glBindMultiTextureEXT(MemorySegment varValue) {
        glad_debug_glBindMultiTextureEXT$constants.SEGMENT.set(glad_debug_glBindMultiTextureEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindProgramARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindProgramARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB
     * }
     */
    public static AddressLayout glad_glBindProgramARB$layout() {
        return glad_glBindProgramARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB
     * }
     */
    public static MemorySegment glad_glBindProgramARB$segment() {
        return glad_glBindProgramARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB
     * }
     */
    public static MemorySegment glad_glBindProgramARB() {
        return glad_glBindProgramARB$constants.SEGMENT.get(glad_glBindProgramARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB
     * }
     */
    public static void glad_glBindProgramARB(MemorySegment varValue) {
        glad_glBindProgramARB$constants.SEGMENT.set(glad_glBindProgramARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindProgramARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindProgramARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMARBPROC glad_debug_glBindProgramARB
     * }
     */
    public static AddressLayout glad_debug_glBindProgramARB$layout() {
        return glad_debug_glBindProgramARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMARBPROC glad_debug_glBindProgramARB
     * }
     */
    public static MemorySegment glad_debug_glBindProgramARB$segment() {
        return glad_debug_glBindProgramARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMARBPROC glad_debug_glBindProgramARB
     * }
     */
    public static MemorySegment glad_debug_glBindProgramARB() {
        return glad_debug_glBindProgramARB$constants.SEGMENT.get(glad_debug_glBindProgramARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMARBPROC glad_debug_glBindProgramARB
     * }
     */
    public static void glad_debug_glBindProgramARB(MemorySegment varValue) {
        glad_debug_glBindProgramARB$constants.SEGMENT.set(glad_debug_glBindProgramARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindProgramNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindProgramNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMNVPROC glad_glBindProgramNV
     * }
     */
    public static AddressLayout glad_glBindProgramNV$layout() {
        return glad_glBindProgramNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMNVPROC glad_glBindProgramNV
     * }
     */
    public static MemorySegment glad_glBindProgramNV$segment() {
        return glad_glBindProgramNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMNVPROC glad_glBindProgramNV
     * }
     */
    public static MemorySegment glad_glBindProgramNV() {
        return glad_glBindProgramNV$constants.SEGMENT.get(glad_glBindProgramNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMNVPROC glad_glBindProgramNV
     * }
     */
    public static void glad_glBindProgramNV(MemorySegment varValue) {
        glad_glBindProgramNV$constants.SEGMENT.set(glad_glBindProgramNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindProgramNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindProgramNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMNVPROC glad_debug_glBindProgramNV
     * }
     */
    public static AddressLayout glad_debug_glBindProgramNV$layout() {
        return glad_debug_glBindProgramNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMNVPROC glad_debug_glBindProgramNV
     * }
     */
    public static MemorySegment glad_debug_glBindProgramNV$segment() {
        return glad_debug_glBindProgramNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMNVPROC glad_debug_glBindProgramNV
     * }
     */
    public static MemorySegment glad_debug_glBindProgramNV() {
        return glad_debug_glBindProgramNV$constants.SEGMENT.get(glad_debug_glBindProgramNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMNVPROC glad_debug_glBindProgramNV
     * }
     */
    public static void glad_debug_glBindProgramNV(MemorySegment varValue) {
        glad_debug_glBindProgramNV$constants.SEGMENT.set(glad_debug_glBindProgramNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindProgramPipeline$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindProgramPipeline").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline
     * }
     */
    public static AddressLayout glad_glBindProgramPipeline$layout() {
        return glad_glBindProgramPipeline$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline
     * }
     */
    public static MemorySegment glad_glBindProgramPipeline$segment() {
        return glad_glBindProgramPipeline$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline
     * }
     */
    public static MemorySegment glad_glBindProgramPipeline() {
        return glad_glBindProgramPipeline$constants.SEGMENT.get(glad_glBindProgramPipeline$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline
     * }
     */
    public static void glad_glBindProgramPipeline(MemorySegment varValue) {
        glad_glBindProgramPipeline$constants.SEGMENT.set(glad_glBindProgramPipeline$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindProgramPipeline$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindProgramPipeline").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline
     * }
     */
    public static AddressLayout glad_debug_glBindProgramPipeline$layout() {
        return glad_debug_glBindProgramPipeline$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline
     * }
     */
    public static MemorySegment glad_debug_glBindProgramPipeline$segment() {
        return glad_debug_glBindProgramPipeline$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline
     * }
     */
    public static MemorySegment glad_debug_glBindProgramPipeline() {
        return glad_debug_glBindProgramPipeline$constants.SEGMENT.get(glad_debug_glBindProgramPipeline$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline
     * }
     */
    public static void glad_debug_glBindProgramPipeline(MemorySegment varValue) {
        glad_debug_glBindProgramPipeline$constants.SEGMENT.set(glad_debug_glBindProgramPipeline$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindRenderbuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindRenderbuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer
     * }
     */
    public static AddressLayout glad_glBindRenderbuffer$layout() {
        return glad_glBindRenderbuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer
     * }
     */
    public static MemorySegment glad_glBindRenderbuffer$segment() {
        return glad_glBindRenderbuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer
     * }
     */
    public static MemorySegment glad_glBindRenderbuffer() {
        return glad_glBindRenderbuffer$constants.SEGMENT.get(glad_glBindRenderbuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer
     * }
     */
    public static void glad_glBindRenderbuffer(MemorySegment varValue) {
        glad_glBindRenderbuffer$constants.SEGMENT.set(glad_glBindRenderbuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindRenderbuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindRenderbuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer
     * }
     */
    public static AddressLayout glad_debug_glBindRenderbuffer$layout() {
        return glad_debug_glBindRenderbuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer
     * }
     */
    public static MemorySegment glad_debug_glBindRenderbuffer$segment() {
        return glad_debug_glBindRenderbuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer
     * }
     */
    public static MemorySegment glad_debug_glBindRenderbuffer() {
        return glad_debug_glBindRenderbuffer$constants.SEGMENT.get(glad_debug_glBindRenderbuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer
     * }
     */
    public static void glad_debug_glBindRenderbuffer(MemorySegment varValue) {
        glad_debug_glBindRenderbuffer$constants.SEGMENT.set(glad_debug_glBindRenderbuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindRenderbufferEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindRenderbufferEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFEREXTPROC glad_glBindRenderbufferEXT
     * }
     */
    public static AddressLayout glad_glBindRenderbufferEXT$layout() {
        return glad_glBindRenderbufferEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFEREXTPROC glad_glBindRenderbufferEXT
     * }
     */
    public static MemorySegment glad_glBindRenderbufferEXT$segment() {
        return glad_glBindRenderbufferEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFEREXTPROC glad_glBindRenderbufferEXT
     * }
     */
    public static MemorySegment glad_glBindRenderbufferEXT() {
        return glad_glBindRenderbufferEXT$constants.SEGMENT.get(glad_glBindRenderbufferEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFEREXTPROC glad_glBindRenderbufferEXT
     * }
     */
    public static void glad_glBindRenderbufferEXT(MemorySegment varValue) {
        glad_glBindRenderbufferEXT$constants.SEGMENT.set(glad_glBindRenderbufferEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindRenderbufferEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindRenderbufferEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFEREXTPROC glad_debug_glBindRenderbufferEXT
     * }
     */
    public static AddressLayout glad_debug_glBindRenderbufferEXT$layout() {
        return glad_debug_glBindRenderbufferEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFEREXTPROC glad_debug_glBindRenderbufferEXT
     * }
     */
    public static MemorySegment glad_debug_glBindRenderbufferEXT$segment() {
        return glad_debug_glBindRenderbufferEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFEREXTPROC glad_debug_glBindRenderbufferEXT
     * }
     */
    public static MemorySegment glad_debug_glBindRenderbufferEXT() {
        return glad_debug_glBindRenderbufferEXT$constants.SEGMENT.get(glad_debug_glBindRenderbufferEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDRENDERBUFFEREXTPROC glad_debug_glBindRenderbufferEXT
     * }
     */
    public static void glad_debug_glBindRenderbufferEXT(MemorySegment varValue) {
        glad_debug_glBindRenderbufferEXT$constants.SEGMENT.set(glad_debug_glBindRenderbufferEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindSampler$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindSampler").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERPROC glad_glBindSampler
     * }
     */
    public static AddressLayout glad_glBindSampler$layout() {
        return glad_glBindSampler$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERPROC glad_glBindSampler
     * }
     */
    public static MemorySegment glad_glBindSampler$segment() {
        return glad_glBindSampler$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERPROC glad_glBindSampler
     * }
     */
    public static MemorySegment glad_glBindSampler() {
        return glad_glBindSampler$constants.SEGMENT.get(glad_glBindSampler$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERPROC glad_glBindSampler
     * }
     */
    public static void glad_glBindSampler(MemorySegment varValue) {
        glad_glBindSampler$constants.SEGMENT.set(glad_glBindSampler$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindSampler$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindSampler").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERPROC glad_debug_glBindSampler
     * }
     */
    public static AddressLayout glad_debug_glBindSampler$layout() {
        return glad_debug_glBindSampler$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERPROC glad_debug_glBindSampler
     * }
     */
    public static MemorySegment glad_debug_glBindSampler$segment() {
        return glad_debug_glBindSampler$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERPROC glad_debug_glBindSampler
     * }
     */
    public static MemorySegment glad_debug_glBindSampler() {
        return glad_debug_glBindSampler$constants.SEGMENT.get(glad_debug_glBindSampler$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERPROC glad_debug_glBindSampler
     * }
     */
    public static void glad_debug_glBindSampler(MemorySegment varValue) {
        glad_debug_glBindSampler$constants.SEGMENT.set(glad_debug_glBindSampler$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindSamplers$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindSamplers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERSPROC glad_glBindSamplers
     * }
     */
    public static AddressLayout glad_glBindSamplers$layout() {
        return glad_glBindSamplers$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERSPROC glad_glBindSamplers
     * }
     */
    public static MemorySegment glad_glBindSamplers$segment() {
        return glad_glBindSamplers$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERSPROC glad_glBindSamplers
     * }
     */
    public static MemorySegment glad_glBindSamplers() {
        return glad_glBindSamplers$constants.SEGMENT.get(glad_glBindSamplers$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERSPROC glad_glBindSamplers
     * }
     */
    public static void glad_glBindSamplers(MemorySegment varValue) {
        glad_glBindSamplers$constants.SEGMENT.set(glad_glBindSamplers$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindSamplers$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindSamplers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERSPROC glad_debug_glBindSamplers
     * }
     */
    public static AddressLayout glad_debug_glBindSamplers$layout() {
        return glad_debug_glBindSamplers$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERSPROC glad_debug_glBindSamplers
     * }
     */
    public static MemorySegment glad_debug_glBindSamplers$segment() {
        return glad_debug_glBindSamplers$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERSPROC glad_debug_glBindSamplers
     * }
     */
    public static MemorySegment glad_debug_glBindSamplers() {
        return glad_debug_glBindSamplers$constants.SEGMENT.get(glad_debug_glBindSamplers$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDSAMPLERSPROC glad_debug_glBindSamplers
     * }
     */
    public static void glad_debug_glBindSamplers(MemorySegment varValue) {
        glad_debug_glBindSamplers$constants.SEGMENT.set(glad_debug_glBindSamplers$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindTexture$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindTexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREPROC glad_glBindTexture
     * }
     */
    public static AddressLayout glad_glBindTexture$layout() {
        return glad_glBindTexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREPROC glad_glBindTexture
     * }
     */
    public static MemorySegment glad_glBindTexture$segment() {
        return glad_glBindTexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREPROC glad_glBindTexture
     * }
     */
    public static MemorySegment glad_glBindTexture() {
        return glad_glBindTexture$constants.SEGMENT.get(glad_glBindTexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREPROC glad_glBindTexture
     * }
     */
    public static void glad_glBindTexture(MemorySegment varValue) {
        glad_glBindTexture$constants.SEGMENT.set(glad_glBindTexture$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindTexture$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindTexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREPROC glad_debug_glBindTexture
     * }
     */
    public static AddressLayout glad_debug_glBindTexture$layout() {
        return glad_debug_glBindTexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREPROC glad_debug_glBindTexture
     * }
     */
    public static MemorySegment glad_debug_glBindTexture$segment() {
        return glad_debug_glBindTexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREPROC glad_debug_glBindTexture
     * }
     */
    public static MemorySegment glad_debug_glBindTexture() {
        return glad_debug_glBindTexture$constants.SEGMENT.get(glad_debug_glBindTexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREPROC glad_debug_glBindTexture
     * }
     */
    public static void glad_debug_glBindTexture(MemorySegment varValue) {
        glad_debug_glBindTexture$constants.SEGMENT.set(glad_debug_glBindTexture$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindTextureEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindTextureEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREEXTPROC glad_glBindTextureEXT
     * }
     */
    public static AddressLayout glad_glBindTextureEXT$layout() {
        return glad_glBindTextureEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREEXTPROC glad_glBindTextureEXT
     * }
     */
    public static MemorySegment glad_glBindTextureEXT$segment() {
        return glad_glBindTextureEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREEXTPROC glad_glBindTextureEXT
     * }
     */
    public static MemorySegment glad_glBindTextureEXT() {
        return glad_glBindTextureEXT$constants.SEGMENT.get(glad_glBindTextureEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREEXTPROC glad_glBindTextureEXT
     * }
     */
    public static void glad_glBindTextureEXT(MemorySegment varValue) {
        glad_glBindTextureEXT$constants.SEGMENT.set(glad_glBindTextureEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindTextureEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindTextureEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREEXTPROC glad_debug_glBindTextureEXT
     * }
     */
    public static AddressLayout glad_debug_glBindTextureEXT$layout() {
        return glad_debug_glBindTextureEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREEXTPROC glad_debug_glBindTextureEXT
     * }
     */
    public static MemorySegment glad_debug_glBindTextureEXT$segment() {
        return glad_debug_glBindTextureEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREEXTPROC glad_debug_glBindTextureEXT
     * }
     */
    public static MemorySegment glad_debug_glBindTextureEXT() {
        return glad_debug_glBindTextureEXT$constants.SEGMENT.get(glad_debug_glBindTextureEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREEXTPROC glad_debug_glBindTextureEXT
     * }
     */
    public static void glad_debug_glBindTextureEXT(MemorySegment varValue) {
        glad_debug_glBindTextureEXT$constants.SEGMENT.set(glad_debug_glBindTextureEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindTextureUnit$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindTextureUnit").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit
     * }
     */
    public static AddressLayout glad_glBindTextureUnit$layout() {
        return glad_glBindTextureUnit$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit
     * }
     */
    public static MemorySegment glad_glBindTextureUnit$segment() {
        return glad_glBindTextureUnit$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit
     * }
     */
    public static MemorySegment glad_glBindTextureUnit() {
        return glad_glBindTextureUnit$constants.SEGMENT.get(glad_glBindTextureUnit$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit
     * }
     */
    public static void glad_glBindTextureUnit(MemorySegment varValue) {
        glad_glBindTextureUnit$constants.SEGMENT.set(glad_glBindTextureUnit$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindTextureUnit$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindTextureUnit").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREUNITPROC glad_debug_glBindTextureUnit
     * }
     */
    public static AddressLayout glad_debug_glBindTextureUnit$layout() {
        return glad_debug_glBindTextureUnit$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREUNITPROC glad_debug_glBindTextureUnit
     * }
     */
    public static MemorySegment glad_debug_glBindTextureUnit$segment() {
        return glad_debug_glBindTextureUnit$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREUNITPROC glad_debug_glBindTextureUnit
     * }
     */
    public static MemorySegment glad_debug_glBindTextureUnit() {
        return glad_debug_glBindTextureUnit$constants.SEGMENT.get(glad_debug_glBindTextureUnit$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTUREUNITPROC glad_debug_glBindTextureUnit
     * }
     */
    public static void glad_debug_glBindTextureUnit(MemorySegment varValue) {
        glad_debug_glBindTextureUnit$constants.SEGMENT.set(glad_debug_glBindTextureUnit$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindTextures$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindTextures").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTURESPROC glad_glBindTextures
     * }
     */
    public static AddressLayout glad_glBindTextures$layout() {
        return glad_glBindTextures$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTURESPROC glad_glBindTextures
     * }
     */
    public static MemorySegment glad_glBindTextures$segment() {
        return glad_glBindTextures$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTURESPROC glad_glBindTextures
     * }
     */
    public static MemorySegment glad_glBindTextures() {
        return glad_glBindTextures$constants.SEGMENT.get(glad_glBindTextures$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTURESPROC glad_glBindTextures
     * }
     */
    public static void glad_glBindTextures(MemorySegment varValue) {
        glad_glBindTextures$constants.SEGMENT.set(glad_glBindTextures$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindTextures$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindTextures").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTURESPROC glad_debug_glBindTextures
     * }
     */
    public static AddressLayout glad_debug_glBindTextures$layout() {
        return glad_debug_glBindTextures$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTURESPROC glad_debug_glBindTextures
     * }
     */
    public static MemorySegment glad_debug_glBindTextures$segment() {
        return glad_debug_glBindTextures$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTURESPROC glad_debug_glBindTextures
     * }
     */
    public static MemorySegment glad_debug_glBindTextures() {
        return glad_debug_glBindTextures$constants.SEGMENT.get(glad_debug_glBindTextures$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTEXTURESPROC glad_debug_glBindTextures
     * }
     */
    public static void glad_debug_glBindTextures(MemorySegment varValue) {
        glad_debug_glBindTextures$constants.SEGMENT.set(glad_debug_glBindTextures$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindTransformFeedback$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindTransformFeedback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback
     * }
     */
    public static AddressLayout glad_glBindTransformFeedback$layout() {
        return glad_glBindTransformFeedback$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback
     * }
     */
    public static MemorySegment glad_glBindTransformFeedback$segment() {
        return glad_glBindTransformFeedback$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback
     * }
     */
    public static MemorySegment glad_glBindTransformFeedback() {
        return glad_glBindTransformFeedback$constants.SEGMENT.get(glad_glBindTransformFeedback$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback
     * }
     */
    public static void glad_glBindTransformFeedback(MemorySegment varValue) {
        glad_glBindTransformFeedback$constants.SEGMENT.set(glad_glBindTransformFeedback$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindTransformFeedback$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindTransformFeedback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback
     * }
     */
    public static AddressLayout glad_debug_glBindTransformFeedback$layout() {
        return glad_debug_glBindTransformFeedback$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback
     * }
     */
    public static MemorySegment glad_debug_glBindTransformFeedback$segment() {
        return glad_debug_glBindTransformFeedback$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback
     * }
     */
    public static MemorySegment glad_debug_glBindTransformFeedback() {
        return glad_debug_glBindTransformFeedback$constants.SEGMENT.get(glad_debug_glBindTransformFeedback$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback
     * }
     */
    public static void glad_debug_glBindTransformFeedback(MemorySegment varValue) {
        glad_debug_glBindTransformFeedback$constants.SEGMENT.set(glad_debug_glBindTransformFeedback$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindTransformFeedbackNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindTransformFeedbackNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_glBindTransformFeedbackNV
     * }
     */
    public static AddressLayout glad_glBindTransformFeedbackNV$layout() {
        return glad_glBindTransformFeedbackNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_glBindTransformFeedbackNV
     * }
     */
    public static MemorySegment glad_glBindTransformFeedbackNV$segment() {
        return glad_glBindTransformFeedbackNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_glBindTransformFeedbackNV
     * }
     */
    public static MemorySegment glad_glBindTransformFeedbackNV() {
        return glad_glBindTransformFeedbackNV$constants.SEGMENT.get(glad_glBindTransformFeedbackNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_glBindTransformFeedbackNV
     * }
     */
    public static void glad_glBindTransformFeedbackNV(MemorySegment varValue) {
        glad_glBindTransformFeedbackNV$constants.SEGMENT.set(glad_glBindTransformFeedbackNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindTransformFeedbackNV$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindTransformFeedbackNV").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_debug_glBindTransformFeedbackNV
     * }
     */
    public static AddressLayout glad_debug_glBindTransformFeedbackNV$layout() {
        return glad_debug_glBindTransformFeedbackNV$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_debug_glBindTransformFeedbackNV
     * }
     */
    public static MemorySegment glad_debug_glBindTransformFeedbackNV$segment() {
        return glad_debug_glBindTransformFeedbackNV$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_debug_glBindTransformFeedbackNV
     * }
     */
    public static MemorySegment glad_debug_glBindTransformFeedbackNV() {
        return glad_debug_glBindTransformFeedbackNV$constants.SEGMENT.get(glad_debug_glBindTransformFeedbackNV$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_debug_glBindTransformFeedbackNV
     * }
     */
    public static void glad_debug_glBindTransformFeedbackNV(MemorySegment varValue) {
        glad_debug_glBindTransformFeedbackNV$constants.SEGMENT.set(glad_debug_glBindTransformFeedbackNV$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindVertexArray$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindVertexArray").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray
     * }
     */
    public static AddressLayout glad_glBindVertexArray$layout() {
        return glad_glBindVertexArray$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray
     * }
     */
    public static MemorySegment glad_glBindVertexArray$segment() {
        return glad_glBindVertexArray$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray
     * }
     */
    public static MemorySegment glad_glBindVertexArray() {
        return glad_glBindVertexArray$constants.SEGMENT.get(glad_glBindVertexArray$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray
     * }
     */
    public static void glad_glBindVertexArray(MemorySegment varValue) {
        glad_glBindVertexArray$constants.SEGMENT.set(glad_glBindVertexArray$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindVertexArray$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindVertexArray").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray
     * }
     */
    public static AddressLayout glad_debug_glBindVertexArray$layout() {
        return glad_debug_glBindVertexArray$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray
     * }
     */
    public static MemorySegment glad_debug_glBindVertexArray$segment() {
        return glad_debug_glBindVertexArray$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray
     * }
     */
    public static MemorySegment glad_debug_glBindVertexArray() {
        return glad_debug_glBindVertexArray$constants.SEGMENT.get(glad_debug_glBindVertexArray$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray
     * }
     */
    public static void glad_debug_glBindVertexArray(MemorySegment varValue) {
        glad_debug_glBindVertexArray$constants.SEGMENT.set(glad_debug_glBindVertexArray$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindVertexArrayAPPLE$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindVertexArrayAPPLE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYAPPLEPROC glad_glBindVertexArrayAPPLE
     * }
     */
    public static AddressLayout glad_glBindVertexArrayAPPLE$layout() {
        return glad_glBindVertexArrayAPPLE$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYAPPLEPROC glad_glBindVertexArrayAPPLE
     * }
     */
    public static MemorySegment glad_glBindVertexArrayAPPLE$segment() {
        return glad_glBindVertexArrayAPPLE$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYAPPLEPROC glad_glBindVertexArrayAPPLE
     * }
     */
    public static MemorySegment glad_glBindVertexArrayAPPLE() {
        return glad_glBindVertexArrayAPPLE$constants.SEGMENT.get(glad_glBindVertexArrayAPPLE$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYAPPLEPROC glad_glBindVertexArrayAPPLE
     * }
     */
    public static void glad_glBindVertexArrayAPPLE(MemorySegment varValue) {
        glad_glBindVertexArrayAPPLE$constants.SEGMENT.set(glad_glBindVertexArrayAPPLE$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindVertexArrayAPPLE$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindVertexArrayAPPLE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYAPPLEPROC glad_debug_glBindVertexArrayAPPLE
     * }
     */
    public static AddressLayout glad_debug_glBindVertexArrayAPPLE$layout() {
        return glad_debug_glBindVertexArrayAPPLE$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYAPPLEPROC glad_debug_glBindVertexArrayAPPLE
     * }
     */
    public static MemorySegment glad_debug_glBindVertexArrayAPPLE$segment() {
        return glad_debug_glBindVertexArrayAPPLE$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYAPPLEPROC glad_debug_glBindVertexArrayAPPLE
     * }
     */
    public static MemorySegment glad_debug_glBindVertexArrayAPPLE() {
        return glad_debug_glBindVertexArrayAPPLE$constants.SEGMENT.get(glad_debug_glBindVertexArrayAPPLE$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXARRAYAPPLEPROC glad_debug_glBindVertexArrayAPPLE
     * }
     */
    public static void glad_debug_glBindVertexArrayAPPLE(MemorySegment varValue) {
        glad_debug_glBindVertexArrayAPPLE$constants.SEGMENT.set(glad_debug_glBindVertexArrayAPPLE$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindVertexBuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindVertexBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer
     * }
     */
    public static AddressLayout glad_glBindVertexBuffer$layout() {
        return glad_glBindVertexBuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer
     * }
     */
    public static MemorySegment glad_glBindVertexBuffer$segment() {
        return glad_glBindVertexBuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer
     * }
     */
    public static MemorySegment glad_glBindVertexBuffer() {
        return glad_glBindVertexBuffer$constants.SEGMENT.get(glad_glBindVertexBuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer
     * }
     */
    public static void glad_glBindVertexBuffer(MemorySegment varValue) {
        glad_glBindVertexBuffer$constants.SEGMENT.set(glad_glBindVertexBuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindVertexBuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindVertexBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERPROC glad_debug_glBindVertexBuffer
     * }
     */
    public static AddressLayout glad_debug_glBindVertexBuffer$layout() {
        return glad_debug_glBindVertexBuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERPROC glad_debug_glBindVertexBuffer
     * }
     */
    public static MemorySegment glad_debug_glBindVertexBuffer$segment() {
        return glad_debug_glBindVertexBuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERPROC glad_debug_glBindVertexBuffer
     * }
     */
    public static MemorySegment glad_debug_glBindVertexBuffer() {
        return glad_debug_glBindVertexBuffer$constants.SEGMENT.get(glad_debug_glBindVertexBuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERPROC glad_debug_glBindVertexBuffer
     * }
     */
    public static void glad_debug_glBindVertexBuffer(MemorySegment varValue) {
        glad_debug_glBindVertexBuffer$constants.SEGMENT.set(glad_debug_glBindVertexBuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBindVertexBuffers$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBindVertexBuffers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers
     * }
     */
    public static AddressLayout glad_glBindVertexBuffers$layout() {
        return glad_glBindVertexBuffers$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers
     * }
     */
    public static MemorySegment glad_glBindVertexBuffers$segment() {
        return glad_glBindVertexBuffers$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers
     * }
     */
    public static MemorySegment glad_glBindVertexBuffers() {
        return glad_glBindVertexBuffers$constants.SEGMENT.get(glad_glBindVertexBuffers$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers
     * }
     */
    public static void glad_glBindVertexBuffers(MemorySegment varValue) {
        glad_glBindVertexBuffers$constants.SEGMENT.set(glad_glBindVertexBuffers$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBindVertexBuffers$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBindVertexBuffers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERSPROC glad_debug_glBindVertexBuffers
     * }
     */
    public static AddressLayout glad_debug_glBindVertexBuffers$layout() {
        return glad_debug_glBindVertexBuffers$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERSPROC glad_debug_glBindVertexBuffers
     * }
     */
    public static MemorySegment glad_debug_glBindVertexBuffers$segment() {
        return glad_debug_glBindVertexBuffers$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERSPROC glad_debug_glBindVertexBuffers
     * }
     */
    public static MemorySegment glad_debug_glBindVertexBuffers() {
        return glad_debug_glBindVertexBuffers$constants.SEGMENT.get(glad_debug_glBindVertexBuffers$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBINDVERTEXBUFFERSPROC glad_debug_glBindVertexBuffers
     * }
     */
    public static void glad_debug_glBindVertexBuffers(MemorySegment varValue) {
        glad_debug_glBindVertexBuffers$constants.SEGMENT.set(glad_debug_glBindVertexBuffers$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBitmap$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBitmap").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBITMAPPROC glad_glBitmap
     * }
     */
    public static AddressLayout glad_glBitmap$layout() {
        return glad_glBitmap$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBITMAPPROC glad_glBitmap
     * }
     */
    public static MemorySegment glad_glBitmap$segment() {
        return glad_glBitmap$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBITMAPPROC glad_glBitmap
     * }
     */
    public static MemorySegment glad_glBitmap() {
        return glad_glBitmap$constants.SEGMENT.get(glad_glBitmap$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBITMAPPROC glad_glBitmap
     * }
     */
    public static void glad_glBitmap(MemorySegment varValue) {
        glad_glBitmap$constants.SEGMENT.set(glad_glBitmap$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBitmap$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBitmap").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBITMAPPROC glad_debug_glBitmap
     * }
     */
    public static AddressLayout glad_debug_glBitmap$layout() {
        return glad_debug_glBitmap$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBITMAPPROC glad_debug_glBitmap
     * }
     */
    public static MemorySegment glad_debug_glBitmap$segment() {
        return glad_debug_glBitmap$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBITMAPPROC glad_debug_glBitmap
     * }
     */
    public static MemorySegment glad_debug_glBitmap() {
        return glad_debug_glBitmap$constants.SEGMENT.get(glad_debug_glBitmap$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBITMAPPROC glad_debug_glBitmap
     * }
     */
    public static void glad_debug_glBitmap(MemorySegment varValue) {
        glad_debug_glBitmap$constants.SEGMENT.set(glad_debug_glBitmap$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendColor$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendColor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLORPROC glad_glBlendColor
     * }
     */
    public static AddressLayout glad_glBlendColor$layout() {
        return glad_glBlendColor$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLORPROC glad_glBlendColor
     * }
     */
    public static MemorySegment glad_glBlendColor$segment() {
        return glad_glBlendColor$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLORPROC glad_glBlendColor
     * }
     */
    public static MemorySegment glad_glBlendColor() {
        return glad_glBlendColor$constants.SEGMENT.get(glad_glBlendColor$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLORPROC glad_glBlendColor
     * }
     */
    public static void glad_glBlendColor(MemorySegment varValue) {
        glad_glBlendColor$constants.SEGMENT.set(glad_glBlendColor$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendColor$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendColor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLORPROC glad_debug_glBlendColor
     * }
     */
    public static AddressLayout glad_debug_glBlendColor$layout() {
        return glad_debug_glBlendColor$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLORPROC glad_debug_glBlendColor
     * }
     */
    public static MemorySegment glad_debug_glBlendColor$segment() {
        return glad_debug_glBlendColor$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLORPROC glad_debug_glBlendColor
     * }
     */
    public static MemorySegment glad_debug_glBlendColor() {
        return glad_debug_glBlendColor$constants.SEGMENT.get(glad_debug_glBlendColor$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLORPROC glad_debug_glBlendColor
     * }
     */
    public static void glad_debug_glBlendColor(MemorySegment varValue) {
        glad_debug_glBlendColor$constants.SEGMENT.set(glad_debug_glBlendColor$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendColorEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendColorEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLOREXTPROC glad_glBlendColorEXT
     * }
     */
    public static AddressLayout glad_glBlendColorEXT$layout() {
        return glad_glBlendColorEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLOREXTPROC glad_glBlendColorEXT
     * }
     */
    public static MemorySegment glad_glBlendColorEXT$segment() {
        return glad_glBlendColorEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLOREXTPROC glad_glBlendColorEXT
     * }
     */
    public static MemorySegment glad_glBlendColorEXT() {
        return glad_glBlendColorEXT$constants.SEGMENT.get(glad_glBlendColorEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLOREXTPROC glad_glBlendColorEXT
     * }
     */
    public static void glad_glBlendColorEXT(MemorySegment varValue) {
        glad_glBlendColorEXT$constants.SEGMENT.set(glad_glBlendColorEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendColorEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendColorEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLOREXTPROC glad_debug_glBlendColorEXT
     * }
     */
    public static AddressLayout glad_debug_glBlendColorEXT$layout() {
        return glad_debug_glBlendColorEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLOREXTPROC glad_debug_glBlendColorEXT
     * }
     */
    public static MemorySegment glad_debug_glBlendColorEXT$segment() {
        return glad_debug_glBlendColorEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLOREXTPROC glad_debug_glBlendColorEXT
     * }
     */
    public static MemorySegment glad_debug_glBlendColorEXT() {
        return glad_debug_glBlendColorEXT$constants.SEGMENT.get(glad_debug_glBlendColorEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDCOLOREXTPROC glad_debug_glBlendColorEXT
     * }
     */
    public static void glad_debug_glBlendColorEXT(MemorySegment varValue) {
        glad_debug_glBlendColorEXT$constants.SEGMENT.set(glad_debug_glBlendColorEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquation$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONPROC glad_glBlendEquation
     * }
     */
    public static AddressLayout glad_glBlendEquation$layout() {
        return glad_glBlendEquation$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONPROC glad_glBlendEquation
     * }
     */
    public static MemorySegment glad_glBlendEquation$segment() {
        return glad_glBlendEquation$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONPROC glad_glBlendEquation
     * }
     */
    public static MemorySegment glad_glBlendEquation() {
        return glad_glBlendEquation$constants.SEGMENT.get(glad_glBlendEquation$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONPROC glad_glBlendEquation
     * }
     */
    public static void glad_glBlendEquation(MemorySegment varValue) {
        glad_glBlendEquation$constants.SEGMENT.set(glad_glBlendEquation$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquation$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation
     * }
     */
    public static AddressLayout glad_debug_glBlendEquation$layout() {
        return glad_debug_glBlendEquation$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation
     * }
     */
    public static MemorySegment glad_debug_glBlendEquation$segment() {
        return glad_debug_glBlendEquation$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation
     * }
     */
    public static MemorySegment glad_debug_glBlendEquation() {
        return glad_debug_glBlendEquation$constants.SEGMENT.get(glad_debug_glBlendEquation$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation
     * }
     */
    public static void glad_debug_glBlendEquation(MemorySegment varValue) {
        glad_debug_glBlendEquation$constants.SEGMENT.set(glad_debug_glBlendEquation$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONEXTPROC glad_glBlendEquationEXT
     * }
     */
    public static AddressLayout glad_glBlendEquationEXT$layout() {
        return glad_glBlendEquationEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONEXTPROC glad_glBlendEquationEXT
     * }
     */
    public static MemorySegment glad_glBlendEquationEXT$segment() {
        return glad_glBlendEquationEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONEXTPROC glad_glBlendEquationEXT
     * }
     */
    public static MemorySegment glad_glBlendEquationEXT() {
        return glad_glBlendEquationEXT$constants.SEGMENT.get(glad_glBlendEquationEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONEXTPROC glad_glBlendEquationEXT
     * }
     */
    public static void glad_glBlendEquationEXT(MemorySegment varValue) {
        glad_glBlendEquationEXT$constants.SEGMENT.set(glad_glBlendEquationEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONEXTPROC glad_debug_glBlendEquationEXT
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationEXT$layout() {
        return glad_debug_glBlendEquationEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONEXTPROC glad_debug_glBlendEquationEXT
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationEXT$segment() {
        return glad_debug_glBlendEquationEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONEXTPROC glad_debug_glBlendEquationEXT
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationEXT() {
        return glad_debug_glBlendEquationEXT$constants.SEGMENT.get(glad_debug_glBlendEquationEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONEXTPROC glad_debug_glBlendEquationEXT
     * }
     */
    public static void glad_debug_glBlendEquationEXT(MemorySegment varValue) {
        glad_debug_glBlendEquationEXT$constants.SEGMENT.set(glad_debug_glBlendEquationEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationIndexedAMD$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationIndexedAMD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_glBlendEquationIndexedAMD
     * }
     */
    public static AddressLayout glad_glBlendEquationIndexedAMD$layout() {
        return glad_glBlendEquationIndexedAMD$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_glBlendEquationIndexedAMD
     * }
     */
    public static MemorySegment glad_glBlendEquationIndexedAMD$segment() {
        return glad_glBlendEquationIndexedAMD$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_glBlendEquationIndexedAMD
     * }
     */
    public static MemorySegment glad_glBlendEquationIndexedAMD() {
        return glad_glBlendEquationIndexedAMD$constants.SEGMENT.get(glad_glBlendEquationIndexedAMD$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_glBlendEquationIndexedAMD
     * }
     */
    public static void glad_glBlendEquationIndexedAMD(MemorySegment varValue) {
        glad_glBlendEquationIndexedAMD$constants.SEGMENT.set(glad_glBlendEquationIndexedAMD$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationIndexedAMD$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationIndexedAMD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_debug_glBlendEquationIndexedAMD
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationIndexedAMD$layout() {
        return glad_debug_glBlendEquationIndexedAMD$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_debug_glBlendEquationIndexedAMD
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationIndexedAMD$segment() {
        return glad_debug_glBlendEquationIndexedAMD$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_debug_glBlendEquationIndexedAMD
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationIndexedAMD() {
        return glad_debug_glBlendEquationIndexedAMD$constants.SEGMENT.get(glad_debug_glBlendEquationIndexedAMD$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_debug_glBlendEquationIndexedAMD
     * }
     */
    public static void glad_debug_glBlendEquationIndexedAMD(MemorySegment varValue) {
        glad_debug_glBlendEquationIndexedAMD$constants.SEGMENT.set(glad_debug_glBlendEquationIndexedAMD$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationSeparate$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationSeparate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate
     * }
     */
    public static AddressLayout glad_glBlendEquationSeparate$layout() {
        return glad_glBlendEquationSeparate$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparate$segment() {
        return glad_glBlendEquationSeparate$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparate() {
        return glad_glBlendEquationSeparate$constants.SEGMENT.get(glad_glBlendEquationSeparate$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate
     * }
     */
    public static void glad_glBlendEquationSeparate(MemorySegment varValue) {
        glad_glBlendEquationSeparate$constants.SEGMENT.set(glad_glBlendEquationSeparate$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationSeparate$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationSeparate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationSeparate$layout() {
        return glad_debug_glBlendEquationSeparate$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparate$segment() {
        return glad_debug_glBlendEquationSeparate$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparate() {
        return glad_debug_glBlendEquationSeparate$constants.SEGMENT.get(glad_debug_glBlendEquationSeparate$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate
     * }
     */
    public static void glad_debug_glBlendEquationSeparate(MemorySegment varValue) {
        glad_debug_glBlendEquationSeparate$constants.SEGMENT.set(glad_debug_glBlendEquationSeparate$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationSeparateEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationSeparateEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_glBlendEquationSeparateEXT
     * }
     */
    public static AddressLayout glad_glBlendEquationSeparateEXT$layout() {
        return glad_glBlendEquationSeparateEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_glBlendEquationSeparateEXT
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparateEXT$segment() {
        return glad_glBlendEquationSeparateEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_glBlendEquationSeparateEXT
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparateEXT() {
        return glad_glBlendEquationSeparateEXT$constants.SEGMENT.get(glad_glBlendEquationSeparateEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_glBlendEquationSeparateEXT
     * }
     */
    public static void glad_glBlendEquationSeparateEXT(MemorySegment varValue) {
        glad_glBlendEquationSeparateEXT$constants.SEGMENT.set(glad_glBlendEquationSeparateEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationSeparateEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationSeparateEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_debug_glBlendEquationSeparateEXT
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationSeparateEXT$layout() {
        return glad_debug_glBlendEquationSeparateEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_debug_glBlendEquationSeparateEXT
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparateEXT$segment() {
        return glad_debug_glBlendEquationSeparateEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_debug_glBlendEquationSeparateEXT
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparateEXT() {
        return glad_debug_glBlendEquationSeparateEXT$constants.SEGMENT.get(glad_debug_glBlendEquationSeparateEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_debug_glBlendEquationSeparateEXT
     * }
     */
    public static void glad_debug_glBlendEquationSeparateEXT(MemorySegment varValue) {
        glad_debug_glBlendEquationSeparateEXT$constants.SEGMENT.set(glad_debug_glBlendEquationSeparateEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationSeparateIndexedAMD$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationSeparateIndexedAMD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_glBlendEquationSeparateIndexedAMD
     * }
     */
    public static AddressLayout glad_glBlendEquationSeparateIndexedAMD$layout() {
        return glad_glBlendEquationSeparateIndexedAMD$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_glBlendEquationSeparateIndexedAMD
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparateIndexedAMD$segment() {
        return glad_glBlendEquationSeparateIndexedAMD$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_glBlendEquationSeparateIndexedAMD
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparateIndexedAMD() {
        return glad_glBlendEquationSeparateIndexedAMD$constants.SEGMENT.get(glad_glBlendEquationSeparateIndexedAMD$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_glBlendEquationSeparateIndexedAMD
     * }
     */
    public static void glad_glBlendEquationSeparateIndexedAMD(MemorySegment varValue) {
        glad_glBlendEquationSeparateIndexedAMD$constants.SEGMENT.set(glad_glBlendEquationSeparateIndexedAMD$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationSeparateIndexedAMD$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationSeparateIndexedAMD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_debug_glBlendEquationSeparateIndexedAMD
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationSeparateIndexedAMD$layout() {
        return glad_debug_glBlendEquationSeparateIndexedAMD$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_debug_glBlendEquationSeparateIndexedAMD
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparateIndexedAMD$segment() {
        return glad_debug_glBlendEquationSeparateIndexedAMD$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_debug_glBlendEquationSeparateIndexedAMD
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparateIndexedAMD() {
        return glad_debug_glBlendEquationSeparateIndexedAMD$constants.SEGMENT.get(glad_debug_glBlendEquationSeparateIndexedAMD$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_debug_glBlendEquationSeparateIndexedAMD
     * }
     */
    public static void glad_debug_glBlendEquationSeparateIndexedAMD(MemorySegment varValue) {
        glad_debug_glBlendEquationSeparateIndexedAMD$constants.SEGMENT.set(glad_debug_glBlendEquationSeparateIndexedAMD$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationSeparatei$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationSeparatei").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei
     * }
     */
    public static AddressLayout glad_glBlendEquationSeparatei$layout() {
        return glad_glBlendEquationSeparatei$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparatei$segment() {
        return glad_glBlendEquationSeparatei$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparatei() {
        return glad_glBlendEquationSeparatei$constants.SEGMENT.get(glad_glBlendEquationSeparatei$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei
     * }
     */
    public static void glad_glBlendEquationSeparatei(MemorySegment varValue) {
        glad_glBlendEquationSeparatei$constants.SEGMENT.set(glad_glBlendEquationSeparatei$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationSeparatei$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationSeparatei").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_debug_glBlendEquationSeparatei
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationSeparatei$layout() {
        return glad_debug_glBlendEquationSeparatei$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_debug_glBlendEquationSeparatei
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparatei$segment() {
        return glad_debug_glBlendEquationSeparatei$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_debug_glBlendEquationSeparatei
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparatei() {
        return glad_debug_glBlendEquationSeparatei$constants.SEGMENT.get(glad_debug_glBlendEquationSeparatei$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_debug_glBlendEquationSeparatei
     * }
     */
    public static void glad_debug_glBlendEquationSeparatei(MemorySegment varValue) {
        glad_debug_glBlendEquationSeparatei$constants.SEGMENT.set(glad_debug_glBlendEquationSeparatei$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationSeparateiARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationSeparateiARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB
     * }
     */
    public static AddressLayout glad_glBlendEquationSeparateiARB$layout() {
        return glad_glBlendEquationSeparateiARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparateiARB$segment() {
        return glad_glBlendEquationSeparateiARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB
     * }
     */
    public static MemorySegment glad_glBlendEquationSeparateiARB() {
        return glad_glBlendEquationSeparateiARB$constants.SEGMENT.get(glad_glBlendEquationSeparateiARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB
     * }
     */
    public static void glad_glBlendEquationSeparateiARB(MemorySegment varValue) {
        glad_glBlendEquationSeparateiARB$constants.SEGMENT.set(glad_glBlendEquationSeparateiARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationSeparateiARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationSeparateiARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_debug_glBlendEquationSeparateiARB
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationSeparateiARB$layout() {
        return glad_debug_glBlendEquationSeparateiARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_debug_glBlendEquationSeparateiARB
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparateiARB$segment() {
        return glad_debug_glBlendEquationSeparateiARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_debug_glBlendEquationSeparateiARB
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationSeparateiARB() {
        return glad_debug_glBlendEquationSeparateiARB$constants.SEGMENT.get(glad_debug_glBlendEquationSeparateiARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_debug_glBlendEquationSeparateiARB
     * }
     */
    public static void glad_debug_glBlendEquationSeparateiARB(MemorySegment varValue) {
        glad_debug_glBlendEquationSeparateiARB$constants.SEGMENT.set(glad_debug_glBlendEquationSeparateiARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationi$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationi").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi
     * }
     */
    public static AddressLayout glad_glBlendEquationi$layout() {
        return glad_glBlendEquationi$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi
     * }
     */
    public static MemorySegment glad_glBlendEquationi$segment() {
        return glad_glBlendEquationi$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi
     * }
     */
    public static MemorySegment glad_glBlendEquationi() {
        return glad_glBlendEquationi$constants.SEGMENT.get(glad_glBlendEquationi$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi
     * }
     */
    public static void glad_glBlendEquationi(MemorySegment varValue) {
        glad_glBlendEquationi$constants.SEGMENT.set(glad_glBlendEquationi$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationi$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationi").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIPROC glad_debug_glBlendEquationi
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationi$layout() {
        return glad_debug_glBlendEquationi$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIPROC glad_debug_glBlendEquationi
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationi$segment() {
        return glad_debug_glBlendEquationi$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIPROC glad_debug_glBlendEquationi
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationi() {
        return glad_debug_glBlendEquationi$constants.SEGMENT.get(glad_debug_glBlendEquationi$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIPROC glad_debug_glBlendEquationi
     * }
     */
    public static void glad_debug_glBlendEquationi(MemorySegment varValue) {
        glad_debug_glBlendEquationi$constants.SEGMENT.set(glad_debug_glBlendEquationi$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendEquationiARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendEquationiARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB
     * }
     */
    public static AddressLayout glad_glBlendEquationiARB$layout() {
        return glad_glBlendEquationiARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB
     * }
     */
    public static MemorySegment glad_glBlendEquationiARB$segment() {
        return glad_glBlendEquationiARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB
     * }
     */
    public static MemorySegment glad_glBlendEquationiARB() {
        return glad_glBlendEquationiARB$constants.SEGMENT.get(glad_glBlendEquationiARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB
     * }
     */
    public static void glad_glBlendEquationiARB(MemorySegment varValue) {
        glad_glBlendEquationiARB$constants.SEGMENT.set(glad_glBlendEquationiARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendEquationiARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendEquationiARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIARBPROC glad_debug_glBlendEquationiARB
     * }
     */
    public static AddressLayout glad_debug_glBlendEquationiARB$layout() {
        return glad_debug_glBlendEquationiARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIARBPROC glad_debug_glBlendEquationiARB
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationiARB$segment() {
        return glad_debug_glBlendEquationiARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIARBPROC glad_debug_glBlendEquationiARB
     * }
     */
    public static MemorySegment glad_debug_glBlendEquationiARB() {
        return glad_debug_glBlendEquationiARB$constants.SEGMENT.get(glad_debug_glBlendEquationiARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDEQUATIONIARBPROC glad_debug_glBlendEquationiARB
     * }
     */
    public static void glad_debug_glBlendEquationiARB(MemorySegment varValue) {
        glad_debug_glBlendEquationiARB$constants.SEGMENT.set(glad_debug_glBlendEquationiARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFunc$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFunc").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCPROC glad_glBlendFunc
     * }
     */
    public static AddressLayout glad_glBlendFunc$layout() {
        return glad_glBlendFunc$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCPROC glad_glBlendFunc
     * }
     */
    public static MemorySegment glad_glBlendFunc$segment() {
        return glad_glBlendFunc$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCPROC glad_glBlendFunc
     * }
     */
    public static MemorySegment glad_glBlendFunc() {
        return glad_glBlendFunc$constants.SEGMENT.get(glad_glBlendFunc$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCPROC glad_glBlendFunc
     * }
     */
    public static void glad_glBlendFunc(MemorySegment varValue) {
        glad_glBlendFunc$constants.SEGMENT.set(glad_glBlendFunc$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFunc$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFunc").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCPROC glad_debug_glBlendFunc
     * }
     */
    public static AddressLayout glad_debug_glBlendFunc$layout() {
        return glad_debug_glBlendFunc$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCPROC glad_debug_glBlendFunc
     * }
     */
    public static MemorySegment glad_debug_glBlendFunc$segment() {
        return glad_debug_glBlendFunc$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCPROC glad_debug_glBlendFunc
     * }
     */
    public static MemorySegment glad_debug_glBlendFunc() {
        return glad_debug_glBlendFunc$constants.SEGMENT.get(glad_debug_glBlendFunc$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCPROC glad_debug_glBlendFunc
     * }
     */
    public static void glad_debug_glBlendFunc(MemorySegment varValue) {
        glad_debug_glBlendFunc$constants.SEGMENT.set(glad_debug_glBlendFunc$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFuncIndexedAMD$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFuncIndexedAMD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCINDEXEDAMDPROC glad_glBlendFuncIndexedAMD
     * }
     */
    public static AddressLayout glad_glBlendFuncIndexedAMD$layout() {
        return glad_glBlendFuncIndexedAMD$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCINDEXEDAMDPROC glad_glBlendFuncIndexedAMD
     * }
     */
    public static MemorySegment glad_glBlendFuncIndexedAMD$segment() {
        return glad_glBlendFuncIndexedAMD$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCINDEXEDAMDPROC glad_glBlendFuncIndexedAMD
     * }
     */
    public static MemorySegment glad_glBlendFuncIndexedAMD() {
        return glad_glBlendFuncIndexedAMD$constants.SEGMENT.get(glad_glBlendFuncIndexedAMD$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCINDEXEDAMDPROC glad_glBlendFuncIndexedAMD
     * }
     */
    public static void glad_glBlendFuncIndexedAMD(MemorySegment varValue) {
        glad_glBlendFuncIndexedAMD$constants.SEGMENT.set(glad_glBlendFuncIndexedAMD$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFuncIndexedAMD$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFuncIndexedAMD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCINDEXEDAMDPROC glad_debug_glBlendFuncIndexedAMD
     * }
     */
    public static AddressLayout glad_debug_glBlendFuncIndexedAMD$layout() {
        return glad_debug_glBlendFuncIndexedAMD$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCINDEXEDAMDPROC glad_debug_glBlendFuncIndexedAMD
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncIndexedAMD$segment() {
        return glad_debug_glBlendFuncIndexedAMD$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCINDEXEDAMDPROC glad_debug_glBlendFuncIndexedAMD
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncIndexedAMD() {
        return glad_debug_glBlendFuncIndexedAMD$constants.SEGMENT.get(glad_debug_glBlendFuncIndexedAMD$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCINDEXEDAMDPROC glad_debug_glBlendFuncIndexedAMD
     * }
     */
    public static void glad_debug_glBlendFuncIndexedAMD(MemorySegment varValue) {
        glad_debug_glBlendFuncIndexedAMD$constants.SEGMENT.set(glad_debug_glBlendFuncIndexedAMD$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFuncSeparate$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFuncSeparate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate
     * }
     */
    public static AddressLayout glad_glBlendFuncSeparate$layout() {
        return glad_glBlendFuncSeparate$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparate$segment() {
        return glad_glBlendFuncSeparate$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparate() {
        return glad_glBlendFuncSeparate$constants.SEGMENT.get(glad_glBlendFuncSeparate$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate
     * }
     */
    public static void glad_glBlendFuncSeparate(MemorySegment varValue) {
        glad_glBlendFuncSeparate$constants.SEGMENT.set(glad_glBlendFuncSeparate$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFuncSeparate$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFuncSeparate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate
     * }
     */
    public static AddressLayout glad_debug_glBlendFuncSeparate$layout() {
        return glad_debug_glBlendFuncSeparate$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparate$segment() {
        return glad_debug_glBlendFuncSeparate$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparate() {
        return glad_debug_glBlendFuncSeparate$constants.SEGMENT.get(glad_debug_glBlendFuncSeparate$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate
     * }
     */
    public static void glad_debug_glBlendFuncSeparate(MemorySegment varValue) {
        glad_debug_glBlendFuncSeparate$constants.SEGMENT.set(glad_debug_glBlendFuncSeparate$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFuncSeparateEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFuncSeparateEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEEXTPROC glad_glBlendFuncSeparateEXT
     * }
     */
    public static AddressLayout glad_glBlendFuncSeparateEXT$layout() {
        return glad_glBlendFuncSeparateEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEEXTPROC glad_glBlendFuncSeparateEXT
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparateEXT$segment() {
        return glad_glBlendFuncSeparateEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEEXTPROC glad_glBlendFuncSeparateEXT
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparateEXT() {
        return glad_glBlendFuncSeparateEXT$constants.SEGMENT.get(glad_glBlendFuncSeparateEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEEXTPROC glad_glBlendFuncSeparateEXT
     * }
     */
    public static void glad_glBlendFuncSeparateEXT(MemorySegment varValue) {
        glad_glBlendFuncSeparateEXT$constants.SEGMENT.set(glad_glBlendFuncSeparateEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFuncSeparateEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFuncSeparateEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEEXTPROC glad_debug_glBlendFuncSeparateEXT
     * }
     */
    public static AddressLayout glad_debug_glBlendFuncSeparateEXT$layout() {
        return glad_debug_glBlendFuncSeparateEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEEXTPROC glad_debug_glBlendFuncSeparateEXT
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparateEXT$segment() {
        return glad_debug_glBlendFuncSeparateEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEEXTPROC glad_debug_glBlendFuncSeparateEXT
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparateEXT() {
        return glad_debug_glBlendFuncSeparateEXT$constants.SEGMENT.get(glad_debug_glBlendFuncSeparateEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEEXTPROC glad_debug_glBlendFuncSeparateEXT
     * }
     */
    public static void glad_debug_glBlendFuncSeparateEXT(MemorySegment varValue) {
        glad_debug_glBlendFuncSeparateEXT$constants.SEGMENT.set(glad_debug_glBlendFuncSeparateEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFuncSeparateINGR$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFuncSeparateINGR").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINGRPROC glad_glBlendFuncSeparateINGR
     * }
     */
    public static AddressLayout glad_glBlendFuncSeparateINGR$layout() {
        return glad_glBlendFuncSeparateINGR$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINGRPROC glad_glBlendFuncSeparateINGR
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparateINGR$segment() {
        return glad_glBlendFuncSeparateINGR$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINGRPROC glad_glBlendFuncSeparateINGR
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparateINGR() {
        return glad_glBlendFuncSeparateINGR$constants.SEGMENT.get(glad_glBlendFuncSeparateINGR$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINGRPROC glad_glBlendFuncSeparateINGR
     * }
     */
    public static void glad_glBlendFuncSeparateINGR(MemorySegment varValue) {
        glad_glBlendFuncSeparateINGR$constants.SEGMENT.set(glad_glBlendFuncSeparateINGR$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFuncSeparateINGR$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFuncSeparateINGR").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINGRPROC glad_debug_glBlendFuncSeparateINGR
     * }
     */
    public static AddressLayout glad_debug_glBlendFuncSeparateINGR$layout() {
        return glad_debug_glBlendFuncSeparateINGR$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINGRPROC glad_debug_glBlendFuncSeparateINGR
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparateINGR$segment() {
        return glad_debug_glBlendFuncSeparateINGR$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINGRPROC glad_debug_glBlendFuncSeparateINGR
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparateINGR() {
        return glad_debug_glBlendFuncSeparateINGR$constants.SEGMENT.get(glad_debug_glBlendFuncSeparateINGR$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINGRPROC glad_debug_glBlendFuncSeparateINGR
     * }
     */
    public static void glad_debug_glBlendFuncSeparateINGR(MemorySegment varValue) {
        glad_debug_glBlendFuncSeparateINGR$constants.SEGMENT.set(glad_debug_glBlendFuncSeparateINGR$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFuncSeparateIndexedAMD$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFuncSeparateIndexedAMD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_glBlendFuncSeparateIndexedAMD
     * }
     */
    public static AddressLayout glad_glBlendFuncSeparateIndexedAMD$layout() {
        return glad_glBlendFuncSeparateIndexedAMD$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_glBlendFuncSeparateIndexedAMD
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparateIndexedAMD$segment() {
        return glad_glBlendFuncSeparateIndexedAMD$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_glBlendFuncSeparateIndexedAMD
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparateIndexedAMD() {
        return glad_glBlendFuncSeparateIndexedAMD$constants.SEGMENT.get(glad_glBlendFuncSeparateIndexedAMD$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_glBlendFuncSeparateIndexedAMD
     * }
     */
    public static void glad_glBlendFuncSeparateIndexedAMD(MemorySegment varValue) {
        glad_glBlendFuncSeparateIndexedAMD$constants.SEGMENT.set(glad_glBlendFuncSeparateIndexedAMD$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFuncSeparateIndexedAMD$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFuncSeparateIndexedAMD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_debug_glBlendFuncSeparateIndexedAMD
     * }
     */
    public static AddressLayout glad_debug_glBlendFuncSeparateIndexedAMD$layout() {
        return glad_debug_glBlendFuncSeparateIndexedAMD$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_debug_glBlendFuncSeparateIndexedAMD
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparateIndexedAMD$segment() {
        return glad_debug_glBlendFuncSeparateIndexedAMD$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_debug_glBlendFuncSeparateIndexedAMD
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparateIndexedAMD() {
        return glad_debug_glBlendFuncSeparateIndexedAMD$constants.SEGMENT.get(glad_debug_glBlendFuncSeparateIndexedAMD$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_debug_glBlendFuncSeparateIndexedAMD
     * }
     */
    public static void glad_debug_glBlendFuncSeparateIndexedAMD(MemorySegment varValue) {
        glad_debug_glBlendFuncSeparateIndexedAMD$constants.SEGMENT.set(glad_debug_glBlendFuncSeparateIndexedAMD$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFuncSeparatei$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFuncSeparatei").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei
     * }
     */
    public static AddressLayout glad_glBlendFuncSeparatei$layout() {
        return glad_glBlendFuncSeparatei$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparatei$segment() {
        return glad_glBlendFuncSeparatei$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparatei() {
        return glad_glBlendFuncSeparatei$constants.SEGMENT.get(glad_glBlendFuncSeparatei$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei
     * }
     */
    public static void glad_glBlendFuncSeparatei(MemorySegment varValue) {
        glad_glBlendFuncSeparatei$constants.SEGMENT.set(glad_glBlendFuncSeparatei$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFuncSeparatei$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFuncSeparatei").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIPROC glad_debug_glBlendFuncSeparatei
     * }
     */
    public static AddressLayout glad_debug_glBlendFuncSeparatei$layout() {
        return glad_debug_glBlendFuncSeparatei$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIPROC glad_debug_glBlendFuncSeparatei
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparatei$segment() {
        return glad_debug_glBlendFuncSeparatei$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIPROC glad_debug_glBlendFuncSeparatei
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparatei() {
        return glad_debug_glBlendFuncSeparatei$constants.SEGMENT.get(glad_debug_glBlendFuncSeparatei$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIPROC glad_debug_glBlendFuncSeparatei
     * }
     */
    public static void glad_debug_glBlendFuncSeparatei(MemorySegment varValue) {
        glad_debug_glBlendFuncSeparatei$constants.SEGMENT.set(glad_debug_glBlendFuncSeparatei$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFuncSeparateiARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFuncSeparateiARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB
     * }
     */
    public static AddressLayout glad_glBlendFuncSeparateiARB$layout() {
        return glad_glBlendFuncSeparateiARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparateiARB$segment() {
        return glad_glBlendFuncSeparateiARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB
     * }
     */
    public static MemorySegment glad_glBlendFuncSeparateiARB() {
        return glad_glBlendFuncSeparateiARB$constants.SEGMENT.get(glad_glBlendFuncSeparateiARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB
     * }
     */
    public static void glad_glBlendFuncSeparateiARB(MemorySegment varValue) {
        glad_glBlendFuncSeparateiARB$constants.SEGMENT.set(glad_glBlendFuncSeparateiARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFuncSeparateiARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFuncSeparateiARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_debug_glBlendFuncSeparateiARB
     * }
     */
    public static AddressLayout glad_debug_glBlendFuncSeparateiARB$layout() {
        return glad_debug_glBlendFuncSeparateiARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_debug_glBlendFuncSeparateiARB
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparateiARB$segment() {
        return glad_debug_glBlendFuncSeparateiARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_debug_glBlendFuncSeparateiARB
     * }
     */
    public static MemorySegment glad_debug_glBlendFuncSeparateiARB() {
        return glad_debug_glBlendFuncSeparateiARB$constants.SEGMENT.get(glad_debug_glBlendFuncSeparateiARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_debug_glBlendFuncSeparateiARB
     * }
     */
    public static void glad_debug_glBlendFuncSeparateiARB(MemorySegment varValue) {
        glad_debug_glBlendFuncSeparateiARB$constants.SEGMENT.set(glad_debug_glBlendFuncSeparateiARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFunci$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFunci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIPROC glad_glBlendFunci
     * }
     */
    public static AddressLayout glad_glBlendFunci$layout() {
        return glad_glBlendFunci$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIPROC glad_glBlendFunci
     * }
     */
    public static MemorySegment glad_glBlendFunci$segment() {
        return glad_glBlendFunci$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIPROC glad_glBlendFunci
     * }
     */
    public static MemorySegment glad_glBlendFunci() {
        return glad_glBlendFunci$constants.SEGMENT.get(glad_glBlendFunci$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIPROC glad_glBlendFunci
     * }
     */
    public static void glad_glBlendFunci(MemorySegment varValue) {
        glad_glBlendFunci$constants.SEGMENT.set(glad_glBlendFunci$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFunci$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFunci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIPROC glad_debug_glBlendFunci
     * }
     */
    public static AddressLayout glad_debug_glBlendFunci$layout() {
        return glad_debug_glBlendFunci$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIPROC glad_debug_glBlendFunci
     * }
     */
    public static MemorySegment glad_debug_glBlendFunci$segment() {
        return glad_debug_glBlendFunci$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIPROC glad_debug_glBlendFunci
     * }
     */
    public static MemorySegment glad_debug_glBlendFunci() {
        return glad_debug_glBlendFunci$constants.SEGMENT.get(glad_debug_glBlendFunci$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIPROC glad_debug_glBlendFunci
     * }
     */
    public static void glad_debug_glBlendFunci(MemorySegment varValue) {
        glad_debug_glBlendFunci$constants.SEGMENT.set(glad_debug_glBlendFunci$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlendFunciARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlendFunciARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB
     * }
     */
    public static AddressLayout glad_glBlendFunciARB$layout() {
        return glad_glBlendFunciARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB
     * }
     */
    public static MemorySegment glad_glBlendFunciARB$segment() {
        return glad_glBlendFunciARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB
     * }
     */
    public static MemorySegment glad_glBlendFunciARB() {
        return glad_glBlendFunciARB$constants.SEGMENT.get(glad_glBlendFunciARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB
     * }
     */
    public static void glad_glBlendFunciARB(MemorySegment varValue) {
        glad_glBlendFunciARB$constants.SEGMENT.set(glad_glBlendFunciARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlendFunciARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlendFunciARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIARBPROC glad_debug_glBlendFunciARB
     * }
     */
    public static AddressLayout glad_debug_glBlendFunciARB$layout() {
        return glad_debug_glBlendFunciARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIARBPROC glad_debug_glBlendFunciARB
     * }
     */
    public static MemorySegment glad_debug_glBlendFunciARB$segment() {
        return glad_debug_glBlendFunciARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIARBPROC glad_debug_glBlendFunciARB
     * }
     */
    public static MemorySegment glad_debug_glBlendFunciARB() {
        return glad_debug_glBlendFunciARB$constants.SEGMENT.get(glad_debug_glBlendFunciARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLENDFUNCIARBPROC glad_debug_glBlendFunciARB
     * }
     */
    public static void glad_debug_glBlendFunciARB(MemorySegment varValue) {
        glad_debug_glBlendFunciARB$constants.SEGMENT.set(glad_debug_glBlendFunciARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlitFramebuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlitFramebuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer
     * }
     */
    public static AddressLayout glad_glBlitFramebuffer$layout() {
        return glad_glBlitFramebuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer
     * }
     */
    public static MemorySegment glad_glBlitFramebuffer$segment() {
        return glad_glBlitFramebuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer
     * }
     */
    public static MemorySegment glad_glBlitFramebuffer() {
        return glad_glBlitFramebuffer$constants.SEGMENT.get(glad_glBlitFramebuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer
     * }
     */
    public static void glad_glBlitFramebuffer(MemorySegment varValue) {
        glad_glBlitFramebuffer$constants.SEGMENT.set(glad_glBlitFramebuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlitFramebuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlitFramebuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer
     * }
     */
    public static AddressLayout glad_debug_glBlitFramebuffer$layout() {
        return glad_debug_glBlitFramebuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer
     * }
     */
    public static MemorySegment glad_debug_glBlitFramebuffer$segment() {
        return glad_debug_glBlitFramebuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer
     * }
     */
    public static MemorySegment glad_debug_glBlitFramebuffer() {
        return glad_debug_glBlitFramebuffer$constants.SEGMENT.get(glad_debug_glBlitFramebuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer
     * }
     */
    public static void glad_debug_glBlitFramebuffer(MemorySegment varValue) {
        glad_debug_glBlitFramebuffer$constants.SEGMENT.set(glad_debug_glBlitFramebuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlitFramebufferEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlitFramebufferEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFEREXTPROC glad_glBlitFramebufferEXT
     * }
     */
    public static AddressLayout glad_glBlitFramebufferEXT$layout() {
        return glad_glBlitFramebufferEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFEREXTPROC glad_glBlitFramebufferEXT
     * }
     */
    public static MemorySegment glad_glBlitFramebufferEXT$segment() {
        return glad_glBlitFramebufferEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFEREXTPROC glad_glBlitFramebufferEXT
     * }
     */
    public static MemorySegment glad_glBlitFramebufferEXT() {
        return glad_glBlitFramebufferEXT$constants.SEGMENT.get(glad_glBlitFramebufferEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFEREXTPROC glad_glBlitFramebufferEXT
     * }
     */
    public static void glad_glBlitFramebufferEXT(MemorySegment varValue) {
        glad_glBlitFramebufferEXT$constants.SEGMENT.set(glad_glBlitFramebufferEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlitFramebufferEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlitFramebufferEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFEREXTPROC glad_debug_glBlitFramebufferEXT
     * }
     */
    public static AddressLayout glad_debug_glBlitFramebufferEXT$layout() {
        return glad_debug_glBlitFramebufferEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFEREXTPROC glad_debug_glBlitFramebufferEXT
     * }
     */
    public static MemorySegment glad_debug_glBlitFramebufferEXT$segment() {
        return glad_debug_glBlitFramebufferEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFEREXTPROC glad_debug_glBlitFramebufferEXT
     * }
     */
    public static MemorySegment glad_debug_glBlitFramebufferEXT() {
        return glad_debug_glBlitFramebufferEXT$constants.SEGMENT.get(glad_debug_glBlitFramebufferEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITFRAMEBUFFEREXTPROC glad_debug_glBlitFramebufferEXT
     * }
     */
    public static void glad_debug_glBlitFramebufferEXT(MemorySegment varValue) {
        glad_debug_glBlitFramebufferEXT$constants.SEGMENT.set(glad_debug_glBlitFramebufferEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBlitNamedFramebuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBlitNamedFramebuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer
     * }
     */
    public static AddressLayout glad_glBlitNamedFramebuffer$layout() {
        return glad_glBlitNamedFramebuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer
     * }
     */
    public static MemorySegment glad_glBlitNamedFramebuffer$segment() {
        return glad_glBlitNamedFramebuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer
     * }
     */
    public static MemorySegment glad_glBlitNamedFramebuffer() {
        return glad_glBlitNamedFramebuffer$constants.SEGMENT.get(glad_glBlitNamedFramebuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer
     * }
     */
    public static void glad_glBlitNamedFramebuffer(MemorySegment varValue) {
        glad_glBlitNamedFramebuffer$constants.SEGMENT.set(glad_glBlitNamedFramebuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBlitNamedFramebuffer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBlitNamedFramebuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_debug_glBlitNamedFramebuffer
     * }
     */
    public static AddressLayout glad_debug_glBlitNamedFramebuffer$layout() {
        return glad_debug_glBlitNamedFramebuffer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_debug_glBlitNamedFramebuffer
     * }
     */
    public static MemorySegment glad_debug_glBlitNamedFramebuffer$segment() {
        return glad_debug_glBlitNamedFramebuffer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_debug_glBlitNamedFramebuffer
     * }
     */
    public static MemorySegment glad_debug_glBlitNamedFramebuffer() {
        return glad_debug_glBlitNamedFramebuffer$constants.SEGMENT.get(glad_debug_glBlitNamedFramebuffer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_debug_glBlitNamedFramebuffer
     * }
     */
    public static void glad_debug_glBlitNamedFramebuffer(MemorySegment varValue) {
        glad_debug_glBlitNamedFramebuffer$constants.SEGMENT.set(glad_debug_glBlitNamedFramebuffer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBufferData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBufferData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAPROC glad_glBufferData
     * }
     */
    public static AddressLayout glad_glBufferData$layout() {
        return glad_glBufferData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAPROC glad_glBufferData
     * }
     */
    public static MemorySegment glad_glBufferData$segment() {
        return glad_glBufferData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAPROC glad_glBufferData
     * }
     */
    public static MemorySegment glad_glBufferData() {
        return glad_glBufferData$constants.SEGMENT.get(glad_glBufferData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAPROC glad_glBufferData
     * }
     */
    public static void glad_glBufferData(MemorySegment varValue) {
        glad_glBufferData$constants.SEGMENT.set(glad_glBufferData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBufferData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBufferData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAPROC glad_debug_glBufferData
     * }
     */
    public static AddressLayout glad_debug_glBufferData$layout() {
        return glad_debug_glBufferData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAPROC glad_debug_glBufferData
     * }
     */
    public static MemorySegment glad_debug_glBufferData$segment() {
        return glad_debug_glBufferData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAPROC glad_debug_glBufferData
     * }
     */
    public static MemorySegment glad_debug_glBufferData() {
        return glad_debug_glBufferData$constants.SEGMENT.get(glad_debug_glBufferData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAPROC glad_debug_glBufferData
     * }
     */
    public static void glad_debug_glBufferData(MemorySegment varValue) {
        glad_debug_glBufferData$constants.SEGMENT.set(glad_debug_glBufferData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBufferDataARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBufferDataARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAARBPROC glad_glBufferDataARB
     * }
     */
    public static AddressLayout glad_glBufferDataARB$layout() {
        return glad_glBufferDataARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAARBPROC glad_glBufferDataARB
     * }
     */
    public static MemorySegment glad_glBufferDataARB$segment() {
        return glad_glBufferDataARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAARBPROC glad_glBufferDataARB
     * }
     */
    public static MemorySegment glad_glBufferDataARB() {
        return glad_glBufferDataARB$constants.SEGMENT.get(glad_glBufferDataARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAARBPROC glad_glBufferDataARB
     * }
     */
    public static void glad_glBufferDataARB(MemorySegment varValue) {
        glad_glBufferDataARB$constants.SEGMENT.set(glad_glBufferDataARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBufferDataARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBufferDataARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAARBPROC glad_debug_glBufferDataARB
     * }
     */
    public static AddressLayout glad_debug_glBufferDataARB$layout() {
        return glad_debug_glBufferDataARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAARBPROC glad_debug_glBufferDataARB
     * }
     */
    public static MemorySegment glad_debug_glBufferDataARB$segment() {
        return glad_debug_glBufferDataARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAARBPROC glad_debug_glBufferDataARB
     * }
     */
    public static MemorySegment glad_debug_glBufferDataARB() {
        return glad_debug_glBufferDataARB$constants.SEGMENT.get(glad_debug_glBufferDataARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERDATAARBPROC glad_debug_glBufferDataARB
     * }
     */
    public static void glad_debug_glBufferDataARB(MemorySegment varValue) {
        glad_debug_glBufferDataARB$constants.SEGMENT.set(glad_debug_glBufferDataARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBufferParameteriAPPLE$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBufferParameteriAPPLE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERPARAMETERIAPPLEPROC glad_glBufferParameteriAPPLE
     * }
     */
    public static AddressLayout glad_glBufferParameteriAPPLE$layout() {
        return glad_glBufferParameteriAPPLE$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERPARAMETERIAPPLEPROC glad_glBufferParameteriAPPLE
     * }
     */
    public static MemorySegment glad_glBufferParameteriAPPLE$segment() {
        return glad_glBufferParameteriAPPLE$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERPARAMETERIAPPLEPROC glad_glBufferParameteriAPPLE
     * }
     */
    public static MemorySegment glad_glBufferParameteriAPPLE() {
        return glad_glBufferParameteriAPPLE$constants.SEGMENT.get(glad_glBufferParameteriAPPLE$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERPARAMETERIAPPLEPROC glad_glBufferParameteriAPPLE
     * }
     */
    public static void glad_glBufferParameteriAPPLE(MemorySegment varValue) {
        glad_glBufferParameteriAPPLE$constants.SEGMENT.set(glad_glBufferParameteriAPPLE$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBufferParameteriAPPLE$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBufferParameteriAPPLE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERPARAMETERIAPPLEPROC glad_debug_glBufferParameteriAPPLE
     * }
     */
    public static AddressLayout glad_debug_glBufferParameteriAPPLE$layout() {
        return glad_debug_glBufferParameteriAPPLE$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERPARAMETERIAPPLEPROC glad_debug_glBufferParameteriAPPLE
     * }
     */
    public static MemorySegment glad_debug_glBufferParameteriAPPLE$segment() {
        return glad_debug_glBufferParameteriAPPLE$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERPARAMETERIAPPLEPROC glad_debug_glBufferParameteriAPPLE
     * }
     */
    public static MemorySegment glad_debug_glBufferParameteriAPPLE() {
        return glad_debug_glBufferParameteriAPPLE$constants.SEGMENT.get(glad_debug_glBufferParameteriAPPLE$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERPARAMETERIAPPLEPROC glad_debug_glBufferParameteriAPPLE
     * }
     */
    public static void glad_debug_glBufferParameteriAPPLE(MemorySegment varValue) {
        glad_debug_glBufferParameteriAPPLE$constants.SEGMENT.set(glad_debug_glBufferParameteriAPPLE$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBufferStorage$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBufferStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSTORAGEPROC glad_glBufferStorage
     * }
     */
    public static AddressLayout glad_glBufferStorage$layout() {
        return glad_glBufferStorage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSTORAGEPROC glad_glBufferStorage
     * }
     */
    public static MemorySegment glad_glBufferStorage$segment() {
        return glad_glBufferStorage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSTORAGEPROC glad_glBufferStorage
     * }
     */
    public static MemorySegment glad_glBufferStorage() {
        return glad_glBufferStorage$constants.SEGMENT.get(glad_glBufferStorage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSTORAGEPROC glad_glBufferStorage
     * }
     */
    public static void glad_glBufferStorage(MemorySegment varValue) {
        glad_glBufferStorage$constants.SEGMENT.set(glad_glBufferStorage$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBufferStorage$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBufferStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSTORAGEPROC glad_debug_glBufferStorage
     * }
     */
    public static AddressLayout glad_debug_glBufferStorage$layout() {
        return glad_debug_glBufferStorage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSTORAGEPROC glad_debug_glBufferStorage
     * }
     */
    public static MemorySegment glad_debug_glBufferStorage$segment() {
        return glad_debug_glBufferStorage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSTORAGEPROC glad_debug_glBufferStorage
     * }
     */
    public static MemorySegment glad_debug_glBufferStorage() {
        return glad_debug_glBufferStorage$constants.SEGMENT.get(glad_debug_glBufferStorage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSTORAGEPROC glad_debug_glBufferStorage
     * }
     */
    public static void glad_debug_glBufferStorage(MemorySegment varValue) {
        glad_debug_glBufferStorage$constants.SEGMENT.set(glad_debug_glBufferStorage$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAPROC glad_glBufferSubData
     * }
     */
    public static AddressLayout glad_glBufferSubData$layout() {
        return glad_glBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAPROC glad_glBufferSubData
     * }
     */
    public static MemorySegment glad_glBufferSubData$segment() {
        return glad_glBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAPROC glad_glBufferSubData
     * }
     */
    public static MemorySegment glad_glBufferSubData() {
        return glad_glBufferSubData$constants.SEGMENT.get(glad_glBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAPROC glad_glBufferSubData
     * }
     */
    public static void glad_glBufferSubData(MemorySegment varValue) {
        glad_glBufferSubData$constants.SEGMENT.set(glad_glBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData
     * }
     */
    public static AddressLayout glad_debug_glBufferSubData$layout() {
        return glad_debug_glBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glBufferSubData$segment() {
        return glad_debug_glBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glBufferSubData() {
        return glad_debug_glBufferSubData$constants.SEGMENT.get(glad_debug_glBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData
     * }
     */
    public static void glad_debug_glBufferSubData(MemorySegment varValue) {
        glad_debug_glBufferSubData$constants.SEGMENT.set(glad_debug_glBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glBufferSubDataARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glBufferSubDataARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB
     * }
     */
    public static AddressLayout glad_glBufferSubDataARB$layout() {
        return glad_glBufferSubDataARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB
     * }
     */
    public static MemorySegment glad_glBufferSubDataARB$segment() {
        return glad_glBufferSubDataARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB
     * }
     */
    public static MemorySegment glad_glBufferSubDataARB() {
        return glad_glBufferSubDataARB$constants.SEGMENT.get(glad_glBufferSubDataARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB
     * }
     */
    public static void glad_glBufferSubDataARB(MemorySegment varValue) {
        glad_glBufferSubDataARB$constants.SEGMENT.set(glad_glBufferSubDataARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glBufferSubDataARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glBufferSubDataARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAARBPROC glad_debug_glBufferSubDataARB
     * }
     */
    public static AddressLayout glad_debug_glBufferSubDataARB$layout() {
        return glad_debug_glBufferSubDataARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAARBPROC glad_debug_glBufferSubDataARB
     * }
     */
    public static MemorySegment glad_debug_glBufferSubDataARB$segment() {
        return glad_debug_glBufferSubDataARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAARBPROC glad_debug_glBufferSubDataARB
     * }
     */
    public static MemorySegment glad_debug_glBufferSubDataARB() {
        return glad_debug_glBufferSubDataARB$constants.SEGMENT.get(glad_debug_glBufferSubDataARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLBUFFERSUBDATAARBPROC glad_debug_glBufferSubDataARB
     * }
     */
    public static void glad_debug_glBufferSubDataARB(MemorySegment varValue) {
        glad_debug_glBufferSubDataARB$constants.SEGMENT.set(glad_debug_glBufferSubDataARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCallList$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCallList").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTPROC glad_glCallList
     * }
     */
    public static AddressLayout glad_glCallList$layout() {
        return glad_glCallList$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTPROC glad_glCallList
     * }
     */
    public static MemorySegment glad_glCallList$segment() {
        return glad_glCallList$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTPROC glad_glCallList
     * }
     */
    public static MemorySegment glad_glCallList() {
        return glad_glCallList$constants.SEGMENT.get(glad_glCallList$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTPROC glad_glCallList
     * }
     */
    public static void glad_glCallList(MemorySegment varValue) {
        glad_glCallList$constants.SEGMENT.set(glad_glCallList$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCallList$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCallList").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTPROC glad_debug_glCallList
     * }
     */
    public static AddressLayout glad_debug_glCallList$layout() {
        return glad_debug_glCallList$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTPROC glad_debug_glCallList
     * }
     */
    public static MemorySegment glad_debug_glCallList$segment() {
        return glad_debug_glCallList$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTPROC glad_debug_glCallList
     * }
     */
    public static MemorySegment glad_debug_glCallList() {
        return glad_debug_glCallList$constants.SEGMENT.get(glad_debug_glCallList$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTPROC glad_debug_glCallList
     * }
     */
    public static void glad_debug_glCallList(MemorySegment varValue) {
        glad_debug_glCallList$constants.SEGMENT.set(glad_debug_glCallList$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCallLists$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCallLists").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTSPROC glad_glCallLists
     * }
     */
    public static AddressLayout glad_glCallLists$layout() {
        return glad_glCallLists$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTSPROC glad_glCallLists
     * }
     */
    public static MemorySegment glad_glCallLists$segment() {
        return glad_glCallLists$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTSPROC glad_glCallLists
     * }
     */
    public static MemorySegment glad_glCallLists() {
        return glad_glCallLists$constants.SEGMENT.get(glad_glCallLists$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTSPROC glad_glCallLists
     * }
     */
    public static void glad_glCallLists(MemorySegment varValue) {
        glad_glCallLists$constants.SEGMENT.set(glad_glCallLists$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCallLists$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCallLists").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTSPROC glad_debug_glCallLists
     * }
     */
    public static AddressLayout glad_debug_glCallLists$layout() {
        return glad_debug_glCallLists$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTSPROC glad_debug_glCallLists
     * }
     */
    public static MemorySegment glad_debug_glCallLists$segment() {
        return glad_debug_glCallLists$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTSPROC glad_debug_glCallLists
     * }
     */
    public static MemorySegment glad_debug_glCallLists() {
        return glad_debug_glCallLists$constants.SEGMENT.get(glad_debug_glCallLists$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCALLLISTSPROC glad_debug_glCallLists
     * }
     */
    public static void glad_debug_glCallLists(MemorySegment varValue) {
        glad_debug_glCallLists$constants.SEGMENT.set(glad_debug_glCallLists$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCheckFramebufferStatus$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCheckFramebufferStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus
     * }
     */
    public static AddressLayout glad_glCheckFramebufferStatus$layout() {
        return glad_glCheckFramebufferStatus$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus
     * }
     */
    public static MemorySegment glad_glCheckFramebufferStatus$segment() {
        return glad_glCheckFramebufferStatus$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus
     * }
     */
    public static MemorySegment glad_glCheckFramebufferStatus() {
        return glad_glCheckFramebufferStatus$constants.SEGMENT.get(glad_glCheckFramebufferStatus$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus
     * }
     */
    public static void glad_glCheckFramebufferStatus(MemorySegment varValue) {
        glad_glCheckFramebufferStatus$constants.SEGMENT.set(glad_glCheckFramebufferStatus$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCheckFramebufferStatus$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCheckFramebufferStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus
     * }
     */
    public static AddressLayout glad_debug_glCheckFramebufferStatus$layout() {
        return glad_debug_glCheckFramebufferStatus$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus
     * }
     */
    public static MemorySegment glad_debug_glCheckFramebufferStatus$segment() {
        return glad_debug_glCheckFramebufferStatus$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus
     * }
     */
    public static MemorySegment glad_debug_glCheckFramebufferStatus() {
        return glad_debug_glCheckFramebufferStatus$constants.SEGMENT.get(glad_debug_glCheckFramebufferStatus$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus
     * }
     */
    public static void glad_debug_glCheckFramebufferStatus(MemorySegment varValue) {
        glad_debug_glCheckFramebufferStatus$constants.SEGMENT.set(glad_debug_glCheckFramebufferStatus$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCheckFramebufferStatusEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCheckFramebufferStatusEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_glCheckFramebufferStatusEXT
     * }
     */
    public static AddressLayout glad_glCheckFramebufferStatusEXT$layout() {
        return glad_glCheckFramebufferStatusEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_glCheckFramebufferStatusEXT
     * }
     */
    public static MemorySegment glad_glCheckFramebufferStatusEXT$segment() {
        return glad_glCheckFramebufferStatusEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_glCheckFramebufferStatusEXT
     * }
     */
    public static MemorySegment glad_glCheckFramebufferStatusEXT() {
        return glad_glCheckFramebufferStatusEXT$constants.SEGMENT.get(glad_glCheckFramebufferStatusEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_glCheckFramebufferStatusEXT
     * }
     */
    public static void glad_glCheckFramebufferStatusEXT(MemorySegment varValue) {
        glad_glCheckFramebufferStatusEXT$constants.SEGMENT.set(glad_glCheckFramebufferStatusEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCheckFramebufferStatusEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCheckFramebufferStatusEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckFramebufferStatusEXT
     * }
     */
    public static AddressLayout glad_debug_glCheckFramebufferStatusEXT$layout() {
        return glad_debug_glCheckFramebufferStatusEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckFramebufferStatusEXT
     * }
     */
    public static MemorySegment glad_debug_glCheckFramebufferStatusEXT$segment() {
        return glad_debug_glCheckFramebufferStatusEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckFramebufferStatusEXT
     * }
     */
    public static MemorySegment glad_debug_glCheckFramebufferStatusEXT() {
        return glad_debug_glCheckFramebufferStatusEXT$constants.SEGMENT.get(glad_debug_glCheckFramebufferStatusEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckFramebufferStatusEXT
     * }
     */
    public static void glad_debug_glCheckFramebufferStatusEXT(MemorySegment varValue) {
        glad_debug_glCheckFramebufferStatusEXT$constants.SEGMENT.set(glad_debug_glCheckFramebufferStatusEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCheckNamedFramebufferStatus$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCheckNamedFramebufferStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus
     * }
     */
    public static AddressLayout glad_glCheckNamedFramebufferStatus$layout() {
        return glad_glCheckNamedFramebufferStatus$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus
     * }
     */
    public static MemorySegment glad_glCheckNamedFramebufferStatus$segment() {
        return glad_glCheckNamedFramebufferStatus$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus
     * }
     */
    public static MemorySegment glad_glCheckNamedFramebufferStatus() {
        return glad_glCheckNamedFramebufferStatus$constants.SEGMENT.get(glad_glCheckNamedFramebufferStatus$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus
     * }
     */
    public static void glad_glCheckNamedFramebufferStatus(MemorySegment varValue) {
        glad_glCheckNamedFramebufferStatus$constants.SEGMENT.set(glad_glCheckNamedFramebufferStatus$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCheckNamedFramebufferStatus$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCheckNamedFramebufferStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_debug_glCheckNamedFramebufferStatus
     * }
     */
    public static AddressLayout glad_debug_glCheckNamedFramebufferStatus$layout() {
        return glad_debug_glCheckNamedFramebufferStatus$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_debug_glCheckNamedFramebufferStatus
     * }
     */
    public static MemorySegment glad_debug_glCheckNamedFramebufferStatus$segment() {
        return glad_debug_glCheckNamedFramebufferStatus$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_debug_glCheckNamedFramebufferStatus
     * }
     */
    public static MemorySegment glad_debug_glCheckNamedFramebufferStatus() {
        return glad_debug_glCheckNamedFramebufferStatus$constants.SEGMENT.get(glad_debug_glCheckNamedFramebufferStatus$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_debug_glCheckNamedFramebufferStatus
     * }
     */
    public static void glad_debug_glCheckNamedFramebufferStatus(MemorySegment varValue) {
        glad_debug_glCheckNamedFramebufferStatus$constants.SEGMENT.set(glad_debug_glCheckNamedFramebufferStatus$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCheckNamedFramebufferStatusEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCheckNamedFramebufferStatusEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_glCheckNamedFramebufferStatusEXT
     * }
     */
    public static AddressLayout glad_glCheckNamedFramebufferStatusEXT$layout() {
        return glad_glCheckNamedFramebufferStatusEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_glCheckNamedFramebufferStatusEXT
     * }
     */
    public static MemorySegment glad_glCheckNamedFramebufferStatusEXT$segment() {
        return glad_glCheckNamedFramebufferStatusEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_glCheckNamedFramebufferStatusEXT
     * }
     */
    public static MemorySegment glad_glCheckNamedFramebufferStatusEXT() {
        return glad_glCheckNamedFramebufferStatusEXT$constants.SEGMENT.get(glad_glCheckNamedFramebufferStatusEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_glCheckNamedFramebufferStatusEXT
     * }
     */
    public static void glad_glCheckNamedFramebufferStatusEXT(MemorySegment varValue) {
        glad_glCheckNamedFramebufferStatusEXT$constants.SEGMENT.set(glad_glCheckNamedFramebufferStatusEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCheckNamedFramebufferStatusEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCheckNamedFramebufferStatusEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckNamedFramebufferStatusEXT
     * }
     */
    public static AddressLayout glad_debug_glCheckNamedFramebufferStatusEXT$layout() {
        return glad_debug_glCheckNamedFramebufferStatusEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckNamedFramebufferStatusEXT
     * }
     */
    public static MemorySegment glad_debug_glCheckNamedFramebufferStatusEXT$segment() {
        return glad_debug_glCheckNamedFramebufferStatusEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckNamedFramebufferStatusEXT
     * }
     */
    public static MemorySegment glad_debug_glCheckNamedFramebufferStatusEXT() {
        return glad_debug_glCheckNamedFramebufferStatusEXT$constants.SEGMENT.get(glad_debug_glCheckNamedFramebufferStatusEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckNamedFramebufferStatusEXT
     * }
     */
    public static void glad_debug_glCheckNamedFramebufferStatusEXT(MemorySegment varValue) {
        glad_debug_glCheckNamedFramebufferStatusEXT$constants.SEGMENT.set(glad_debug_glCheckNamedFramebufferStatusEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClampColor$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClampColor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORPROC glad_glClampColor
     * }
     */
    public static AddressLayout glad_glClampColor$layout() {
        return glad_glClampColor$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORPROC glad_glClampColor
     * }
     */
    public static MemorySegment glad_glClampColor$segment() {
        return glad_glClampColor$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORPROC glad_glClampColor
     * }
     */
    public static MemorySegment glad_glClampColor() {
        return glad_glClampColor$constants.SEGMENT.get(glad_glClampColor$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORPROC glad_glClampColor
     * }
     */
    public static void glad_glClampColor(MemorySegment varValue) {
        glad_glClampColor$constants.SEGMENT.set(glad_glClampColor$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClampColor$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClampColor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORPROC glad_debug_glClampColor
     * }
     */
    public static AddressLayout glad_debug_glClampColor$layout() {
        return glad_debug_glClampColor$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORPROC glad_debug_glClampColor
     * }
     */
    public static MemorySegment glad_debug_glClampColor$segment() {
        return glad_debug_glClampColor$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORPROC glad_debug_glClampColor
     * }
     */
    public static MemorySegment glad_debug_glClampColor() {
        return glad_debug_glClampColor$constants.SEGMENT.get(glad_debug_glClampColor$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORPROC glad_debug_glClampColor
     * }
     */
    public static void glad_debug_glClampColor(MemorySegment varValue) {
        glad_debug_glClampColor$constants.SEGMENT.set(glad_debug_glClampColor$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClampColorARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClampColorARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORARBPROC glad_glClampColorARB
     * }
     */
    public static AddressLayout glad_glClampColorARB$layout() {
        return glad_glClampColorARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORARBPROC glad_glClampColorARB
     * }
     */
    public static MemorySegment glad_glClampColorARB$segment() {
        return glad_glClampColorARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORARBPROC glad_glClampColorARB
     * }
     */
    public static MemorySegment glad_glClampColorARB() {
        return glad_glClampColorARB$constants.SEGMENT.get(glad_glClampColorARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORARBPROC glad_glClampColorARB
     * }
     */
    public static void glad_glClampColorARB(MemorySegment varValue) {
        glad_glClampColorARB$constants.SEGMENT.set(glad_glClampColorARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClampColorARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClampColorARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORARBPROC glad_debug_glClampColorARB
     * }
     */
    public static AddressLayout glad_debug_glClampColorARB$layout() {
        return glad_debug_glClampColorARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORARBPROC glad_debug_glClampColorARB
     * }
     */
    public static MemorySegment glad_debug_glClampColorARB$segment() {
        return glad_debug_glClampColorARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORARBPROC glad_debug_glClampColorARB
     * }
     */
    public static MemorySegment glad_debug_glClampColorARB() {
        return glad_debug_glClampColorARB$constants.SEGMENT.get(glad_debug_glClampColorARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLAMPCOLORARBPROC glad_debug_glClampColorARB
     * }
     */
    public static void glad_debug_glClampColorARB(MemorySegment varValue) {
        glad_debug_glClampColorARB$constants.SEGMENT.set(glad_debug_glClampColorARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClear$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClear").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARPROC glad_glClear
     * }
     */
    public static AddressLayout glad_glClear$layout() {
        return glad_glClear$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARPROC glad_glClear
     * }
     */
    public static MemorySegment glad_glClear$segment() {
        return glad_glClear$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARPROC glad_glClear
     * }
     */
    public static MemorySegment glad_glClear() {
        return glad_glClear$constants.SEGMENT.get(glad_glClear$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARPROC glad_glClear
     * }
     */
    public static void glad_glClear(MemorySegment varValue) {
        glad_glClear$constants.SEGMENT.set(glad_glClear$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClear$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClear").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARPROC glad_debug_glClear
     * }
     */
    public static AddressLayout glad_debug_glClear$layout() {
        return glad_debug_glClear$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARPROC glad_debug_glClear
     * }
     */
    public static MemorySegment glad_debug_glClear$segment() {
        return glad_debug_glClear$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARPROC glad_debug_glClear
     * }
     */
    public static MemorySegment glad_debug_glClear() {
        return glad_debug_glClear$constants.SEGMENT.get(glad_debug_glClear$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARPROC glad_debug_glClear
     * }
     */
    public static void glad_debug_glClear(MemorySegment varValue) {
        glad_debug_glClear$constants.SEGMENT.set(glad_debug_glClear$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearAccum$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearAccum").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARACCUMPROC glad_glClearAccum
     * }
     */
    public static AddressLayout glad_glClearAccum$layout() {
        return glad_glClearAccum$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARACCUMPROC glad_glClearAccum
     * }
     */
    public static MemorySegment glad_glClearAccum$segment() {
        return glad_glClearAccum$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARACCUMPROC glad_glClearAccum
     * }
     */
    public static MemorySegment glad_glClearAccum() {
        return glad_glClearAccum$constants.SEGMENT.get(glad_glClearAccum$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARACCUMPROC glad_glClearAccum
     * }
     */
    public static void glad_glClearAccum(MemorySegment varValue) {
        glad_glClearAccum$constants.SEGMENT.set(glad_glClearAccum$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearAccum$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearAccum").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARACCUMPROC glad_debug_glClearAccum
     * }
     */
    public static AddressLayout glad_debug_glClearAccum$layout() {
        return glad_debug_glClearAccum$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARACCUMPROC glad_debug_glClearAccum
     * }
     */
    public static MemorySegment glad_debug_glClearAccum$segment() {
        return glad_debug_glClearAccum$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARACCUMPROC glad_debug_glClearAccum
     * }
     */
    public static MemorySegment glad_debug_glClearAccum() {
        return glad_debug_glClearAccum$constants.SEGMENT.get(glad_debug_glClearAccum$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARACCUMPROC glad_debug_glClearAccum
     * }
     */
    public static void glad_debug_glClearAccum(MemorySegment varValue) {
        glad_debug_glClearAccum$constants.SEGMENT.set(glad_debug_glClearAccum$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearBufferData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearBufferData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData
     * }
     */
    public static AddressLayout glad_glClearBufferData$layout() {
        return glad_glClearBufferData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData
     * }
     */
    public static MemorySegment glad_glClearBufferData$segment() {
        return glad_glClearBufferData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData
     * }
     */
    public static MemorySegment glad_glClearBufferData() {
        return glad_glClearBufferData$constants.SEGMENT.get(glad_glClearBufferData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData
     * }
     */
    public static void glad_glClearBufferData(MemorySegment varValue) {
        glad_glClearBufferData$constants.SEGMENT.set(glad_glClearBufferData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearBufferData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearBufferData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERDATAPROC glad_debug_glClearBufferData
     * }
     */
    public static AddressLayout glad_debug_glClearBufferData$layout() {
        return glad_debug_glClearBufferData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERDATAPROC glad_debug_glClearBufferData
     * }
     */
    public static MemorySegment glad_debug_glClearBufferData$segment() {
        return glad_debug_glClearBufferData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERDATAPROC glad_debug_glClearBufferData
     * }
     */
    public static MemorySegment glad_debug_glClearBufferData() {
        return glad_debug_glClearBufferData$constants.SEGMENT.get(glad_debug_glClearBufferData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERDATAPROC glad_debug_glClearBufferData
     * }
     */
    public static void glad_debug_glClearBufferData(MemorySegment varValue) {
        glad_debug_glClearBufferData$constants.SEGMENT.set(glad_debug_glClearBufferData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData
     * }
     */
    public static AddressLayout glad_glClearBufferSubData$layout() {
        return glad_glClearBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData
     * }
     */
    public static MemorySegment glad_glClearBufferSubData$segment() {
        return glad_glClearBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData
     * }
     */
    public static MemorySegment glad_glClearBufferSubData() {
        return glad_glClearBufferSubData$constants.SEGMENT.get(glad_glClearBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData
     * }
     */
    public static void glad_glClearBufferSubData(MemorySegment varValue) {
        glad_glClearBufferSubData$constants.SEGMENT.set(glad_glClearBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERSUBDATAPROC glad_debug_glClearBufferSubData
     * }
     */
    public static AddressLayout glad_debug_glClearBufferSubData$layout() {
        return glad_debug_glClearBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERSUBDATAPROC glad_debug_glClearBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glClearBufferSubData$segment() {
        return glad_debug_glClearBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERSUBDATAPROC glad_debug_glClearBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glClearBufferSubData() {
        return glad_debug_glClearBufferSubData$constants.SEGMENT.get(glad_debug_glClearBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERSUBDATAPROC glad_debug_glClearBufferSubData
     * }
     */
    public static void glad_debug_glClearBufferSubData(MemorySegment varValue) {
        glad_debug_glClearBufferSubData$constants.SEGMENT.set(glad_debug_glClearBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearBufferfi$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearBufferfi").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi
     * }
     */
    public static AddressLayout glad_glClearBufferfi$layout() {
        return glad_glClearBufferfi$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi
     * }
     */
    public static MemorySegment glad_glClearBufferfi$segment() {
        return glad_glClearBufferfi$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi
     * }
     */
    public static MemorySegment glad_glClearBufferfi() {
        return glad_glClearBufferfi$constants.SEGMENT.get(glad_glClearBufferfi$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi
     * }
     */
    public static void glad_glClearBufferfi(MemorySegment varValue) {
        glad_glClearBufferfi$constants.SEGMENT.set(glad_glClearBufferfi$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearBufferfi$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearBufferfi").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi
     * }
     */
    public static AddressLayout glad_debug_glClearBufferfi$layout() {
        return glad_debug_glClearBufferfi$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi
     * }
     */
    public static MemorySegment glad_debug_glClearBufferfi$segment() {
        return glad_debug_glClearBufferfi$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi
     * }
     */
    public static MemorySegment glad_debug_glClearBufferfi() {
        return glad_debug_glClearBufferfi$constants.SEGMENT.get(glad_debug_glClearBufferfi$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi
     * }
     */
    public static void glad_debug_glClearBufferfi(MemorySegment varValue) {
        glad_debug_glClearBufferfi$constants.SEGMENT.set(glad_debug_glClearBufferfi$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearBufferfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearBufferfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv
     * }
     */
    public static AddressLayout glad_glClearBufferfv$layout() {
        return glad_glClearBufferfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv
     * }
     */
    public static MemorySegment glad_glClearBufferfv$segment() {
        return glad_glClearBufferfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv
     * }
     */
    public static MemorySegment glad_glClearBufferfv() {
        return glad_glClearBufferfv$constants.SEGMENT.get(glad_glClearBufferfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv
     * }
     */
    public static void glad_glClearBufferfv(MemorySegment varValue) {
        glad_glClearBufferfv$constants.SEGMENT.set(glad_glClearBufferfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearBufferfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearBufferfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv
     * }
     */
    public static AddressLayout glad_debug_glClearBufferfv$layout() {
        return glad_debug_glClearBufferfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv
     * }
     */
    public static MemorySegment glad_debug_glClearBufferfv$segment() {
        return glad_debug_glClearBufferfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv
     * }
     */
    public static MemorySegment glad_debug_glClearBufferfv() {
        return glad_debug_glClearBufferfv$constants.SEGMENT.get(glad_debug_glClearBufferfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv
     * }
     */
    public static void glad_debug_glClearBufferfv(MemorySegment varValue) {
        glad_debug_glClearBufferfv$constants.SEGMENT.set(glad_debug_glClearBufferfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearBufferiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearBufferiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv
     * }
     */
    public static AddressLayout glad_glClearBufferiv$layout() {
        return glad_glClearBufferiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv
     * }
     */
    public static MemorySegment glad_glClearBufferiv$segment() {
        return glad_glClearBufferiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv
     * }
     */
    public static MemorySegment glad_glClearBufferiv() {
        return glad_glClearBufferiv$constants.SEGMENT.get(glad_glClearBufferiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv
     * }
     */
    public static void glad_glClearBufferiv(MemorySegment varValue) {
        glad_glClearBufferiv$constants.SEGMENT.set(glad_glClearBufferiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearBufferiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearBufferiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv
     * }
     */
    public static AddressLayout glad_debug_glClearBufferiv$layout() {
        return glad_debug_glClearBufferiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv
     * }
     */
    public static MemorySegment glad_debug_glClearBufferiv$segment() {
        return glad_debug_glClearBufferiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv
     * }
     */
    public static MemorySegment glad_debug_glClearBufferiv() {
        return glad_debug_glClearBufferiv$constants.SEGMENT.get(glad_debug_glClearBufferiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv
     * }
     */
    public static void glad_debug_glClearBufferiv(MemorySegment varValue) {
        glad_debug_glClearBufferiv$constants.SEGMENT.set(glad_debug_glClearBufferiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearBufferuiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearBufferuiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv
     * }
     */
    public static AddressLayout glad_glClearBufferuiv$layout() {
        return glad_glClearBufferuiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv
     * }
     */
    public static MemorySegment glad_glClearBufferuiv$segment() {
        return glad_glClearBufferuiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv
     * }
     */
    public static MemorySegment glad_glClearBufferuiv() {
        return glad_glClearBufferuiv$constants.SEGMENT.get(glad_glClearBufferuiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv
     * }
     */
    public static void glad_glClearBufferuiv(MemorySegment varValue) {
        glad_glClearBufferuiv$constants.SEGMENT.set(glad_glClearBufferuiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearBufferuiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearBufferuiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv
     * }
     */
    public static AddressLayout glad_debug_glClearBufferuiv$layout() {
        return glad_debug_glClearBufferuiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv
     * }
     */
    public static MemorySegment glad_debug_glClearBufferuiv$segment() {
        return glad_debug_glClearBufferuiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv
     * }
     */
    public static MemorySegment glad_debug_glClearBufferuiv() {
        return glad_debug_glClearBufferuiv$constants.SEGMENT.get(glad_debug_glClearBufferuiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv
     * }
     */
    public static void glad_debug_glClearBufferuiv(MemorySegment varValue) {
        glad_debug_glClearBufferuiv$constants.SEGMENT.set(glad_debug_glClearBufferuiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearColor$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearColor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORPROC glad_glClearColor
     * }
     */
    public static AddressLayout glad_glClearColor$layout() {
        return glad_glClearColor$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORPROC glad_glClearColor
     * }
     */
    public static MemorySegment glad_glClearColor$segment() {
        return glad_glClearColor$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORPROC glad_glClearColor
     * }
     */
    public static MemorySegment glad_glClearColor() {
        return glad_glClearColor$constants.SEGMENT.get(glad_glClearColor$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORPROC glad_glClearColor
     * }
     */
    public static void glad_glClearColor(MemorySegment varValue) {
        glad_glClearColor$constants.SEGMENT.set(glad_glClearColor$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearColor$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearColor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORPROC glad_debug_glClearColor
     * }
     */
    public static AddressLayout glad_debug_glClearColor$layout() {
        return glad_debug_glClearColor$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORPROC glad_debug_glClearColor
     * }
     */
    public static MemorySegment glad_debug_glClearColor$segment() {
        return glad_debug_glClearColor$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORPROC glad_debug_glClearColor
     * }
     */
    public static MemorySegment glad_debug_glClearColor() {
        return glad_debug_glClearColor$constants.SEGMENT.get(glad_debug_glClearColor$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORPROC glad_debug_glClearColor
     * }
     */
    public static void glad_debug_glClearColor(MemorySegment varValue) {
        glad_debug_glClearColor$constants.SEGMENT.set(glad_debug_glClearColor$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearColorIiEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearColorIiEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIIEXTPROC glad_glClearColorIiEXT
     * }
     */
    public static AddressLayout glad_glClearColorIiEXT$layout() {
        return glad_glClearColorIiEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIIEXTPROC glad_glClearColorIiEXT
     * }
     */
    public static MemorySegment glad_glClearColorIiEXT$segment() {
        return glad_glClearColorIiEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIIEXTPROC glad_glClearColorIiEXT
     * }
     */
    public static MemorySegment glad_glClearColorIiEXT() {
        return glad_glClearColorIiEXT$constants.SEGMENT.get(glad_glClearColorIiEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIIEXTPROC glad_glClearColorIiEXT
     * }
     */
    public static void glad_glClearColorIiEXT(MemorySegment varValue) {
        glad_glClearColorIiEXT$constants.SEGMENT.set(glad_glClearColorIiEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearColorIiEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearColorIiEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIIEXTPROC glad_debug_glClearColorIiEXT
     * }
     */
    public static AddressLayout glad_debug_glClearColorIiEXT$layout() {
        return glad_debug_glClearColorIiEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIIEXTPROC glad_debug_glClearColorIiEXT
     * }
     */
    public static MemorySegment glad_debug_glClearColorIiEXT$segment() {
        return glad_debug_glClearColorIiEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIIEXTPROC glad_debug_glClearColorIiEXT
     * }
     */
    public static MemorySegment glad_debug_glClearColorIiEXT() {
        return glad_debug_glClearColorIiEXT$constants.SEGMENT.get(glad_debug_glClearColorIiEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIIEXTPROC glad_debug_glClearColorIiEXT
     * }
     */
    public static void glad_debug_glClearColorIiEXT(MemorySegment varValue) {
        glad_debug_glClearColorIiEXT$constants.SEGMENT.set(glad_debug_glClearColorIiEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearColorIuiEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearColorIuiEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIUIEXTPROC glad_glClearColorIuiEXT
     * }
     */
    public static AddressLayout glad_glClearColorIuiEXT$layout() {
        return glad_glClearColorIuiEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIUIEXTPROC glad_glClearColorIuiEXT
     * }
     */
    public static MemorySegment glad_glClearColorIuiEXT$segment() {
        return glad_glClearColorIuiEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIUIEXTPROC glad_glClearColorIuiEXT
     * }
     */
    public static MemorySegment glad_glClearColorIuiEXT() {
        return glad_glClearColorIuiEXT$constants.SEGMENT.get(glad_glClearColorIuiEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIUIEXTPROC glad_glClearColorIuiEXT
     * }
     */
    public static void glad_glClearColorIuiEXT(MemorySegment varValue) {
        glad_glClearColorIuiEXT$constants.SEGMENT.set(glad_glClearColorIuiEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearColorIuiEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearColorIuiEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIUIEXTPROC glad_debug_glClearColorIuiEXT
     * }
     */
    public static AddressLayout glad_debug_glClearColorIuiEXT$layout() {
        return glad_debug_glClearColorIuiEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIUIEXTPROC glad_debug_glClearColorIuiEXT
     * }
     */
    public static MemorySegment glad_debug_glClearColorIuiEXT$segment() {
        return glad_debug_glClearColorIuiEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIUIEXTPROC glad_debug_glClearColorIuiEXT
     * }
     */
    public static MemorySegment glad_debug_glClearColorIuiEXT() {
        return glad_debug_glClearColorIuiEXT$constants.SEGMENT.get(glad_debug_glClearColorIuiEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARCOLORIUIEXTPROC glad_debug_glClearColorIuiEXT
     * }
     */
    public static void glad_debug_glClearColorIuiEXT(MemorySegment varValue) {
        glad_debug_glClearColorIuiEXT$constants.SEGMENT.set(glad_debug_glClearColorIuiEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearDepth$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearDepth").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHPROC glad_glClearDepth
     * }
     */
    public static AddressLayout glad_glClearDepth$layout() {
        return glad_glClearDepth$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHPROC glad_glClearDepth
     * }
     */
    public static MemorySegment glad_glClearDepth$segment() {
        return glad_glClearDepth$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHPROC glad_glClearDepth
     * }
     */
    public static MemorySegment glad_glClearDepth() {
        return glad_glClearDepth$constants.SEGMENT.get(glad_glClearDepth$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHPROC glad_glClearDepth
     * }
     */
    public static void glad_glClearDepth(MemorySegment varValue) {
        glad_glClearDepth$constants.SEGMENT.set(glad_glClearDepth$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearDepth$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearDepth").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHPROC glad_debug_glClearDepth
     * }
     */
    public static AddressLayout glad_debug_glClearDepth$layout() {
        return glad_debug_glClearDepth$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHPROC glad_debug_glClearDepth
     * }
     */
    public static MemorySegment glad_debug_glClearDepth$segment() {
        return glad_debug_glClearDepth$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHPROC glad_debug_glClearDepth
     * }
     */
    public static MemorySegment glad_debug_glClearDepth() {
        return glad_debug_glClearDepth$constants.SEGMENT.get(glad_debug_glClearDepth$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHPROC glad_debug_glClearDepth
     * }
     */
    public static void glad_debug_glClearDepth(MemorySegment varValue) {
        glad_debug_glClearDepth$constants.SEGMENT.set(glad_debug_glClearDepth$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearDepthf$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearDepthf").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFPROC glad_glClearDepthf
     * }
     */
    public static AddressLayout glad_glClearDepthf$layout() {
        return glad_glClearDepthf$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFPROC glad_glClearDepthf
     * }
     */
    public static MemorySegment glad_glClearDepthf$segment() {
        return glad_glClearDepthf$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFPROC glad_glClearDepthf
     * }
     */
    public static MemorySegment glad_glClearDepthf() {
        return glad_glClearDepthf$constants.SEGMENT.get(glad_glClearDepthf$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFPROC glad_glClearDepthf
     * }
     */
    public static void glad_glClearDepthf(MemorySegment varValue) {
        glad_glClearDepthf$constants.SEGMENT.set(glad_glClearDepthf$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearDepthf$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearDepthf").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf
     * }
     */
    public static AddressLayout glad_debug_glClearDepthf$layout() {
        return glad_debug_glClearDepthf$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf
     * }
     */
    public static MemorySegment glad_debug_glClearDepthf$segment() {
        return glad_debug_glClearDepthf$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf
     * }
     */
    public static MemorySegment glad_debug_glClearDepthf() {
        return glad_debug_glClearDepthf$constants.SEGMENT.get(glad_debug_glClearDepthf$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf
     * }
     */
    public static void glad_debug_glClearDepthf(MemorySegment varValue) {
        glad_debug_glClearDepthf$constants.SEGMENT.set(glad_debug_glClearDepthf$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearDepthfOES$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearDepthfOES").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFOESPROC glad_glClearDepthfOES
     * }
     */
    public static AddressLayout glad_glClearDepthfOES$layout() {
        return glad_glClearDepthfOES$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFOESPROC glad_glClearDepthfOES
     * }
     */
    public static MemorySegment glad_glClearDepthfOES$segment() {
        return glad_glClearDepthfOES$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFOESPROC glad_glClearDepthfOES
     * }
     */
    public static MemorySegment glad_glClearDepthfOES() {
        return glad_glClearDepthfOES$constants.SEGMENT.get(glad_glClearDepthfOES$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFOESPROC glad_glClearDepthfOES
     * }
     */
    public static void glad_glClearDepthfOES(MemorySegment varValue) {
        glad_glClearDepthfOES$constants.SEGMENT.set(glad_glClearDepthfOES$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearDepthfOES$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearDepthfOES").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFOESPROC glad_debug_glClearDepthfOES
     * }
     */
    public static AddressLayout glad_debug_glClearDepthfOES$layout() {
        return glad_debug_glClearDepthfOES$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFOESPROC glad_debug_glClearDepthfOES
     * }
     */
    public static MemorySegment glad_debug_glClearDepthfOES$segment() {
        return glad_debug_glClearDepthfOES$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFOESPROC glad_debug_glClearDepthfOES
     * }
     */
    public static MemorySegment glad_debug_glClearDepthfOES() {
        return glad_debug_glClearDepthfOES$constants.SEGMENT.get(glad_debug_glClearDepthfOES$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARDEPTHFOESPROC glad_debug_glClearDepthfOES
     * }
     */
    public static void glad_debug_glClearDepthfOES(MemorySegment varValue) {
        glad_debug_glClearDepthfOES$constants.SEGMENT.set(glad_debug_glClearDepthfOES$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearIndex$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearIndex").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARINDEXPROC glad_glClearIndex
     * }
     */
    public static AddressLayout glad_glClearIndex$layout() {
        return glad_glClearIndex$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARINDEXPROC glad_glClearIndex
     * }
     */
    public static MemorySegment glad_glClearIndex$segment() {
        return glad_glClearIndex$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARINDEXPROC glad_glClearIndex
     * }
     */
    public static MemorySegment glad_glClearIndex() {
        return glad_glClearIndex$constants.SEGMENT.get(glad_glClearIndex$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARINDEXPROC glad_glClearIndex
     * }
     */
    public static void glad_glClearIndex(MemorySegment varValue) {
        glad_glClearIndex$constants.SEGMENT.set(glad_glClearIndex$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearIndex$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearIndex").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARINDEXPROC glad_debug_glClearIndex
     * }
     */
    public static AddressLayout glad_debug_glClearIndex$layout() {
        return glad_debug_glClearIndex$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARINDEXPROC glad_debug_glClearIndex
     * }
     */
    public static MemorySegment glad_debug_glClearIndex$segment() {
        return glad_debug_glClearIndex$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARINDEXPROC glad_debug_glClearIndex
     * }
     */
    public static MemorySegment glad_debug_glClearIndex() {
        return glad_debug_glClearIndex$constants.SEGMENT.get(glad_debug_glClearIndex$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARINDEXPROC glad_debug_glClearIndex
     * }
     */
    public static void glad_debug_glClearIndex(MemorySegment varValue) {
        glad_debug_glClearIndex$constants.SEGMENT.set(glad_debug_glClearIndex$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearNamedBufferData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearNamedBufferData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData
     * }
     */
    public static AddressLayout glad_glClearNamedBufferData$layout() {
        return glad_glClearNamedBufferData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData
     * }
     */
    public static MemorySegment glad_glClearNamedBufferData$segment() {
        return glad_glClearNamedBufferData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData
     * }
     */
    public static MemorySegment glad_glClearNamedBufferData() {
        return glad_glClearNamedBufferData$constants.SEGMENT.get(glad_glClearNamedBufferData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData
     * }
     */
    public static void glad_glClearNamedBufferData(MemorySegment varValue) {
        glad_glClearNamedBufferData$constants.SEGMENT.set(glad_glClearNamedBufferData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearNamedBufferData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearNamedBufferData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_debug_glClearNamedBufferData
     * }
     */
    public static AddressLayout glad_debug_glClearNamedBufferData$layout() {
        return glad_debug_glClearNamedBufferData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_debug_glClearNamedBufferData
     * }
     */
    public static MemorySegment glad_debug_glClearNamedBufferData$segment() {
        return glad_debug_glClearNamedBufferData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_debug_glClearNamedBufferData
     * }
     */
    public static MemorySegment glad_debug_glClearNamedBufferData() {
        return glad_debug_glClearNamedBufferData$constants.SEGMENT.get(glad_debug_glClearNamedBufferData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_debug_glClearNamedBufferData
     * }
     */
    public static void glad_debug_glClearNamedBufferData(MemorySegment varValue) {
        glad_debug_glClearNamedBufferData$constants.SEGMENT.set(glad_debug_glClearNamedBufferData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearNamedBufferDataEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearNamedBufferDataEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_glClearNamedBufferDataEXT
     * }
     */
    public static AddressLayout glad_glClearNamedBufferDataEXT$layout() {
        return glad_glClearNamedBufferDataEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_glClearNamedBufferDataEXT
     * }
     */
    public static MemorySegment glad_glClearNamedBufferDataEXT$segment() {
        return glad_glClearNamedBufferDataEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_glClearNamedBufferDataEXT
     * }
     */
    public static MemorySegment glad_glClearNamedBufferDataEXT() {
        return glad_glClearNamedBufferDataEXT$constants.SEGMENT.get(glad_glClearNamedBufferDataEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_glClearNamedBufferDataEXT
     * }
     */
    public static void glad_glClearNamedBufferDataEXT(MemorySegment varValue) {
        glad_glClearNamedBufferDataEXT$constants.SEGMENT.set(glad_glClearNamedBufferDataEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearNamedBufferDataEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearNamedBufferDataEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_debug_glClearNamedBufferDataEXT
     * }
     */
    public static AddressLayout glad_debug_glClearNamedBufferDataEXT$layout() {
        return glad_debug_glClearNamedBufferDataEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_debug_glClearNamedBufferDataEXT
     * }
     */
    public static MemorySegment glad_debug_glClearNamedBufferDataEXT$segment() {
        return glad_debug_glClearNamedBufferDataEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_debug_glClearNamedBufferDataEXT
     * }
     */
    public static MemorySegment glad_debug_glClearNamedBufferDataEXT() {
        return glad_debug_glClearNamedBufferDataEXT$constants.SEGMENT.get(glad_debug_glClearNamedBufferDataEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_debug_glClearNamedBufferDataEXT
     * }
     */
    public static void glad_debug_glClearNamedBufferDataEXT(MemorySegment varValue) {
        glad_debug_glClearNamedBufferDataEXT$constants.SEGMENT.set(glad_debug_glClearNamedBufferDataEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearNamedBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearNamedBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData
     * }
     */
    public static AddressLayout glad_glClearNamedBufferSubData$layout() {
        return glad_glClearNamedBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData
     * }
     */
    public static MemorySegment glad_glClearNamedBufferSubData$segment() {
        return glad_glClearNamedBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData
     * }
     */
    public static MemorySegment glad_glClearNamedBufferSubData() {
        return glad_glClearNamedBufferSubData$constants.SEGMENT.get(glad_glClearNamedBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData
     * }
     */
    public static void glad_glClearNamedBufferSubData(MemorySegment varValue) {
        glad_glClearNamedBufferSubData$constants.SEGMENT.set(glad_glClearNamedBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearNamedBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearNamedBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_debug_glClearNamedBufferSubData
     * }
     */
    public static AddressLayout glad_debug_glClearNamedBufferSubData$layout() {
        return glad_debug_glClearNamedBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_debug_glClearNamedBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glClearNamedBufferSubData$segment() {
        return glad_debug_glClearNamedBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_debug_glClearNamedBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glClearNamedBufferSubData() {
        return glad_debug_glClearNamedBufferSubData$constants.SEGMENT.get(glad_debug_glClearNamedBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_debug_glClearNamedBufferSubData
     * }
     */
    public static void glad_debug_glClearNamedBufferSubData(MemorySegment varValue) {
        glad_debug_glClearNamedBufferSubData$constants.SEGMENT.set(glad_debug_glClearNamedBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearNamedBufferSubDataEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearNamedBufferSubDataEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_glClearNamedBufferSubDataEXT
     * }
     */
    public static AddressLayout glad_glClearNamedBufferSubDataEXT$layout() {
        return glad_glClearNamedBufferSubDataEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_glClearNamedBufferSubDataEXT
     * }
     */
    public static MemorySegment glad_glClearNamedBufferSubDataEXT$segment() {
        return glad_glClearNamedBufferSubDataEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_glClearNamedBufferSubDataEXT
     * }
     */
    public static MemorySegment glad_glClearNamedBufferSubDataEXT() {
        return glad_glClearNamedBufferSubDataEXT$constants.SEGMENT.get(glad_glClearNamedBufferSubDataEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_glClearNamedBufferSubDataEXT
     * }
     */
    public static void glad_glClearNamedBufferSubDataEXT(MemorySegment varValue) {
        glad_glClearNamedBufferSubDataEXT$constants.SEGMENT.set(glad_glClearNamedBufferSubDataEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearNamedBufferSubDataEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearNamedBufferSubDataEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_debug_glClearNamedBufferSubDataEXT
     * }
     */
    public static AddressLayout glad_debug_glClearNamedBufferSubDataEXT$layout() {
        return glad_debug_glClearNamedBufferSubDataEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_debug_glClearNamedBufferSubDataEXT
     * }
     */
    public static MemorySegment glad_debug_glClearNamedBufferSubDataEXT$segment() {
        return glad_debug_glClearNamedBufferSubDataEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_debug_glClearNamedBufferSubDataEXT
     * }
     */
    public static MemorySegment glad_debug_glClearNamedBufferSubDataEXT() {
        return glad_debug_glClearNamedBufferSubDataEXT$constants.SEGMENT.get(glad_debug_glClearNamedBufferSubDataEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_debug_glClearNamedBufferSubDataEXT
     * }
     */
    public static void glad_debug_glClearNamedBufferSubDataEXT(MemorySegment varValue) {
        glad_debug_glClearNamedBufferSubDataEXT$constants.SEGMENT.set(glad_debug_glClearNamedBufferSubDataEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearNamedFramebufferfi$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearNamedFramebufferfi").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi
     * }
     */
    public static AddressLayout glad_glClearNamedFramebufferfi$layout() {
        return glad_glClearNamedFramebufferfi$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi
     * }
     */
    public static MemorySegment glad_glClearNamedFramebufferfi$segment() {
        return glad_glClearNamedFramebufferfi$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi
     * }
     */
    public static MemorySegment glad_glClearNamedFramebufferfi() {
        return glad_glClearNamedFramebufferfi$constants.SEGMENT.get(glad_glClearNamedFramebufferfi$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi
     * }
     */
    public static void glad_glClearNamedFramebufferfi(MemorySegment varValue) {
        glad_glClearNamedFramebufferfi$constants.SEGMENT.set(glad_glClearNamedFramebufferfi$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearNamedFramebufferfi$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearNamedFramebufferfi").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_debug_glClearNamedFramebufferfi
     * }
     */
    public static AddressLayout glad_debug_glClearNamedFramebufferfi$layout() {
        return glad_debug_glClearNamedFramebufferfi$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_debug_glClearNamedFramebufferfi
     * }
     */
    public static MemorySegment glad_debug_glClearNamedFramebufferfi$segment() {
        return glad_debug_glClearNamedFramebufferfi$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_debug_glClearNamedFramebufferfi
     * }
     */
    public static MemorySegment glad_debug_glClearNamedFramebufferfi() {
        return glad_debug_glClearNamedFramebufferfi$constants.SEGMENT.get(glad_debug_glClearNamedFramebufferfi$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_debug_glClearNamedFramebufferfi
     * }
     */
    public static void glad_debug_glClearNamedFramebufferfi(MemorySegment varValue) {
        glad_debug_glClearNamedFramebufferfi$constants.SEGMENT.set(glad_debug_glClearNamedFramebufferfi$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearNamedFramebufferfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearNamedFramebufferfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv
     * }
     */
    public static AddressLayout glad_glClearNamedFramebufferfv$layout() {
        return glad_glClearNamedFramebufferfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv
     * }
     */
    public static MemorySegment glad_glClearNamedFramebufferfv$segment() {
        return glad_glClearNamedFramebufferfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv
     * }
     */
    public static MemorySegment glad_glClearNamedFramebufferfv() {
        return glad_glClearNamedFramebufferfv$constants.SEGMENT.get(glad_glClearNamedFramebufferfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv
     * }
     */
    public static void glad_glClearNamedFramebufferfv(MemorySegment varValue) {
        glad_glClearNamedFramebufferfv$constants.SEGMENT.set(glad_glClearNamedFramebufferfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearNamedFramebufferfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearNamedFramebufferfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_debug_glClearNamedFramebufferfv
     * }
     */
    public static AddressLayout glad_debug_glClearNamedFramebufferfv$layout() {
        return glad_debug_glClearNamedFramebufferfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_debug_glClearNamedFramebufferfv
     * }
     */
    public static MemorySegment glad_debug_glClearNamedFramebufferfv$segment() {
        return glad_debug_glClearNamedFramebufferfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_debug_glClearNamedFramebufferfv
     * }
     */
    public static MemorySegment glad_debug_glClearNamedFramebufferfv() {
        return glad_debug_glClearNamedFramebufferfv$constants.SEGMENT.get(glad_debug_glClearNamedFramebufferfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_debug_glClearNamedFramebufferfv
     * }
     */
    public static void glad_debug_glClearNamedFramebufferfv(MemorySegment varValue) {
        glad_debug_glClearNamedFramebufferfv$constants.SEGMENT.set(glad_debug_glClearNamedFramebufferfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearNamedFramebufferiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearNamedFramebufferiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv
     * }
     */
    public static AddressLayout glad_glClearNamedFramebufferiv$layout() {
        return glad_glClearNamedFramebufferiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv
     * }
     */
    public static MemorySegment glad_glClearNamedFramebufferiv$segment() {
        return glad_glClearNamedFramebufferiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv
     * }
     */
    public static MemorySegment glad_glClearNamedFramebufferiv() {
        return glad_glClearNamedFramebufferiv$constants.SEGMENT.get(glad_glClearNamedFramebufferiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv
     * }
     */
    public static void glad_glClearNamedFramebufferiv(MemorySegment varValue) {
        glad_glClearNamedFramebufferiv$constants.SEGMENT.set(glad_glClearNamedFramebufferiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearNamedFramebufferiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearNamedFramebufferiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_debug_glClearNamedFramebufferiv
     * }
     */
    public static AddressLayout glad_debug_glClearNamedFramebufferiv$layout() {
        return glad_debug_glClearNamedFramebufferiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_debug_glClearNamedFramebufferiv
     * }
     */
    public static MemorySegment glad_debug_glClearNamedFramebufferiv$segment() {
        return glad_debug_glClearNamedFramebufferiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_debug_glClearNamedFramebufferiv
     * }
     */
    public static MemorySegment glad_debug_glClearNamedFramebufferiv() {
        return glad_debug_glClearNamedFramebufferiv$constants.SEGMENT.get(glad_debug_glClearNamedFramebufferiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_debug_glClearNamedFramebufferiv
     * }
     */
    public static void glad_debug_glClearNamedFramebufferiv(MemorySegment varValue) {
        glad_debug_glClearNamedFramebufferiv$constants.SEGMENT.set(glad_debug_glClearNamedFramebufferiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearNamedFramebufferuiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearNamedFramebufferuiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv
     * }
     */
    public static AddressLayout glad_glClearNamedFramebufferuiv$layout() {
        return glad_glClearNamedFramebufferuiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv
     * }
     */
    public static MemorySegment glad_glClearNamedFramebufferuiv$segment() {
        return glad_glClearNamedFramebufferuiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv
     * }
     */
    public static MemorySegment glad_glClearNamedFramebufferuiv() {
        return glad_glClearNamedFramebufferuiv$constants.SEGMENT.get(glad_glClearNamedFramebufferuiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv
     * }
     */
    public static void glad_glClearNamedFramebufferuiv(MemorySegment varValue) {
        glad_glClearNamedFramebufferuiv$constants.SEGMENT.set(glad_glClearNamedFramebufferuiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearNamedFramebufferuiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearNamedFramebufferuiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_debug_glClearNamedFramebufferuiv
     * }
     */
    public static AddressLayout glad_debug_glClearNamedFramebufferuiv$layout() {
        return glad_debug_glClearNamedFramebufferuiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_debug_glClearNamedFramebufferuiv
     * }
     */
    public static MemorySegment glad_debug_glClearNamedFramebufferuiv$segment() {
        return glad_debug_glClearNamedFramebufferuiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_debug_glClearNamedFramebufferuiv
     * }
     */
    public static MemorySegment glad_debug_glClearNamedFramebufferuiv() {
        return glad_debug_glClearNamedFramebufferuiv$constants.SEGMENT.get(glad_debug_glClearNamedFramebufferuiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_debug_glClearNamedFramebufferuiv
     * }
     */
    public static void glad_debug_glClearNamedFramebufferuiv(MemorySegment varValue) {
        glad_debug_glClearNamedFramebufferuiv$constants.SEGMENT.set(glad_debug_glClearNamedFramebufferuiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearStencil$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearStencil").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARSTENCILPROC glad_glClearStencil
     * }
     */
    public static AddressLayout glad_glClearStencil$layout() {
        return glad_glClearStencil$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARSTENCILPROC glad_glClearStencil
     * }
     */
    public static MemorySegment glad_glClearStencil$segment() {
        return glad_glClearStencil$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARSTENCILPROC glad_glClearStencil
     * }
     */
    public static MemorySegment glad_glClearStencil() {
        return glad_glClearStencil$constants.SEGMENT.get(glad_glClearStencil$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARSTENCILPROC glad_glClearStencil
     * }
     */
    public static void glad_glClearStencil(MemorySegment varValue) {
        glad_glClearStencil$constants.SEGMENT.set(glad_glClearStencil$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearStencil$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearStencil").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARSTENCILPROC glad_debug_glClearStencil
     * }
     */
    public static AddressLayout glad_debug_glClearStencil$layout() {
        return glad_debug_glClearStencil$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARSTENCILPROC glad_debug_glClearStencil
     * }
     */
    public static MemorySegment glad_debug_glClearStencil$segment() {
        return glad_debug_glClearStencil$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARSTENCILPROC glad_debug_glClearStencil
     * }
     */
    public static MemorySegment glad_debug_glClearStencil() {
        return glad_debug_glClearStencil$constants.SEGMENT.get(glad_debug_glClearStencil$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARSTENCILPROC glad_debug_glClearStencil
     * }
     */
    public static void glad_debug_glClearStencil(MemorySegment varValue) {
        glad_debug_glClearStencil$constants.SEGMENT.set(glad_debug_glClearStencil$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearTexImage$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearTexImage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage
     * }
     */
    public static AddressLayout glad_glClearTexImage$layout() {
        return glad_glClearTexImage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage
     * }
     */
    public static MemorySegment glad_glClearTexImage$segment() {
        return glad_glClearTexImage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage
     * }
     */
    public static MemorySegment glad_glClearTexImage() {
        return glad_glClearTexImage$constants.SEGMENT.get(glad_glClearTexImage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage
     * }
     */
    public static void glad_glClearTexImage(MemorySegment varValue) {
        glad_glClearTexImage$constants.SEGMENT.set(glad_glClearTexImage$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearTexImage$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearTexImage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXIMAGEPROC glad_debug_glClearTexImage
     * }
     */
    public static AddressLayout glad_debug_glClearTexImage$layout() {
        return glad_debug_glClearTexImage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXIMAGEPROC glad_debug_glClearTexImage
     * }
     */
    public static MemorySegment glad_debug_glClearTexImage$segment() {
        return glad_debug_glClearTexImage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXIMAGEPROC glad_debug_glClearTexImage
     * }
     */
    public static MemorySegment glad_debug_glClearTexImage() {
        return glad_debug_glClearTexImage$constants.SEGMENT.get(glad_debug_glClearTexImage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXIMAGEPROC glad_debug_glClearTexImage
     * }
     */
    public static void glad_debug_glClearTexImage(MemorySegment varValue) {
        glad_debug_glClearTexImage$constants.SEGMENT.set(glad_debug_glClearTexImage$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClearTexSubImage$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClearTexSubImage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage
     * }
     */
    public static AddressLayout glad_glClearTexSubImage$layout() {
        return glad_glClearTexSubImage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage
     * }
     */
    public static MemorySegment glad_glClearTexSubImage$segment() {
        return glad_glClearTexSubImage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage
     * }
     */
    public static MemorySegment glad_glClearTexSubImage() {
        return glad_glClearTexSubImage$constants.SEGMENT.get(glad_glClearTexSubImage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage
     * }
     */
    public static void glad_glClearTexSubImage(MemorySegment varValue) {
        glad_glClearTexSubImage$constants.SEGMENT.set(glad_glClearTexSubImage$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClearTexSubImage$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClearTexSubImage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXSUBIMAGEPROC glad_debug_glClearTexSubImage
     * }
     */
    public static AddressLayout glad_debug_glClearTexSubImage$layout() {
        return glad_debug_glClearTexSubImage$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXSUBIMAGEPROC glad_debug_glClearTexSubImage
     * }
     */
    public static MemorySegment glad_debug_glClearTexSubImage$segment() {
        return glad_debug_glClearTexSubImage$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXSUBIMAGEPROC glad_debug_glClearTexSubImage
     * }
     */
    public static MemorySegment glad_debug_glClearTexSubImage() {
        return glad_debug_glClearTexSubImage$constants.SEGMENT.get(glad_debug_glClearTexSubImage$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLEARTEXSUBIMAGEPROC glad_debug_glClearTexSubImage
     * }
     */
    public static void glad_debug_glClearTexSubImage(MemorySegment varValue) {
        glad_debug_glClearTexSubImage$constants.SEGMENT.set(glad_debug_glClearTexSubImage$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClientActiveTexture$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClientActiveTexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture
     * }
     */
    public static AddressLayout glad_glClientActiveTexture$layout() {
        return glad_glClientActiveTexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture
     * }
     */
    public static MemorySegment glad_glClientActiveTexture$segment() {
        return glad_glClientActiveTexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture
     * }
     */
    public static MemorySegment glad_glClientActiveTexture() {
        return glad_glClientActiveTexture$constants.SEGMENT.get(glad_glClientActiveTexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture
     * }
     */
    public static void glad_glClientActiveTexture(MemorySegment varValue) {
        glad_glClientActiveTexture$constants.SEGMENT.set(glad_glClientActiveTexture$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClientActiveTexture$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClientActiveTexture").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREPROC glad_debug_glClientActiveTexture
     * }
     */
    public static AddressLayout glad_debug_glClientActiveTexture$layout() {
        return glad_debug_glClientActiveTexture$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREPROC glad_debug_glClientActiveTexture
     * }
     */
    public static MemorySegment glad_debug_glClientActiveTexture$segment() {
        return glad_debug_glClientActiveTexture$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREPROC glad_debug_glClientActiveTexture
     * }
     */
    public static MemorySegment glad_debug_glClientActiveTexture() {
        return glad_debug_glClientActiveTexture$constants.SEGMENT.get(glad_debug_glClientActiveTexture$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREPROC glad_debug_glClientActiveTexture
     * }
     */
    public static void glad_debug_glClientActiveTexture(MemorySegment varValue) {
        glad_debug_glClientActiveTexture$constants.SEGMENT.set(glad_debug_glClientActiveTexture$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClientActiveTextureARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClientActiveTextureARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB
     * }
     */
    public static AddressLayout glad_glClientActiveTextureARB$layout() {
        return glad_glClientActiveTextureARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB
     * }
     */
    public static MemorySegment glad_glClientActiveTextureARB$segment() {
        return glad_glClientActiveTextureARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB
     * }
     */
    public static MemorySegment glad_glClientActiveTextureARB() {
        return glad_glClientActiveTextureARB$constants.SEGMENT.get(glad_glClientActiveTextureARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB
     * }
     */
    public static void glad_glClientActiveTextureARB(MemorySegment varValue) {
        glad_glClientActiveTextureARB$constants.SEGMENT.set(glad_glClientActiveTextureARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClientActiveTextureARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClientActiveTextureARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_debug_glClientActiveTextureARB
     * }
     */
    public static AddressLayout glad_debug_glClientActiveTextureARB$layout() {
        return glad_debug_glClientActiveTextureARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_debug_glClientActiveTextureARB
     * }
     */
    public static MemorySegment glad_debug_glClientActiveTextureARB$segment() {
        return glad_debug_glClientActiveTextureARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_debug_glClientActiveTextureARB
     * }
     */
    public static MemorySegment glad_debug_glClientActiveTextureARB() {
        return glad_debug_glClientActiveTextureARB$constants.SEGMENT.get(glad_debug_glClientActiveTextureARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_debug_glClientActiveTextureARB
     * }
     */
    public static void glad_debug_glClientActiveTextureARB(MemorySegment varValue) {
        glad_debug_glClientActiveTextureARB$constants.SEGMENT.set(glad_debug_glClientActiveTextureARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClientAttribDefaultEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClientAttribDefaultEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_glClientAttribDefaultEXT
     * }
     */
    public static AddressLayout glad_glClientAttribDefaultEXT$layout() {
        return glad_glClientAttribDefaultEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_glClientAttribDefaultEXT
     * }
     */
    public static MemorySegment glad_glClientAttribDefaultEXT$segment() {
        return glad_glClientAttribDefaultEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_glClientAttribDefaultEXT
     * }
     */
    public static MemorySegment glad_glClientAttribDefaultEXT() {
        return glad_glClientAttribDefaultEXT$constants.SEGMENT.get(glad_glClientAttribDefaultEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_glClientAttribDefaultEXT
     * }
     */
    public static void glad_glClientAttribDefaultEXT(MemorySegment varValue) {
        glad_glClientAttribDefaultEXT$constants.SEGMENT.set(glad_glClientAttribDefaultEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClientAttribDefaultEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClientAttribDefaultEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_debug_glClientAttribDefaultEXT
     * }
     */
    public static AddressLayout glad_debug_glClientAttribDefaultEXT$layout() {
        return glad_debug_glClientAttribDefaultEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_debug_glClientAttribDefaultEXT
     * }
     */
    public static MemorySegment glad_debug_glClientAttribDefaultEXT$segment() {
        return glad_debug_glClientAttribDefaultEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_debug_glClientAttribDefaultEXT
     * }
     */
    public static MemorySegment glad_debug_glClientAttribDefaultEXT() {
        return glad_debug_glClientAttribDefaultEXT$constants.SEGMENT.get(glad_debug_glClientAttribDefaultEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_debug_glClientAttribDefaultEXT
     * }
     */
    public static void glad_debug_glClientAttribDefaultEXT(MemorySegment varValue) {
        glad_debug_glClientAttribDefaultEXT$constants.SEGMENT.set(glad_debug_glClientAttribDefaultEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClientWaitSync$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClientWaitSync").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync
     * }
     */
    public static AddressLayout glad_glClientWaitSync$layout() {
        return glad_glClientWaitSync$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync
     * }
     */
    public static MemorySegment glad_glClientWaitSync$segment() {
        return glad_glClientWaitSync$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync
     * }
     */
    public static MemorySegment glad_glClientWaitSync() {
        return glad_glClientWaitSync$constants.SEGMENT.get(glad_glClientWaitSync$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync
     * }
     */
    public static void glad_glClientWaitSync(MemorySegment varValue) {
        glad_glClientWaitSync$constants.SEGMENT.set(glad_glClientWaitSync$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClientWaitSync$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClientWaitSync").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync
     * }
     */
    public static AddressLayout glad_debug_glClientWaitSync$layout() {
        return glad_debug_glClientWaitSync$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync
     * }
     */
    public static MemorySegment glad_debug_glClientWaitSync$segment() {
        return glad_debug_glClientWaitSync$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync
     * }
     */
    public static MemorySegment glad_debug_glClientWaitSync() {
        return glad_debug_glClientWaitSync$constants.SEGMENT.get(glad_debug_glClientWaitSync$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync
     * }
     */
    public static void glad_debug_glClientWaitSync(MemorySegment varValue) {
        glad_debug_glClientWaitSync$constants.SEGMENT.set(glad_debug_glClientWaitSync$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClipControl$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClipControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPCONTROLPROC glad_glClipControl
     * }
     */
    public static AddressLayout glad_glClipControl$layout() {
        return glad_glClipControl$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPCONTROLPROC glad_glClipControl
     * }
     */
    public static MemorySegment glad_glClipControl$segment() {
        return glad_glClipControl$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPCONTROLPROC glad_glClipControl
     * }
     */
    public static MemorySegment glad_glClipControl() {
        return glad_glClipControl$constants.SEGMENT.get(glad_glClipControl$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPCONTROLPROC glad_glClipControl
     * }
     */
    public static void glad_glClipControl(MemorySegment varValue) {
        glad_glClipControl$constants.SEGMENT.set(glad_glClipControl$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClipControl$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClipControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPCONTROLPROC glad_debug_glClipControl
     * }
     */
    public static AddressLayout glad_debug_glClipControl$layout() {
        return glad_debug_glClipControl$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPCONTROLPROC glad_debug_glClipControl
     * }
     */
    public static MemorySegment glad_debug_glClipControl$segment() {
        return glad_debug_glClipControl$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPCONTROLPROC glad_debug_glClipControl
     * }
     */
    public static MemorySegment glad_debug_glClipControl() {
        return glad_debug_glClipControl$constants.SEGMENT.get(glad_debug_glClipControl$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPCONTROLPROC glad_debug_glClipControl
     * }
     */
    public static void glad_debug_glClipControl(MemorySegment varValue) {
        glad_debug_glClipControl$constants.SEGMENT.set(glad_debug_glClipControl$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClipPlane$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClipPlane").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEPROC glad_glClipPlane
     * }
     */
    public static AddressLayout glad_glClipPlane$layout() {
        return glad_glClipPlane$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEPROC glad_glClipPlane
     * }
     */
    public static MemorySegment glad_glClipPlane$segment() {
        return glad_glClipPlane$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEPROC glad_glClipPlane
     * }
     */
    public static MemorySegment glad_glClipPlane() {
        return glad_glClipPlane$constants.SEGMENT.get(glad_glClipPlane$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEPROC glad_glClipPlane
     * }
     */
    public static void glad_glClipPlane(MemorySegment varValue) {
        glad_glClipPlane$constants.SEGMENT.set(glad_glClipPlane$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClipPlane$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClipPlane").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEPROC glad_debug_glClipPlane
     * }
     */
    public static AddressLayout glad_debug_glClipPlane$layout() {
        return glad_debug_glClipPlane$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEPROC glad_debug_glClipPlane
     * }
     */
    public static MemorySegment glad_debug_glClipPlane$segment() {
        return glad_debug_glClipPlane$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEPROC glad_debug_glClipPlane
     * }
     */
    public static MemorySegment glad_debug_glClipPlane() {
        return glad_debug_glClipPlane$constants.SEGMENT.get(glad_debug_glClipPlane$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEPROC glad_debug_glClipPlane
     * }
     */
    public static void glad_debug_glClipPlane(MemorySegment varValue) {
        glad_debug_glClipPlane$constants.SEGMENT.set(glad_debug_glClipPlane$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glClipPlanefOES$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glClipPlanefOES").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEFOESPROC glad_glClipPlanefOES
     * }
     */
    public static AddressLayout glad_glClipPlanefOES$layout() {
        return glad_glClipPlanefOES$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEFOESPROC glad_glClipPlanefOES
     * }
     */
    public static MemorySegment glad_glClipPlanefOES$segment() {
        return glad_glClipPlanefOES$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEFOESPROC glad_glClipPlanefOES
     * }
     */
    public static MemorySegment glad_glClipPlanefOES() {
        return glad_glClipPlanefOES$constants.SEGMENT.get(glad_glClipPlanefOES$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEFOESPROC glad_glClipPlanefOES
     * }
     */
    public static void glad_glClipPlanefOES(MemorySegment varValue) {
        glad_glClipPlanefOES$constants.SEGMENT.set(glad_glClipPlanefOES$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glClipPlanefOES$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glClipPlanefOES").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEFOESPROC glad_debug_glClipPlanefOES
     * }
     */
    public static AddressLayout glad_debug_glClipPlanefOES$layout() {
        return glad_debug_glClipPlanefOES$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEFOESPROC glad_debug_glClipPlanefOES
     * }
     */
    public static MemorySegment glad_debug_glClipPlanefOES$segment() {
        return glad_debug_glClipPlanefOES$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEFOESPROC glad_debug_glClipPlanefOES
     * }
     */
    public static MemorySegment glad_debug_glClipPlanefOES() {
        return glad_debug_glClipPlanefOES$constants.SEGMENT.get(glad_debug_glClipPlanefOES$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCLIPPLANEFOESPROC glad_debug_glClipPlanefOES
     * }
     */
    public static void glad_debug_glClipPlanefOES(MemorySegment varValue) {
        glad_debug_glClipPlanefOES$constants.SEGMENT.set(glad_debug_glClipPlanefOES$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3b$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3b").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BPROC glad_glColor3b
     * }
     */
    public static AddressLayout glad_glColor3b$layout() {
        return glad_glColor3b$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BPROC glad_glColor3b
     * }
     */
    public static MemorySegment glad_glColor3b$segment() {
        return glad_glColor3b$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BPROC glad_glColor3b
     * }
     */
    public static MemorySegment glad_glColor3b() {
        return glad_glColor3b$constants.SEGMENT.get(glad_glColor3b$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BPROC glad_glColor3b
     * }
     */
    public static void glad_glColor3b(MemorySegment varValue) {
        glad_glColor3b$constants.SEGMENT.set(glad_glColor3b$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3b$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3b").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BPROC glad_debug_glColor3b
     * }
     */
    public static AddressLayout glad_debug_glColor3b$layout() {
        return glad_debug_glColor3b$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BPROC glad_debug_glColor3b
     * }
     */
    public static MemorySegment glad_debug_glColor3b$segment() {
        return glad_debug_glColor3b$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BPROC glad_debug_glColor3b
     * }
     */
    public static MemorySegment glad_debug_glColor3b() {
        return glad_debug_glColor3b$constants.SEGMENT.get(glad_debug_glColor3b$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BPROC glad_debug_glColor3b
     * }
     */
    public static void glad_debug_glColor3b(MemorySegment varValue) {
        glad_debug_glColor3b$constants.SEGMENT.set(glad_debug_glColor3b$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3bv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3bv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BVPROC glad_glColor3bv
     * }
     */
    public static AddressLayout glad_glColor3bv$layout() {
        return glad_glColor3bv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BVPROC glad_glColor3bv
     * }
     */
    public static MemorySegment glad_glColor3bv$segment() {
        return glad_glColor3bv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BVPROC glad_glColor3bv
     * }
     */
    public static MemorySegment glad_glColor3bv() {
        return glad_glColor3bv$constants.SEGMENT.get(glad_glColor3bv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BVPROC glad_glColor3bv
     * }
     */
    public static void glad_glColor3bv(MemorySegment varValue) {
        glad_glColor3bv$constants.SEGMENT.set(glad_glColor3bv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3bv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3bv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BVPROC glad_debug_glColor3bv
     * }
     */
    public static AddressLayout glad_debug_glColor3bv$layout() {
        return glad_debug_glColor3bv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BVPROC glad_debug_glColor3bv
     * }
     */
    public static MemorySegment glad_debug_glColor3bv$segment() {
        return glad_debug_glColor3bv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BVPROC glad_debug_glColor3bv
     * }
     */
    public static MemorySegment glad_debug_glColor3bv() {
        return glad_debug_glColor3bv$constants.SEGMENT.get(glad_debug_glColor3bv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3BVPROC glad_debug_glColor3bv
     * }
     */
    public static void glad_debug_glColor3bv(MemorySegment varValue) {
        glad_debug_glColor3bv$constants.SEGMENT.set(glad_debug_glColor3bv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DPROC glad_glColor3d
     * }
     */
    public static AddressLayout glad_glColor3d$layout() {
        return glad_glColor3d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DPROC glad_glColor3d
     * }
     */
    public static MemorySegment glad_glColor3d$segment() {
        return glad_glColor3d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DPROC glad_glColor3d
     * }
     */
    public static MemorySegment glad_glColor3d() {
        return glad_glColor3d$constants.SEGMENT.get(glad_glColor3d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DPROC glad_glColor3d
     * }
     */
    public static void glad_glColor3d(MemorySegment varValue) {
        glad_glColor3d$constants.SEGMENT.set(glad_glColor3d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DPROC glad_debug_glColor3d
     * }
     */
    public static AddressLayout glad_debug_glColor3d$layout() {
        return glad_debug_glColor3d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DPROC glad_debug_glColor3d
     * }
     */
    public static MemorySegment glad_debug_glColor3d$segment() {
        return glad_debug_glColor3d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DPROC glad_debug_glColor3d
     * }
     */
    public static MemorySegment glad_debug_glColor3d() {
        return glad_debug_glColor3d$constants.SEGMENT.get(glad_debug_glColor3d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DPROC glad_debug_glColor3d
     * }
     */
    public static void glad_debug_glColor3d(MemorySegment varValue) {
        glad_debug_glColor3d$constants.SEGMENT.set(glad_debug_glColor3d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DVPROC glad_glColor3dv
     * }
     */
    public static AddressLayout glad_glColor3dv$layout() {
        return glad_glColor3dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DVPROC glad_glColor3dv
     * }
     */
    public static MemorySegment glad_glColor3dv$segment() {
        return glad_glColor3dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DVPROC glad_glColor3dv
     * }
     */
    public static MemorySegment glad_glColor3dv() {
        return glad_glColor3dv$constants.SEGMENT.get(glad_glColor3dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DVPROC glad_glColor3dv
     * }
     */
    public static void glad_glColor3dv(MemorySegment varValue) {
        glad_glColor3dv$constants.SEGMENT.set(glad_glColor3dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DVPROC glad_debug_glColor3dv
     * }
     */
    public static AddressLayout glad_debug_glColor3dv$layout() {
        return glad_debug_glColor3dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DVPROC glad_debug_glColor3dv
     * }
     */
    public static MemorySegment glad_debug_glColor3dv$segment() {
        return glad_debug_glColor3dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DVPROC glad_debug_glColor3dv
     * }
     */
    public static MemorySegment glad_debug_glColor3dv() {
        return glad_debug_glColor3dv$constants.SEGMENT.get(glad_debug_glColor3dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3DVPROC glad_debug_glColor3dv
     * }
     */
    public static void glad_debug_glColor3dv(MemorySegment varValue) {
        glad_debug_glColor3dv$constants.SEGMENT.set(glad_debug_glColor3dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3f$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3f").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FPROC glad_glColor3f
     * }
     */
    public static AddressLayout glad_glColor3f$layout() {
        return glad_glColor3f$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FPROC glad_glColor3f
     * }
     */
    public static MemorySegment glad_glColor3f$segment() {
        return glad_glColor3f$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FPROC glad_glColor3f
     * }
     */
    public static MemorySegment glad_glColor3f() {
        return glad_glColor3f$constants.SEGMENT.get(glad_glColor3f$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FPROC glad_glColor3f
     * }
     */
    public static void glad_glColor3f(MemorySegment varValue) {
        glad_glColor3f$constants.SEGMENT.set(glad_glColor3f$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3f$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3f").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FPROC glad_debug_glColor3f
     * }
     */
    public static AddressLayout glad_debug_glColor3f$layout() {
        return glad_debug_glColor3f$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FPROC glad_debug_glColor3f
     * }
     */
    public static MemorySegment glad_debug_glColor3f$segment() {
        return glad_debug_glColor3f$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FPROC glad_debug_glColor3f
     * }
     */
    public static MemorySegment glad_debug_glColor3f() {
        return glad_debug_glColor3f$constants.SEGMENT.get(glad_debug_glColor3f$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FPROC glad_debug_glColor3f
     * }
     */
    public static void glad_debug_glColor3f(MemorySegment varValue) {
        glad_debug_glColor3f$constants.SEGMENT.set(glad_debug_glColor3f$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3fv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3fv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FVPROC glad_glColor3fv
     * }
     */
    public static AddressLayout glad_glColor3fv$layout() {
        return glad_glColor3fv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FVPROC glad_glColor3fv
     * }
     */
    public static MemorySegment glad_glColor3fv$segment() {
        return glad_glColor3fv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FVPROC glad_glColor3fv
     * }
     */
    public static MemorySegment glad_glColor3fv() {
        return glad_glColor3fv$constants.SEGMENT.get(glad_glColor3fv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FVPROC glad_glColor3fv
     * }
     */
    public static void glad_glColor3fv(MemorySegment varValue) {
        glad_glColor3fv$constants.SEGMENT.set(glad_glColor3fv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3fv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3fv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FVPROC glad_debug_glColor3fv
     * }
     */
    public static AddressLayout glad_debug_glColor3fv$layout() {
        return glad_debug_glColor3fv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FVPROC glad_debug_glColor3fv
     * }
     */
    public static MemorySegment glad_debug_glColor3fv$segment() {
        return glad_debug_glColor3fv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FVPROC glad_debug_glColor3fv
     * }
     */
    public static MemorySegment glad_debug_glColor3fv() {
        return glad_debug_glColor3fv$constants.SEGMENT.get(glad_debug_glColor3fv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3FVPROC glad_debug_glColor3fv
     * }
     */
    public static void glad_debug_glColor3fv(MemorySegment varValue) {
        glad_debug_glColor3fv$constants.SEGMENT.set(glad_debug_glColor3fv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3i$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3i").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IPROC glad_glColor3i
     * }
     */
    public static AddressLayout glad_glColor3i$layout() {
        return glad_glColor3i$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IPROC glad_glColor3i
     * }
     */
    public static MemorySegment glad_glColor3i$segment() {
        return glad_glColor3i$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IPROC glad_glColor3i
     * }
     */
    public static MemorySegment glad_glColor3i() {
        return glad_glColor3i$constants.SEGMENT.get(glad_glColor3i$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IPROC glad_glColor3i
     * }
     */
    public static void glad_glColor3i(MemorySegment varValue) {
        glad_glColor3i$constants.SEGMENT.set(glad_glColor3i$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3i$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3i").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IPROC glad_debug_glColor3i
     * }
     */
    public static AddressLayout glad_debug_glColor3i$layout() {
        return glad_debug_glColor3i$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IPROC glad_debug_glColor3i
     * }
     */
    public static MemorySegment glad_debug_glColor3i$segment() {
        return glad_debug_glColor3i$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IPROC glad_debug_glColor3i
     * }
     */
    public static MemorySegment glad_debug_glColor3i() {
        return glad_debug_glColor3i$constants.SEGMENT.get(glad_debug_glColor3i$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IPROC glad_debug_glColor3i
     * }
     */
    public static void glad_debug_glColor3i(MemorySegment varValue) {
        glad_debug_glColor3i$constants.SEGMENT.set(glad_debug_glColor3i$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3iv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3iv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IVPROC glad_glColor3iv
     * }
     */
    public static AddressLayout glad_glColor3iv$layout() {
        return glad_glColor3iv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IVPROC glad_glColor3iv
     * }
     */
    public static MemorySegment glad_glColor3iv$segment() {
        return glad_glColor3iv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IVPROC glad_glColor3iv
     * }
     */
    public static MemorySegment glad_glColor3iv() {
        return glad_glColor3iv$constants.SEGMENT.get(glad_glColor3iv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IVPROC glad_glColor3iv
     * }
     */
    public static void glad_glColor3iv(MemorySegment varValue) {
        glad_glColor3iv$constants.SEGMENT.set(glad_glColor3iv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3iv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3iv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IVPROC glad_debug_glColor3iv
     * }
     */
    public static AddressLayout glad_debug_glColor3iv$layout() {
        return glad_debug_glColor3iv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IVPROC glad_debug_glColor3iv
     * }
     */
    public static MemorySegment glad_debug_glColor3iv$segment() {
        return glad_debug_glColor3iv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IVPROC glad_debug_glColor3iv
     * }
     */
    public static MemorySegment glad_debug_glColor3iv() {
        return glad_debug_glColor3iv$constants.SEGMENT.get(glad_debug_glColor3iv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3IVPROC glad_debug_glColor3iv
     * }
     */
    public static void glad_debug_glColor3iv(MemorySegment varValue) {
        glad_debug_glColor3iv$constants.SEGMENT.set(glad_debug_glColor3iv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3s$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3s").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SPROC glad_glColor3s
     * }
     */
    public static AddressLayout glad_glColor3s$layout() {
        return glad_glColor3s$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SPROC glad_glColor3s
     * }
     */
    public static MemorySegment glad_glColor3s$segment() {
        return glad_glColor3s$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SPROC glad_glColor3s
     * }
     */
    public static MemorySegment glad_glColor3s() {
        return glad_glColor3s$constants.SEGMENT.get(glad_glColor3s$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SPROC glad_glColor3s
     * }
     */
    public static void glad_glColor3s(MemorySegment varValue) {
        glad_glColor3s$constants.SEGMENT.set(glad_glColor3s$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3s$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3s").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SPROC glad_debug_glColor3s
     * }
     */
    public static AddressLayout glad_debug_glColor3s$layout() {
        return glad_debug_glColor3s$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SPROC glad_debug_glColor3s
     * }
     */
    public static MemorySegment glad_debug_glColor3s$segment() {
        return glad_debug_glColor3s$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SPROC glad_debug_glColor3s
     * }
     */
    public static MemorySegment glad_debug_glColor3s() {
        return glad_debug_glColor3s$constants.SEGMENT.get(glad_debug_glColor3s$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SPROC glad_debug_glColor3s
     * }
     */
    public static void glad_debug_glColor3s(MemorySegment varValue) {
        glad_debug_glColor3s$constants.SEGMENT.set(glad_debug_glColor3s$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3sv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3sv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SVPROC glad_glColor3sv
     * }
     */
    public static AddressLayout glad_glColor3sv$layout() {
        return glad_glColor3sv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SVPROC glad_glColor3sv
     * }
     */
    public static MemorySegment glad_glColor3sv$segment() {
        return glad_glColor3sv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SVPROC glad_glColor3sv
     * }
     */
    public static MemorySegment glad_glColor3sv() {
        return glad_glColor3sv$constants.SEGMENT.get(glad_glColor3sv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SVPROC glad_glColor3sv
     * }
     */
    public static void glad_glColor3sv(MemorySegment varValue) {
        glad_glColor3sv$constants.SEGMENT.set(glad_glColor3sv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3sv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3sv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SVPROC glad_debug_glColor3sv
     * }
     */
    public static AddressLayout glad_debug_glColor3sv$layout() {
        return glad_debug_glColor3sv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SVPROC glad_debug_glColor3sv
     * }
     */
    public static MemorySegment glad_debug_glColor3sv$segment() {
        return glad_debug_glColor3sv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SVPROC glad_debug_glColor3sv
     * }
     */
    public static MemorySegment glad_debug_glColor3sv() {
        return glad_debug_glColor3sv$constants.SEGMENT.get(glad_debug_glColor3sv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3SVPROC glad_debug_glColor3sv
     * }
     */
    public static void glad_debug_glColor3sv(MemorySegment varValue) {
        glad_debug_glColor3sv$constants.SEGMENT.set(glad_debug_glColor3sv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3ub$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3ub").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBPROC glad_glColor3ub
     * }
     */
    public static AddressLayout glad_glColor3ub$layout() {
        return glad_glColor3ub$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBPROC glad_glColor3ub
     * }
     */
    public static MemorySegment glad_glColor3ub$segment() {
        return glad_glColor3ub$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBPROC glad_glColor3ub
     * }
     */
    public static MemorySegment glad_glColor3ub() {
        return glad_glColor3ub$constants.SEGMENT.get(glad_glColor3ub$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBPROC glad_glColor3ub
     * }
     */
    public static void glad_glColor3ub(MemorySegment varValue) {
        glad_glColor3ub$constants.SEGMENT.set(glad_glColor3ub$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3ub$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3ub").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBPROC glad_debug_glColor3ub
     * }
     */
    public static AddressLayout glad_debug_glColor3ub$layout() {
        return glad_debug_glColor3ub$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBPROC glad_debug_glColor3ub
     * }
     */
    public static MemorySegment glad_debug_glColor3ub$segment() {
        return glad_debug_glColor3ub$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBPROC glad_debug_glColor3ub
     * }
     */
    public static MemorySegment glad_debug_glColor3ub() {
        return glad_debug_glColor3ub$constants.SEGMENT.get(glad_debug_glColor3ub$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBPROC glad_debug_glColor3ub
     * }
     */
    public static void glad_debug_glColor3ub(MemorySegment varValue) {
        glad_debug_glColor3ub$constants.SEGMENT.set(glad_debug_glColor3ub$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3ubv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3ubv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBVPROC glad_glColor3ubv
     * }
     */
    public static AddressLayout glad_glColor3ubv$layout() {
        return glad_glColor3ubv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBVPROC glad_glColor3ubv
     * }
     */
    public static MemorySegment glad_glColor3ubv$segment() {
        return glad_glColor3ubv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBVPROC glad_glColor3ubv
     * }
     */
    public static MemorySegment glad_glColor3ubv() {
        return glad_glColor3ubv$constants.SEGMENT.get(glad_glColor3ubv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBVPROC glad_glColor3ubv
     * }
     */
    public static void glad_glColor3ubv(MemorySegment varValue) {
        glad_glColor3ubv$constants.SEGMENT.set(glad_glColor3ubv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3ubv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3ubv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBVPROC glad_debug_glColor3ubv
     * }
     */
    public static AddressLayout glad_debug_glColor3ubv$layout() {
        return glad_debug_glColor3ubv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBVPROC glad_debug_glColor3ubv
     * }
     */
    public static MemorySegment glad_debug_glColor3ubv$segment() {
        return glad_debug_glColor3ubv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBVPROC glad_debug_glColor3ubv
     * }
     */
    public static MemorySegment glad_debug_glColor3ubv() {
        return glad_debug_glColor3ubv$constants.SEGMENT.get(glad_debug_glColor3ubv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UBVPROC glad_debug_glColor3ubv
     * }
     */
    public static void glad_debug_glColor3ubv(MemorySegment varValue) {
        glad_debug_glColor3ubv$constants.SEGMENT.set(glad_debug_glColor3ubv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIPROC glad_glColor3ui
     * }
     */
    public static AddressLayout glad_glColor3ui$layout() {
        return glad_glColor3ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIPROC glad_glColor3ui
     * }
     */
    public static MemorySegment glad_glColor3ui$segment() {
        return glad_glColor3ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIPROC glad_glColor3ui
     * }
     */
    public static MemorySegment glad_glColor3ui() {
        return glad_glColor3ui$constants.SEGMENT.get(glad_glColor3ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIPROC glad_glColor3ui
     * }
     */
    public static void glad_glColor3ui(MemorySegment varValue) {
        glad_glColor3ui$constants.SEGMENT.set(glad_glColor3ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIPROC glad_debug_glColor3ui
     * }
     */
    public static AddressLayout glad_debug_glColor3ui$layout() {
        return glad_debug_glColor3ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIPROC glad_debug_glColor3ui
     * }
     */
    public static MemorySegment glad_debug_glColor3ui$segment() {
        return glad_debug_glColor3ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIPROC glad_debug_glColor3ui
     * }
     */
    public static MemorySegment glad_debug_glColor3ui() {
        return glad_debug_glColor3ui$constants.SEGMENT.get(glad_debug_glColor3ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIPROC glad_debug_glColor3ui
     * }
     */
    public static void glad_debug_glColor3ui(MemorySegment varValue) {
        glad_debug_glColor3ui$constants.SEGMENT.set(glad_debug_glColor3ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIVPROC glad_glColor3uiv
     * }
     */
    public static AddressLayout glad_glColor3uiv$layout() {
        return glad_glColor3uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIVPROC glad_glColor3uiv
     * }
     */
    public static MemorySegment glad_glColor3uiv$segment() {
        return glad_glColor3uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIVPROC glad_glColor3uiv
     * }
     */
    public static MemorySegment glad_glColor3uiv() {
        return glad_glColor3uiv$constants.SEGMENT.get(glad_glColor3uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIVPROC glad_glColor3uiv
     * }
     */
    public static void glad_glColor3uiv(MemorySegment varValue) {
        glad_glColor3uiv$constants.SEGMENT.set(glad_glColor3uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIVPROC glad_debug_glColor3uiv
     * }
     */
    public static AddressLayout glad_debug_glColor3uiv$layout() {
        return glad_debug_glColor3uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIVPROC glad_debug_glColor3uiv
     * }
     */
    public static MemorySegment glad_debug_glColor3uiv$segment() {
        return glad_debug_glColor3uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIVPROC glad_debug_glColor3uiv
     * }
     */
    public static MemorySegment glad_debug_glColor3uiv() {
        return glad_debug_glColor3uiv$constants.SEGMENT.get(glad_debug_glColor3uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3UIVPROC glad_debug_glColor3uiv
     * }
     */
    public static void glad_debug_glColor3uiv(MemorySegment varValue) {
        glad_debug_glColor3uiv$constants.SEGMENT.set(glad_debug_glColor3uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3us$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3us").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USPROC glad_glColor3us
     * }
     */
    public static AddressLayout glad_glColor3us$layout() {
        return glad_glColor3us$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USPROC glad_glColor3us
     * }
     */
    public static MemorySegment glad_glColor3us$segment() {
        return glad_glColor3us$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USPROC glad_glColor3us
     * }
     */
    public static MemorySegment glad_glColor3us() {
        return glad_glColor3us$constants.SEGMENT.get(glad_glColor3us$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USPROC glad_glColor3us
     * }
     */
    public static void glad_glColor3us(MemorySegment varValue) {
        glad_glColor3us$constants.SEGMENT.set(glad_glColor3us$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3us$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3us").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USPROC glad_debug_glColor3us
     * }
     */
    public static AddressLayout glad_debug_glColor3us$layout() {
        return glad_debug_glColor3us$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USPROC glad_debug_glColor3us
     * }
     */
    public static MemorySegment glad_debug_glColor3us$segment() {
        return glad_debug_glColor3us$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USPROC glad_debug_glColor3us
     * }
     */
    public static MemorySegment glad_debug_glColor3us() {
        return glad_debug_glColor3us$constants.SEGMENT.get(glad_debug_glColor3us$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USPROC glad_debug_glColor3us
     * }
     */
    public static void glad_debug_glColor3us(MemorySegment varValue) {
        glad_debug_glColor3us$constants.SEGMENT.set(glad_debug_glColor3us$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor3usv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor3usv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USVPROC glad_glColor3usv
     * }
     */
    public static AddressLayout glad_glColor3usv$layout() {
        return glad_glColor3usv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USVPROC glad_glColor3usv
     * }
     */
    public static MemorySegment glad_glColor3usv$segment() {
        return glad_glColor3usv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USVPROC glad_glColor3usv
     * }
     */
    public static MemorySegment glad_glColor3usv() {
        return glad_glColor3usv$constants.SEGMENT.get(glad_glColor3usv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USVPROC glad_glColor3usv
     * }
     */
    public static void glad_glColor3usv(MemorySegment varValue) {
        glad_glColor3usv$constants.SEGMENT.set(glad_glColor3usv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor3usv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor3usv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USVPROC glad_debug_glColor3usv
     * }
     */
    public static AddressLayout glad_debug_glColor3usv$layout() {
        return glad_debug_glColor3usv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USVPROC glad_debug_glColor3usv
     * }
     */
    public static MemorySegment glad_debug_glColor3usv$segment() {
        return glad_debug_glColor3usv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USVPROC glad_debug_glColor3usv
     * }
     */
    public static MemorySegment glad_debug_glColor3usv() {
        return glad_debug_glColor3usv$constants.SEGMENT.get(glad_debug_glColor3usv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR3USVPROC glad_debug_glColor3usv
     * }
     */
    public static void glad_debug_glColor3usv(MemorySegment varValue) {
        glad_debug_glColor3usv$constants.SEGMENT.set(glad_debug_glColor3usv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4b$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4b").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BPROC glad_glColor4b
     * }
     */
    public static AddressLayout glad_glColor4b$layout() {
        return glad_glColor4b$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BPROC glad_glColor4b
     * }
     */
    public static MemorySegment glad_glColor4b$segment() {
        return glad_glColor4b$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BPROC glad_glColor4b
     * }
     */
    public static MemorySegment glad_glColor4b() {
        return glad_glColor4b$constants.SEGMENT.get(glad_glColor4b$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BPROC glad_glColor4b
     * }
     */
    public static void glad_glColor4b(MemorySegment varValue) {
        glad_glColor4b$constants.SEGMENT.set(glad_glColor4b$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4b$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4b").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BPROC glad_debug_glColor4b
     * }
     */
    public static AddressLayout glad_debug_glColor4b$layout() {
        return glad_debug_glColor4b$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BPROC glad_debug_glColor4b
     * }
     */
    public static MemorySegment glad_debug_glColor4b$segment() {
        return glad_debug_glColor4b$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BPROC glad_debug_glColor4b
     * }
     */
    public static MemorySegment glad_debug_glColor4b() {
        return glad_debug_glColor4b$constants.SEGMENT.get(glad_debug_glColor4b$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BPROC glad_debug_glColor4b
     * }
     */
    public static void glad_debug_glColor4b(MemorySegment varValue) {
        glad_debug_glColor4b$constants.SEGMENT.set(glad_debug_glColor4b$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4bv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4bv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BVPROC glad_glColor4bv
     * }
     */
    public static AddressLayout glad_glColor4bv$layout() {
        return glad_glColor4bv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BVPROC glad_glColor4bv
     * }
     */
    public static MemorySegment glad_glColor4bv$segment() {
        return glad_glColor4bv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BVPROC glad_glColor4bv
     * }
     */
    public static MemorySegment glad_glColor4bv() {
        return glad_glColor4bv$constants.SEGMENT.get(glad_glColor4bv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BVPROC glad_glColor4bv
     * }
     */
    public static void glad_glColor4bv(MemorySegment varValue) {
        glad_glColor4bv$constants.SEGMENT.set(glad_glColor4bv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4bv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4bv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BVPROC glad_debug_glColor4bv
     * }
     */
    public static AddressLayout glad_debug_glColor4bv$layout() {
        return glad_debug_glColor4bv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BVPROC glad_debug_glColor4bv
     * }
     */
    public static MemorySegment glad_debug_glColor4bv$segment() {
        return glad_debug_glColor4bv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BVPROC glad_debug_glColor4bv
     * }
     */
    public static MemorySegment glad_debug_glColor4bv() {
        return glad_debug_glColor4bv$constants.SEGMENT.get(glad_debug_glColor4bv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4BVPROC glad_debug_glColor4bv
     * }
     */
    public static void glad_debug_glColor4bv(MemorySegment varValue) {
        glad_debug_glColor4bv$constants.SEGMENT.set(glad_debug_glColor4bv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DPROC glad_glColor4d
     * }
     */
    public static AddressLayout glad_glColor4d$layout() {
        return glad_glColor4d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DPROC glad_glColor4d
     * }
     */
    public static MemorySegment glad_glColor4d$segment() {
        return glad_glColor4d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DPROC glad_glColor4d
     * }
     */
    public static MemorySegment glad_glColor4d() {
        return glad_glColor4d$constants.SEGMENT.get(glad_glColor4d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DPROC glad_glColor4d
     * }
     */
    public static void glad_glColor4d(MemorySegment varValue) {
        glad_glColor4d$constants.SEGMENT.set(glad_glColor4d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4d$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4d").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DPROC glad_debug_glColor4d
     * }
     */
    public static AddressLayout glad_debug_glColor4d$layout() {
        return glad_debug_glColor4d$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DPROC glad_debug_glColor4d
     * }
     */
    public static MemorySegment glad_debug_glColor4d$segment() {
        return glad_debug_glColor4d$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DPROC glad_debug_glColor4d
     * }
     */
    public static MemorySegment glad_debug_glColor4d() {
        return glad_debug_glColor4d$constants.SEGMENT.get(glad_debug_glColor4d$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DPROC glad_debug_glColor4d
     * }
     */
    public static void glad_debug_glColor4d(MemorySegment varValue) {
        glad_debug_glColor4d$constants.SEGMENT.set(glad_debug_glColor4d$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DVPROC glad_glColor4dv
     * }
     */
    public static AddressLayout glad_glColor4dv$layout() {
        return glad_glColor4dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DVPROC glad_glColor4dv
     * }
     */
    public static MemorySegment glad_glColor4dv$segment() {
        return glad_glColor4dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DVPROC glad_glColor4dv
     * }
     */
    public static MemorySegment glad_glColor4dv() {
        return glad_glColor4dv$constants.SEGMENT.get(glad_glColor4dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DVPROC glad_glColor4dv
     * }
     */
    public static void glad_glColor4dv(MemorySegment varValue) {
        glad_glColor4dv$constants.SEGMENT.set(glad_glColor4dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4dv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4dv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DVPROC glad_debug_glColor4dv
     * }
     */
    public static AddressLayout glad_debug_glColor4dv$layout() {
        return glad_debug_glColor4dv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DVPROC glad_debug_glColor4dv
     * }
     */
    public static MemorySegment glad_debug_glColor4dv$segment() {
        return glad_debug_glColor4dv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DVPROC glad_debug_glColor4dv
     * }
     */
    public static MemorySegment glad_debug_glColor4dv() {
        return glad_debug_glColor4dv$constants.SEGMENT.get(glad_debug_glColor4dv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4DVPROC glad_debug_glColor4dv
     * }
     */
    public static void glad_debug_glColor4dv(MemorySegment varValue) {
        glad_debug_glColor4dv$constants.SEGMENT.set(glad_debug_glColor4dv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4f$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4f").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FPROC glad_glColor4f
     * }
     */
    public static AddressLayout glad_glColor4f$layout() {
        return glad_glColor4f$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FPROC glad_glColor4f
     * }
     */
    public static MemorySegment glad_glColor4f$segment() {
        return glad_glColor4f$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FPROC glad_glColor4f
     * }
     */
    public static MemorySegment glad_glColor4f() {
        return glad_glColor4f$constants.SEGMENT.get(glad_glColor4f$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FPROC glad_glColor4f
     * }
     */
    public static void glad_glColor4f(MemorySegment varValue) {
        glad_glColor4f$constants.SEGMENT.set(glad_glColor4f$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4f$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4f").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FPROC glad_debug_glColor4f
     * }
     */
    public static AddressLayout glad_debug_glColor4f$layout() {
        return glad_debug_glColor4f$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FPROC glad_debug_glColor4f
     * }
     */
    public static MemorySegment glad_debug_glColor4f$segment() {
        return glad_debug_glColor4f$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FPROC glad_debug_glColor4f
     * }
     */
    public static MemorySegment glad_debug_glColor4f() {
        return glad_debug_glColor4f$constants.SEGMENT.get(glad_debug_glColor4f$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FPROC glad_debug_glColor4f
     * }
     */
    public static void glad_debug_glColor4f(MemorySegment varValue) {
        glad_debug_glColor4f$constants.SEGMENT.set(glad_debug_glColor4f$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4fv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4fv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FVPROC glad_glColor4fv
     * }
     */
    public static AddressLayout glad_glColor4fv$layout() {
        return glad_glColor4fv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FVPROC glad_glColor4fv
     * }
     */
    public static MemorySegment glad_glColor4fv$segment() {
        return glad_glColor4fv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FVPROC glad_glColor4fv
     * }
     */
    public static MemorySegment glad_glColor4fv() {
        return glad_glColor4fv$constants.SEGMENT.get(glad_glColor4fv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FVPROC glad_glColor4fv
     * }
     */
    public static void glad_glColor4fv(MemorySegment varValue) {
        glad_glColor4fv$constants.SEGMENT.set(glad_glColor4fv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4fv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4fv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FVPROC glad_debug_glColor4fv
     * }
     */
    public static AddressLayout glad_debug_glColor4fv$layout() {
        return glad_debug_glColor4fv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FVPROC glad_debug_glColor4fv
     * }
     */
    public static MemorySegment glad_debug_glColor4fv$segment() {
        return glad_debug_glColor4fv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FVPROC glad_debug_glColor4fv
     * }
     */
    public static MemorySegment glad_debug_glColor4fv() {
        return glad_debug_glColor4fv$constants.SEGMENT.get(glad_debug_glColor4fv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4FVPROC glad_debug_glColor4fv
     * }
     */
    public static void glad_debug_glColor4fv(MemorySegment varValue) {
        glad_debug_glColor4fv$constants.SEGMENT.set(glad_debug_glColor4fv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4i$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4i").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IPROC glad_glColor4i
     * }
     */
    public static AddressLayout glad_glColor4i$layout() {
        return glad_glColor4i$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IPROC glad_glColor4i
     * }
     */
    public static MemorySegment glad_glColor4i$segment() {
        return glad_glColor4i$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IPROC glad_glColor4i
     * }
     */
    public static MemorySegment glad_glColor4i() {
        return glad_glColor4i$constants.SEGMENT.get(glad_glColor4i$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IPROC glad_glColor4i
     * }
     */
    public static void glad_glColor4i(MemorySegment varValue) {
        glad_glColor4i$constants.SEGMENT.set(glad_glColor4i$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4i$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4i").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IPROC glad_debug_glColor4i
     * }
     */
    public static AddressLayout glad_debug_glColor4i$layout() {
        return glad_debug_glColor4i$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IPROC glad_debug_glColor4i
     * }
     */
    public static MemorySegment glad_debug_glColor4i$segment() {
        return glad_debug_glColor4i$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IPROC glad_debug_glColor4i
     * }
     */
    public static MemorySegment glad_debug_glColor4i() {
        return glad_debug_glColor4i$constants.SEGMENT.get(glad_debug_glColor4i$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IPROC glad_debug_glColor4i
     * }
     */
    public static void glad_debug_glColor4i(MemorySegment varValue) {
        glad_debug_glColor4i$constants.SEGMENT.set(glad_debug_glColor4i$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4iv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4iv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IVPROC glad_glColor4iv
     * }
     */
    public static AddressLayout glad_glColor4iv$layout() {
        return glad_glColor4iv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IVPROC glad_glColor4iv
     * }
     */
    public static MemorySegment glad_glColor4iv$segment() {
        return glad_glColor4iv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IVPROC glad_glColor4iv
     * }
     */
    public static MemorySegment glad_glColor4iv() {
        return glad_glColor4iv$constants.SEGMENT.get(glad_glColor4iv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IVPROC glad_glColor4iv
     * }
     */
    public static void glad_glColor4iv(MemorySegment varValue) {
        glad_glColor4iv$constants.SEGMENT.set(glad_glColor4iv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4iv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4iv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IVPROC glad_debug_glColor4iv
     * }
     */
    public static AddressLayout glad_debug_glColor4iv$layout() {
        return glad_debug_glColor4iv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IVPROC glad_debug_glColor4iv
     * }
     */
    public static MemorySegment glad_debug_glColor4iv$segment() {
        return glad_debug_glColor4iv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IVPROC glad_debug_glColor4iv
     * }
     */
    public static MemorySegment glad_debug_glColor4iv() {
        return glad_debug_glColor4iv$constants.SEGMENT.get(glad_debug_glColor4iv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4IVPROC glad_debug_glColor4iv
     * }
     */
    public static void glad_debug_glColor4iv(MemorySegment varValue) {
        glad_debug_glColor4iv$constants.SEGMENT.set(glad_debug_glColor4iv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4s$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4s").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SPROC glad_glColor4s
     * }
     */
    public static AddressLayout glad_glColor4s$layout() {
        return glad_glColor4s$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SPROC glad_glColor4s
     * }
     */
    public static MemorySegment glad_glColor4s$segment() {
        return glad_glColor4s$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SPROC glad_glColor4s
     * }
     */
    public static MemorySegment glad_glColor4s() {
        return glad_glColor4s$constants.SEGMENT.get(glad_glColor4s$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SPROC glad_glColor4s
     * }
     */
    public static void glad_glColor4s(MemorySegment varValue) {
        glad_glColor4s$constants.SEGMENT.set(glad_glColor4s$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4s$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4s").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SPROC glad_debug_glColor4s
     * }
     */
    public static AddressLayout glad_debug_glColor4s$layout() {
        return glad_debug_glColor4s$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SPROC glad_debug_glColor4s
     * }
     */
    public static MemorySegment glad_debug_glColor4s$segment() {
        return glad_debug_glColor4s$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SPROC glad_debug_glColor4s
     * }
     */
    public static MemorySegment glad_debug_glColor4s() {
        return glad_debug_glColor4s$constants.SEGMENT.get(glad_debug_glColor4s$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SPROC glad_debug_glColor4s
     * }
     */
    public static void glad_debug_glColor4s(MemorySegment varValue) {
        glad_debug_glColor4s$constants.SEGMENT.set(glad_debug_glColor4s$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4sv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4sv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SVPROC glad_glColor4sv
     * }
     */
    public static AddressLayout glad_glColor4sv$layout() {
        return glad_glColor4sv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SVPROC glad_glColor4sv
     * }
     */
    public static MemorySegment glad_glColor4sv$segment() {
        return glad_glColor4sv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SVPROC glad_glColor4sv
     * }
     */
    public static MemorySegment glad_glColor4sv() {
        return glad_glColor4sv$constants.SEGMENT.get(glad_glColor4sv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SVPROC glad_glColor4sv
     * }
     */
    public static void glad_glColor4sv(MemorySegment varValue) {
        glad_glColor4sv$constants.SEGMENT.set(glad_glColor4sv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4sv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4sv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SVPROC glad_debug_glColor4sv
     * }
     */
    public static AddressLayout glad_debug_glColor4sv$layout() {
        return glad_debug_glColor4sv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SVPROC glad_debug_glColor4sv
     * }
     */
    public static MemorySegment glad_debug_glColor4sv$segment() {
        return glad_debug_glColor4sv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SVPROC glad_debug_glColor4sv
     * }
     */
    public static MemorySegment glad_debug_glColor4sv() {
        return glad_debug_glColor4sv$constants.SEGMENT.get(glad_debug_glColor4sv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4SVPROC glad_debug_glColor4sv
     * }
     */
    public static void glad_debug_glColor4sv(MemorySegment varValue) {
        glad_debug_glColor4sv$constants.SEGMENT.set(glad_debug_glColor4sv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4ub$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4ub").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBPROC glad_glColor4ub
     * }
     */
    public static AddressLayout glad_glColor4ub$layout() {
        return glad_glColor4ub$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBPROC glad_glColor4ub
     * }
     */
    public static MemorySegment glad_glColor4ub$segment() {
        return glad_glColor4ub$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBPROC glad_glColor4ub
     * }
     */
    public static MemorySegment glad_glColor4ub() {
        return glad_glColor4ub$constants.SEGMENT.get(glad_glColor4ub$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBPROC glad_glColor4ub
     * }
     */
    public static void glad_glColor4ub(MemorySegment varValue) {
        glad_glColor4ub$constants.SEGMENT.set(glad_glColor4ub$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4ub$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4ub").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBPROC glad_debug_glColor4ub
     * }
     */
    public static AddressLayout glad_debug_glColor4ub$layout() {
        return glad_debug_glColor4ub$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBPROC glad_debug_glColor4ub
     * }
     */
    public static MemorySegment glad_debug_glColor4ub$segment() {
        return glad_debug_glColor4ub$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBPROC glad_debug_glColor4ub
     * }
     */
    public static MemorySegment glad_debug_glColor4ub() {
        return glad_debug_glColor4ub$constants.SEGMENT.get(glad_debug_glColor4ub$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBPROC glad_debug_glColor4ub
     * }
     */
    public static void glad_debug_glColor4ub(MemorySegment varValue) {
        glad_debug_glColor4ub$constants.SEGMENT.set(glad_debug_glColor4ub$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4ubv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4ubv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBVPROC glad_glColor4ubv
     * }
     */
    public static AddressLayout glad_glColor4ubv$layout() {
        return glad_glColor4ubv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBVPROC glad_glColor4ubv
     * }
     */
    public static MemorySegment glad_glColor4ubv$segment() {
        return glad_glColor4ubv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBVPROC glad_glColor4ubv
     * }
     */
    public static MemorySegment glad_glColor4ubv() {
        return glad_glColor4ubv$constants.SEGMENT.get(glad_glColor4ubv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBVPROC glad_glColor4ubv
     * }
     */
    public static void glad_glColor4ubv(MemorySegment varValue) {
        glad_glColor4ubv$constants.SEGMENT.set(glad_glColor4ubv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4ubv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4ubv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBVPROC glad_debug_glColor4ubv
     * }
     */
    public static AddressLayout glad_debug_glColor4ubv$layout() {
        return glad_debug_glColor4ubv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBVPROC glad_debug_glColor4ubv
     * }
     */
    public static MemorySegment glad_debug_glColor4ubv$segment() {
        return glad_debug_glColor4ubv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBVPROC glad_debug_glColor4ubv
     * }
     */
    public static MemorySegment glad_debug_glColor4ubv() {
        return glad_debug_glColor4ubv$constants.SEGMENT.get(glad_debug_glColor4ubv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UBVPROC glad_debug_glColor4ubv
     * }
     */
    public static void glad_debug_glColor4ubv(MemorySegment varValue) {
        glad_debug_glColor4ubv$constants.SEGMENT.set(glad_debug_glColor4ubv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIPROC glad_glColor4ui
     * }
     */
    public static AddressLayout glad_glColor4ui$layout() {
        return glad_glColor4ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIPROC glad_glColor4ui
     * }
     */
    public static MemorySegment glad_glColor4ui$segment() {
        return glad_glColor4ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIPROC glad_glColor4ui
     * }
     */
    public static MemorySegment glad_glColor4ui() {
        return glad_glColor4ui$constants.SEGMENT.get(glad_glColor4ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIPROC glad_glColor4ui
     * }
     */
    public static void glad_glColor4ui(MemorySegment varValue) {
        glad_glColor4ui$constants.SEGMENT.set(glad_glColor4ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIPROC glad_debug_glColor4ui
     * }
     */
    public static AddressLayout glad_debug_glColor4ui$layout() {
        return glad_debug_glColor4ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIPROC glad_debug_glColor4ui
     * }
     */
    public static MemorySegment glad_debug_glColor4ui$segment() {
        return glad_debug_glColor4ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIPROC glad_debug_glColor4ui
     * }
     */
    public static MemorySegment glad_debug_glColor4ui() {
        return glad_debug_glColor4ui$constants.SEGMENT.get(glad_debug_glColor4ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIPROC glad_debug_glColor4ui
     * }
     */
    public static void glad_debug_glColor4ui(MemorySegment varValue) {
        glad_debug_glColor4ui$constants.SEGMENT.set(glad_debug_glColor4ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIVPROC glad_glColor4uiv
     * }
     */
    public static AddressLayout glad_glColor4uiv$layout() {
        return glad_glColor4uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIVPROC glad_glColor4uiv
     * }
     */
    public static MemorySegment glad_glColor4uiv$segment() {
        return glad_glColor4uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIVPROC glad_glColor4uiv
     * }
     */
    public static MemorySegment glad_glColor4uiv() {
        return glad_glColor4uiv$constants.SEGMENT.get(glad_glColor4uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIVPROC glad_glColor4uiv
     * }
     */
    public static void glad_glColor4uiv(MemorySegment varValue) {
        glad_glColor4uiv$constants.SEGMENT.set(glad_glColor4uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIVPROC glad_debug_glColor4uiv
     * }
     */
    public static AddressLayout glad_debug_glColor4uiv$layout() {
        return glad_debug_glColor4uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIVPROC glad_debug_glColor4uiv
     * }
     */
    public static MemorySegment glad_debug_glColor4uiv$segment() {
        return glad_debug_glColor4uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIVPROC glad_debug_glColor4uiv
     * }
     */
    public static MemorySegment glad_debug_glColor4uiv() {
        return glad_debug_glColor4uiv$constants.SEGMENT.get(glad_debug_glColor4uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4UIVPROC glad_debug_glColor4uiv
     * }
     */
    public static void glad_debug_glColor4uiv(MemorySegment varValue) {
        glad_debug_glColor4uiv$constants.SEGMENT.set(glad_debug_glColor4uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4us$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4us").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USPROC glad_glColor4us
     * }
     */
    public static AddressLayout glad_glColor4us$layout() {
        return glad_glColor4us$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USPROC glad_glColor4us
     * }
     */
    public static MemorySegment glad_glColor4us$segment() {
        return glad_glColor4us$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USPROC glad_glColor4us
     * }
     */
    public static MemorySegment glad_glColor4us() {
        return glad_glColor4us$constants.SEGMENT.get(glad_glColor4us$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USPROC glad_glColor4us
     * }
     */
    public static void glad_glColor4us(MemorySegment varValue) {
        glad_glColor4us$constants.SEGMENT.set(glad_glColor4us$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4us$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4us").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USPROC glad_debug_glColor4us
     * }
     */
    public static AddressLayout glad_debug_glColor4us$layout() {
        return glad_debug_glColor4us$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USPROC glad_debug_glColor4us
     * }
     */
    public static MemorySegment glad_debug_glColor4us$segment() {
        return glad_debug_glColor4us$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USPROC glad_debug_glColor4us
     * }
     */
    public static MemorySegment glad_debug_glColor4us() {
        return glad_debug_glColor4us$constants.SEGMENT.get(glad_debug_glColor4us$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USPROC glad_debug_glColor4us
     * }
     */
    public static void glad_debug_glColor4us(MemorySegment varValue) {
        glad_debug_glColor4us$constants.SEGMENT.set(glad_debug_glColor4us$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColor4usv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColor4usv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USVPROC glad_glColor4usv
     * }
     */
    public static AddressLayout glad_glColor4usv$layout() {
        return glad_glColor4usv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USVPROC glad_glColor4usv
     * }
     */
    public static MemorySegment glad_glColor4usv$segment() {
        return glad_glColor4usv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USVPROC glad_glColor4usv
     * }
     */
    public static MemorySegment glad_glColor4usv() {
        return glad_glColor4usv$constants.SEGMENT.get(glad_glColor4usv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USVPROC glad_glColor4usv
     * }
     */
    public static void glad_glColor4usv(MemorySegment varValue) {
        glad_glColor4usv$constants.SEGMENT.set(glad_glColor4usv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColor4usv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColor4usv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USVPROC glad_debug_glColor4usv
     * }
     */
    public static AddressLayout glad_debug_glColor4usv$layout() {
        return glad_debug_glColor4usv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USVPROC glad_debug_glColor4usv
     * }
     */
    public static MemorySegment glad_debug_glColor4usv$segment() {
        return glad_debug_glColor4usv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USVPROC glad_debug_glColor4usv
     * }
     */
    public static MemorySegment glad_debug_glColor4usv() {
        return glad_debug_glColor4usv$constants.SEGMENT.get(glad_debug_glColor4usv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLOR4USVPROC glad_debug_glColor4usv
     * }
     */
    public static void glad_debug_glColor4usv(MemorySegment varValue) {
        glad_debug_glColor4usv$constants.SEGMENT.set(glad_debug_glColor4usv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorMask$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorMask").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKPROC glad_glColorMask
     * }
     */
    public static AddressLayout glad_glColorMask$layout() {
        return glad_glColorMask$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKPROC glad_glColorMask
     * }
     */
    public static MemorySegment glad_glColorMask$segment() {
        return glad_glColorMask$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKPROC glad_glColorMask
     * }
     */
    public static MemorySegment glad_glColorMask() {
        return glad_glColorMask$constants.SEGMENT.get(glad_glColorMask$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKPROC glad_glColorMask
     * }
     */
    public static void glad_glColorMask(MemorySegment varValue) {
        glad_glColorMask$constants.SEGMENT.set(glad_glColorMask$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorMask$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorMask").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKPROC glad_debug_glColorMask
     * }
     */
    public static AddressLayout glad_debug_glColorMask$layout() {
        return glad_debug_glColorMask$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKPROC glad_debug_glColorMask
     * }
     */
    public static MemorySegment glad_debug_glColorMask$segment() {
        return glad_debug_glColorMask$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKPROC glad_debug_glColorMask
     * }
     */
    public static MemorySegment glad_debug_glColorMask() {
        return glad_debug_glColorMask$constants.SEGMENT.get(glad_debug_glColorMask$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKPROC glad_debug_glColorMask
     * }
     */
    public static void glad_debug_glColorMask(MemorySegment varValue) {
        glad_debug_glColorMask$constants.SEGMENT.set(glad_debug_glColorMask$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorMaskIndexedEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorMaskIndexedEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKINDEXEDEXTPROC glad_glColorMaskIndexedEXT
     * }
     */
    public static AddressLayout glad_glColorMaskIndexedEXT$layout() {
        return glad_glColorMaskIndexedEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKINDEXEDEXTPROC glad_glColorMaskIndexedEXT
     * }
     */
    public static MemorySegment glad_glColorMaskIndexedEXT$segment() {
        return glad_glColorMaskIndexedEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKINDEXEDEXTPROC glad_glColorMaskIndexedEXT
     * }
     */
    public static MemorySegment glad_glColorMaskIndexedEXT() {
        return glad_glColorMaskIndexedEXT$constants.SEGMENT.get(glad_glColorMaskIndexedEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKINDEXEDEXTPROC glad_glColorMaskIndexedEXT
     * }
     */
    public static void glad_glColorMaskIndexedEXT(MemorySegment varValue) {
        glad_glColorMaskIndexedEXT$constants.SEGMENT.set(glad_glColorMaskIndexedEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorMaskIndexedEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorMaskIndexedEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKINDEXEDEXTPROC glad_debug_glColorMaskIndexedEXT
     * }
     */
    public static AddressLayout glad_debug_glColorMaskIndexedEXT$layout() {
        return glad_debug_glColorMaskIndexedEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKINDEXEDEXTPROC glad_debug_glColorMaskIndexedEXT
     * }
     */
    public static MemorySegment glad_debug_glColorMaskIndexedEXT$segment() {
        return glad_debug_glColorMaskIndexedEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKINDEXEDEXTPROC glad_debug_glColorMaskIndexedEXT
     * }
     */
    public static MemorySegment glad_debug_glColorMaskIndexedEXT() {
        return glad_debug_glColorMaskIndexedEXT$constants.SEGMENT.get(glad_debug_glColorMaskIndexedEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKINDEXEDEXTPROC glad_debug_glColorMaskIndexedEXT
     * }
     */
    public static void glad_debug_glColorMaskIndexedEXT(MemorySegment varValue) {
        glad_debug_glColorMaskIndexedEXT$constants.SEGMENT.set(glad_debug_glColorMaskIndexedEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorMaski$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorMaski").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKIPROC glad_glColorMaski
     * }
     */
    public static AddressLayout glad_glColorMaski$layout() {
        return glad_glColorMaski$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKIPROC glad_glColorMaski
     * }
     */
    public static MemorySegment glad_glColorMaski$segment() {
        return glad_glColorMaski$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKIPROC glad_glColorMaski
     * }
     */
    public static MemorySegment glad_glColorMaski() {
        return glad_glColorMaski$constants.SEGMENT.get(glad_glColorMaski$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKIPROC glad_glColorMaski
     * }
     */
    public static void glad_glColorMaski(MemorySegment varValue) {
        glad_glColorMaski$constants.SEGMENT.set(glad_glColorMaski$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorMaski$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorMaski").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKIPROC glad_debug_glColorMaski
     * }
     */
    public static AddressLayout glad_debug_glColorMaski$layout() {
        return glad_debug_glColorMaski$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKIPROC glad_debug_glColorMaski
     * }
     */
    public static MemorySegment glad_debug_glColorMaski$segment() {
        return glad_debug_glColorMaski$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKIPROC glad_debug_glColorMaski
     * }
     */
    public static MemorySegment glad_debug_glColorMaski() {
        return glad_debug_glColorMaski$constants.SEGMENT.get(glad_debug_glColorMaski$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMASKIPROC glad_debug_glColorMaski
     * }
     */
    public static void glad_debug_glColorMaski(MemorySegment varValue) {
        glad_debug_glColorMaski$constants.SEGMENT.set(glad_debug_glColorMaski$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorMaterial$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorMaterial").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMATERIALPROC glad_glColorMaterial
     * }
     */
    public static AddressLayout glad_glColorMaterial$layout() {
        return glad_glColorMaterial$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMATERIALPROC glad_glColorMaterial
     * }
     */
    public static MemorySegment glad_glColorMaterial$segment() {
        return glad_glColorMaterial$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMATERIALPROC glad_glColorMaterial
     * }
     */
    public static MemorySegment glad_glColorMaterial() {
        return glad_glColorMaterial$constants.SEGMENT.get(glad_glColorMaterial$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMATERIALPROC glad_glColorMaterial
     * }
     */
    public static void glad_glColorMaterial(MemorySegment varValue) {
        glad_glColorMaterial$constants.SEGMENT.set(glad_glColorMaterial$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorMaterial$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorMaterial").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMATERIALPROC glad_debug_glColorMaterial
     * }
     */
    public static AddressLayout glad_debug_glColorMaterial$layout() {
        return glad_debug_glColorMaterial$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMATERIALPROC glad_debug_glColorMaterial
     * }
     */
    public static MemorySegment glad_debug_glColorMaterial$segment() {
        return glad_debug_glColorMaterial$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMATERIALPROC glad_debug_glColorMaterial
     * }
     */
    public static MemorySegment glad_debug_glColorMaterial() {
        return glad_debug_glColorMaterial$constants.SEGMENT.get(glad_debug_glColorMaterial$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORMATERIALPROC glad_debug_glColorMaterial
     * }
     */
    public static void glad_debug_glColorMaterial(MemorySegment varValue) {
        glad_debug_glColorMaterial$constants.SEGMENT.set(glad_debug_glColorMaterial$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorP3ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorP3ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIPROC glad_glColorP3ui
     * }
     */
    public static AddressLayout glad_glColorP3ui$layout() {
        return glad_glColorP3ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIPROC glad_glColorP3ui
     * }
     */
    public static MemorySegment glad_glColorP3ui$segment() {
        return glad_glColorP3ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIPROC glad_glColorP3ui
     * }
     */
    public static MemorySegment glad_glColorP3ui() {
        return glad_glColorP3ui$constants.SEGMENT.get(glad_glColorP3ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIPROC glad_glColorP3ui
     * }
     */
    public static void glad_glColorP3ui(MemorySegment varValue) {
        glad_glColorP3ui$constants.SEGMENT.set(glad_glColorP3ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorP3ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorP3ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIPROC glad_debug_glColorP3ui
     * }
     */
    public static AddressLayout glad_debug_glColorP3ui$layout() {
        return glad_debug_glColorP3ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIPROC glad_debug_glColorP3ui
     * }
     */
    public static MemorySegment glad_debug_glColorP3ui$segment() {
        return glad_debug_glColorP3ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIPROC glad_debug_glColorP3ui
     * }
     */
    public static MemorySegment glad_debug_glColorP3ui() {
        return glad_debug_glColorP3ui$constants.SEGMENT.get(glad_debug_glColorP3ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIPROC glad_debug_glColorP3ui
     * }
     */
    public static void glad_debug_glColorP3ui(MemorySegment varValue) {
        glad_debug_glColorP3ui$constants.SEGMENT.set(glad_debug_glColorP3ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorP3uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorP3uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIVPROC glad_glColorP3uiv
     * }
     */
    public static AddressLayout glad_glColorP3uiv$layout() {
        return glad_glColorP3uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIVPROC glad_glColorP3uiv
     * }
     */
    public static MemorySegment glad_glColorP3uiv$segment() {
        return glad_glColorP3uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIVPROC glad_glColorP3uiv
     * }
     */
    public static MemorySegment glad_glColorP3uiv() {
        return glad_glColorP3uiv$constants.SEGMENT.get(glad_glColorP3uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIVPROC glad_glColorP3uiv
     * }
     */
    public static void glad_glColorP3uiv(MemorySegment varValue) {
        glad_glColorP3uiv$constants.SEGMENT.set(glad_glColorP3uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorP3uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorP3uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIVPROC glad_debug_glColorP3uiv
     * }
     */
    public static AddressLayout glad_debug_glColorP3uiv$layout() {
        return glad_debug_glColorP3uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIVPROC glad_debug_glColorP3uiv
     * }
     */
    public static MemorySegment glad_debug_glColorP3uiv$segment() {
        return glad_debug_glColorP3uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIVPROC glad_debug_glColorP3uiv
     * }
     */
    public static MemorySegment glad_debug_glColorP3uiv() {
        return glad_debug_glColorP3uiv$constants.SEGMENT.get(glad_debug_glColorP3uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP3UIVPROC glad_debug_glColorP3uiv
     * }
     */
    public static void glad_debug_glColorP3uiv(MemorySegment varValue) {
        glad_debug_glColorP3uiv$constants.SEGMENT.set(glad_debug_glColorP3uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorP4ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorP4ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIPROC glad_glColorP4ui
     * }
     */
    public static AddressLayout glad_glColorP4ui$layout() {
        return glad_glColorP4ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIPROC glad_glColorP4ui
     * }
     */
    public static MemorySegment glad_glColorP4ui$segment() {
        return glad_glColorP4ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIPROC glad_glColorP4ui
     * }
     */
    public static MemorySegment glad_glColorP4ui() {
        return glad_glColorP4ui$constants.SEGMENT.get(glad_glColorP4ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIPROC glad_glColorP4ui
     * }
     */
    public static void glad_glColorP4ui(MemorySegment varValue) {
        glad_glColorP4ui$constants.SEGMENT.set(glad_glColorP4ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorP4ui$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorP4ui").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIPROC glad_debug_glColorP4ui
     * }
     */
    public static AddressLayout glad_debug_glColorP4ui$layout() {
        return glad_debug_glColorP4ui$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIPROC glad_debug_glColorP4ui
     * }
     */
    public static MemorySegment glad_debug_glColorP4ui$segment() {
        return glad_debug_glColorP4ui$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIPROC glad_debug_glColorP4ui
     * }
     */
    public static MemorySegment glad_debug_glColorP4ui() {
        return glad_debug_glColorP4ui$constants.SEGMENT.get(glad_debug_glColorP4ui$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIPROC glad_debug_glColorP4ui
     * }
     */
    public static void glad_debug_glColorP4ui(MemorySegment varValue) {
        glad_debug_glColorP4ui$constants.SEGMENT.set(glad_debug_glColorP4ui$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorP4uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorP4uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIVPROC glad_glColorP4uiv
     * }
     */
    public static AddressLayout glad_glColorP4uiv$layout() {
        return glad_glColorP4uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIVPROC glad_glColorP4uiv
     * }
     */
    public static MemorySegment glad_glColorP4uiv$segment() {
        return glad_glColorP4uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIVPROC glad_glColorP4uiv
     * }
     */
    public static MemorySegment glad_glColorP4uiv() {
        return glad_glColorP4uiv$constants.SEGMENT.get(glad_glColorP4uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIVPROC glad_glColorP4uiv
     * }
     */
    public static void glad_glColorP4uiv(MemorySegment varValue) {
        glad_glColorP4uiv$constants.SEGMENT.set(glad_glColorP4uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorP4uiv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorP4uiv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIVPROC glad_debug_glColorP4uiv
     * }
     */
    public static AddressLayout glad_debug_glColorP4uiv$layout() {
        return glad_debug_glColorP4uiv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIVPROC glad_debug_glColorP4uiv
     * }
     */
    public static MemorySegment glad_debug_glColorP4uiv$segment() {
        return glad_debug_glColorP4uiv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIVPROC glad_debug_glColorP4uiv
     * }
     */
    public static MemorySegment glad_debug_glColorP4uiv() {
        return glad_debug_glColorP4uiv$constants.SEGMENT.get(glad_debug_glColorP4uiv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORP4UIVPROC glad_debug_glColorP4uiv
     * }
     */
    public static void glad_debug_glColorP4uiv(MemorySegment varValue) {
        glad_debug_glColorP4uiv$constants.SEGMENT.set(glad_debug_glColorP4uiv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorPointer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorPointer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTERPROC glad_glColorPointer
     * }
     */
    public static AddressLayout glad_glColorPointer$layout() {
        return glad_glColorPointer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTERPROC glad_glColorPointer
     * }
     */
    public static MemorySegment glad_glColorPointer$segment() {
        return glad_glColorPointer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTERPROC glad_glColorPointer
     * }
     */
    public static MemorySegment glad_glColorPointer() {
        return glad_glColorPointer$constants.SEGMENT.get(glad_glColorPointer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTERPROC glad_glColorPointer
     * }
     */
    public static void glad_glColorPointer(MemorySegment varValue) {
        glad_glColorPointer$constants.SEGMENT.set(glad_glColorPointer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorPointer$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorPointer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTERPROC glad_debug_glColorPointer
     * }
     */
    public static AddressLayout glad_debug_glColorPointer$layout() {
        return glad_debug_glColorPointer$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTERPROC glad_debug_glColorPointer
     * }
     */
    public static MemorySegment glad_debug_glColorPointer$segment() {
        return glad_debug_glColorPointer$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTERPROC glad_debug_glColorPointer
     * }
     */
    public static MemorySegment glad_debug_glColorPointer() {
        return glad_debug_glColorPointer$constants.SEGMENT.get(glad_debug_glColorPointer$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTERPROC glad_debug_glColorPointer
     * }
     */
    public static void glad_debug_glColorPointer(MemorySegment varValue) {
        glad_debug_glColorPointer$constants.SEGMENT.set(glad_debug_glColorPointer$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorPointerEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorPointerEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTEREXTPROC glad_glColorPointerEXT
     * }
     */
    public static AddressLayout glad_glColorPointerEXT$layout() {
        return glad_glColorPointerEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTEREXTPROC glad_glColorPointerEXT
     * }
     */
    public static MemorySegment glad_glColorPointerEXT$segment() {
        return glad_glColorPointerEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTEREXTPROC glad_glColorPointerEXT
     * }
     */
    public static MemorySegment glad_glColorPointerEXT() {
        return glad_glColorPointerEXT$constants.SEGMENT.get(glad_glColorPointerEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTEREXTPROC glad_glColorPointerEXT
     * }
     */
    public static void glad_glColorPointerEXT(MemorySegment varValue) {
        glad_glColorPointerEXT$constants.SEGMENT.set(glad_glColorPointerEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorPointerEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorPointerEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTEREXTPROC glad_debug_glColorPointerEXT
     * }
     */
    public static AddressLayout glad_debug_glColorPointerEXT$layout() {
        return glad_debug_glColorPointerEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTEREXTPROC glad_debug_glColorPointerEXT
     * }
     */
    public static MemorySegment glad_debug_glColorPointerEXT$segment() {
        return glad_debug_glColorPointerEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTEREXTPROC glad_debug_glColorPointerEXT
     * }
     */
    public static MemorySegment glad_debug_glColorPointerEXT() {
        return glad_debug_glColorPointerEXT$constants.SEGMENT.get(glad_debug_glColorPointerEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORPOINTEREXTPROC glad_debug_glColorPointerEXT
     * }
     */
    public static void glad_debug_glColorPointerEXT(MemorySegment varValue) {
        glad_debug_glColorPointerEXT$constants.SEGMENT.set(glad_debug_glColorPointerEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorSubTable$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorSubTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORSUBTABLEPROC glad_glColorSubTable
     * }
     */
    public static AddressLayout glad_glColorSubTable$layout() {
        return glad_glColorSubTable$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORSUBTABLEPROC glad_glColorSubTable
     * }
     */
    public static MemorySegment glad_glColorSubTable$segment() {
        return glad_glColorSubTable$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORSUBTABLEPROC glad_glColorSubTable
     * }
     */
    public static MemorySegment glad_glColorSubTable() {
        return glad_glColorSubTable$constants.SEGMENT.get(glad_glColorSubTable$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORSUBTABLEPROC glad_glColorSubTable
     * }
     */
    public static void glad_glColorSubTable(MemorySegment varValue) {
        glad_glColorSubTable$constants.SEGMENT.set(glad_glColorSubTable$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorSubTable$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorSubTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORSUBTABLEPROC glad_debug_glColorSubTable
     * }
     */
    public static AddressLayout glad_debug_glColorSubTable$layout() {
        return glad_debug_glColorSubTable$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORSUBTABLEPROC glad_debug_glColorSubTable
     * }
     */
    public static MemorySegment glad_debug_glColorSubTable$segment() {
        return glad_debug_glColorSubTable$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORSUBTABLEPROC glad_debug_glColorSubTable
     * }
     */
    public static MemorySegment glad_debug_glColorSubTable() {
        return glad_debug_glColorSubTable$constants.SEGMENT.get(glad_debug_glColorSubTable$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORSUBTABLEPROC glad_debug_glColorSubTable
     * }
     */
    public static void glad_debug_glColorSubTable(MemorySegment varValue) {
        glad_debug_glColorSubTable$constants.SEGMENT.set(glad_debug_glColorSubTable$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorTable$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPROC glad_glColorTable
     * }
     */
    public static AddressLayout glad_glColorTable$layout() {
        return glad_glColorTable$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPROC glad_glColorTable
     * }
     */
    public static MemorySegment glad_glColorTable$segment() {
        return glad_glColorTable$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPROC glad_glColorTable
     * }
     */
    public static MemorySegment glad_glColorTable() {
        return glad_glColorTable$constants.SEGMENT.get(glad_glColorTable$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPROC glad_glColorTable
     * }
     */
    public static void glad_glColorTable(MemorySegment varValue) {
        glad_glColorTable$constants.SEGMENT.set(glad_glColorTable$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorTable$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPROC glad_debug_glColorTable
     * }
     */
    public static AddressLayout glad_debug_glColorTable$layout() {
        return glad_debug_glColorTable$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPROC glad_debug_glColorTable
     * }
     */
    public static MemorySegment glad_debug_glColorTable$segment() {
        return glad_debug_glColorTable$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPROC glad_debug_glColorTable
     * }
     */
    public static MemorySegment glad_debug_glColorTable() {
        return glad_debug_glColorTable$constants.SEGMENT.get(glad_debug_glColorTable$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPROC glad_debug_glColorTable
     * }
     */
    public static void glad_debug_glColorTable(MemorySegment varValue) {
        glad_debug_glColorTable$constants.SEGMENT.set(glad_debug_glColorTable$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorTableParameterfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorTableParameterfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv
     * }
     */
    public static AddressLayout glad_glColorTableParameterfv$layout() {
        return glad_glColorTableParameterfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv
     * }
     */
    public static MemorySegment glad_glColorTableParameterfv$segment() {
        return glad_glColorTableParameterfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv
     * }
     */
    public static MemorySegment glad_glColorTableParameterfv() {
        return glad_glColorTableParameterfv$constants.SEGMENT.get(glad_glColorTableParameterfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv
     * }
     */
    public static void glad_glColorTableParameterfv(MemorySegment varValue) {
        glad_glColorTableParameterfv$constants.SEGMENT.set(glad_glColorTableParameterfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorTableParameterfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorTableParameterfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERFVPROC glad_debug_glColorTableParameterfv
     * }
     */
    public static AddressLayout glad_debug_glColorTableParameterfv$layout() {
        return glad_debug_glColorTableParameterfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERFVPROC glad_debug_glColorTableParameterfv
     * }
     */
    public static MemorySegment glad_debug_glColorTableParameterfv$segment() {
        return glad_debug_glColorTableParameterfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERFVPROC glad_debug_glColorTableParameterfv
     * }
     */
    public static MemorySegment glad_debug_glColorTableParameterfv() {
        return glad_debug_glColorTableParameterfv$constants.SEGMENT.get(glad_debug_glColorTableParameterfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERFVPROC glad_debug_glColorTableParameterfv
     * }
     */
    public static void glad_debug_glColorTableParameterfv(MemorySegment varValue) {
        glad_debug_glColorTableParameterfv$constants.SEGMENT.set(glad_debug_glColorTableParameterfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glColorTableParameteriv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glColorTableParameteriv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv
     * }
     */
    public static AddressLayout glad_glColorTableParameteriv$layout() {
        return glad_glColorTableParameteriv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv
     * }
     */
    public static MemorySegment glad_glColorTableParameteriv$segment() {
        return glad_glColorTableParameteriv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv
     * }
     */
    public static MemorySegment glad_glColorTableParameteriv() {
        return glad_glColorTableParameteriv$constants.SEGMENT.get(glad_glColorTableParameteriv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv
     * }
     */
    public static void glad_glColorTableParameteriv(MemorySegment varValue) {
        glad_glColorTableParameteriv$constants.SEGMENT.set(glad_glColorTableParameteriv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glColorTableParameteriv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glColorTableParameteriv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERIVPROC glad_debug_glColorTableParameteriv
     * }
     */
    public static AddressLayout glad_debug_glColorTableParameteriv$layout() {
        return glad_debug_glColorTableParameteriv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERIVPROC glad_debug_glColorTableParameteriv
     * }
     */
    public static MemorySegment glad_debug_glColorTableParameteriv$segment() {
        return glad_debug_glColorTableParameteriv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERIVPROC glad_debug_glColorTableParameteriv
     * }
     */
    public static MemorySegment glad_debug_glColorTableParameteriv() {
        return glad_debug_glColorTableParameteriv$constants.SEGMENT.get(glad_debug_glColorTableParameteriv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOLORTABLEPARAMETERIVPROC glad_debug_glColorTableParameteriv
     * }
     */
    public static void glad_debug_glColorTableParameteriv(MemorySegment varValue) {
        glad_debug_glColorTableParameteriv$constants.SEGMENT.set(glad_debug_glColorTableParameteriv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompileShader$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompileShader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERPROC glad_glCompileShader
     * }
     */
    public static AddressLayout glad_glCompileShader$layout() {
        return glad_glCompileShader$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERPROC glad_glCompileShader
     * }
     */
    public static MemorySegment glad_glCompileShader$segment() {
        return glad_glCompileShader$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERPROC glad_glCompileShader
     * }
     */
    public static MemorySegment glad_glCompileShader() {
        return glad_glCompileShader$constants.SEGMENT.get(glad_glCompileShader$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERPROC glad_glCompileShader
     * }
     */
    public static void glad_glCompileShader(MemorySegment varValue) {
        glad_glCompileShader$constants.SEGMENT.set(glad_glCompileShader$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompileShader$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompileShader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERPROC glad_debug_glCompileShader
     * }
     */
    public static AddressLayout glad_debug_glCompileShader$layout() {
        return glad_debug_glCompileShader$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERPROC glad_debug_glCompileShader
     * }
     */
    public static MemorySegment glad_debug_glCompileShader$segment() {
        return glad_debug_glCompileShader$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERPROC glad_debug_glCompileShader
     * }
     */
    public static MemorySegment glad_debug_glCompileShader() {
        return glad_debug_glCompileShader$constants.SEGMENT.get(glad_debug_glCompileShader$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERPROC glad_debug_glCompileShader
     * }
     */
    public static void glad_debug_glCompileShader(MemorySegment varValue) {
        glad_debug_glCompileShader$constants.SEGMENT.set(glad_debug_glCompileShader$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompileShaderARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompileShaderARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB
     * }
     */
    public static AddressLayout glad_glCompileShaderARB$layout() {
        return glad_glCompileShaderARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB
     * }
     */
    public static MemorySegment glad_glCompileShaderARB$segment() {
        return glad_glCompileShaderARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB
     * }
     */
    public static MemorySegment glad_glCompileShaderARB() {
        return glad_glCompileShaderARB$constants.SEGMENT.get(glad_glCompileShaderARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB
     * }
     */
    public static void glad_glCompileShaderARB(MemorySegment varValue) {
        glad_glCompileShaderARB$constants.SEGMENT.set(glad_glCompileShaderARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompileShaderARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompileShaderARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERARBPROC glad_debug_glCompileShaderARB
     * }
     */
    public static AddressLayout glad_debug_glCompileShaderARB$layout() {
        return glad_debug_glCompileShaderARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERARBPROC glad_debug_glCompileShaderARB
     * }
     */
    public static MemorySegment glad_debug_glCompileShaderARB$segment() {
        return glad_debug_glCompileShaderARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERARBPROC glad_debug_glCompileShaderARB
     * }
     */
    public static MemorySegment glad_debug_glCompileShaderARB() {
        return glad_debug_glCompileShaderARB$constants.SEGMENT.get(glad_debug_glCompileShaderARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPILESHADERARBPROC glad_debug_glCompileShaderARB
     * }
     */
    public static void glad_debug_glCompileShaderARB(MemorySegment varValue) {
        glad_debug_glCompileShaderARB$constants.SEGMENT.set(glad_debug_glCompileShaderARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedMultiTexImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedMultiTexImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_glCompressedMultiTexImage1DEXT
     * }
     */
    public static AddressLayout glad_glCompressedMultiTexImage1DEXT$layout() {
        return glad_glCompressedMultiTexImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_glCompressedMultiTexImage1DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexImage1DEXT$segment() {
        return glad_glCompressedMultiTexImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_glCompressedMultiTexImage1DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexImage1DEXT() {
        return glad_glCompressedMultiTexImage1DEXT$constants.SEGMENT.get(glad_glCompressedMultiTexImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_glCompressedMultiTexImage1DEXT
     * }
     */
    public static void glad_glCompressedMultiTexImage1DEXT(MemorySegment varValue) {
        glad_glCompressedMultiTexImage1DEXT$constants.SEGMENT.set(glad_glCompressedMultiTexImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedMultiTexImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedMultiTexImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_debug_glCompressedMultiTexImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedMultiTexImage1DEXT$layout() {
        return glad_debug_glCompressedMultiTexImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_debug_glCompressedMultiTexImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexImage1DEXT$segment() {
        return glad_debug_glCompressedMultiTexImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_debug_glCompressedMultiTexImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexImage1DEXT() {
        return glad_debug_glCompressedMultiTexImage1DEXT$constants.SEGMENT.get(glad_debug_glCompressedMultiTexImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_debug_glCompressedMultiTexImage1DEXT
     * }
     */
    public static void glad_debug_glCompressedMultiTexImage1DEXT(MemorySegment varValue) {
        glad_debug_glCompressedMultiTexImage1DEXT$constants.SEGMENT.set(glad_debug_glCompressedMultiTexImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedMultiTexImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedMultiTexImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_glCompressedMultiTexImage2DEXT
     * }
     */
    public static AddressLayout glad_glCompressedMultiTexImage2DEXT$layout() {
        return glad_glCompressedMultiTexImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_glCompressedMultiTexImage2DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexImage2DEXT$segment() {
        return glad_glCompressedMultiTexImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_glCompressedMultiTexImage2DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexImage2DEXT() {
        return glad_glCompressedMultiTexImage2DEXT$constants.SEGMENT.get(glad_glCompressedMultiTexImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_glCompressedMultiTexImage2DEXT
     * }
     */
    public static void glad_glCompressedMultiTexImage2DEXT(MemorySegment varValue) {
        glad_glCompressedMultiTexImage2DEXT$constants.SEGMENT.set(glad_glCompressedMultiTexImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedMultiTexImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedMultiTexImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_debug_glCompressedMultiTexImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedMultiTexImage2DEXT$layout() {
        return glad_debug_glCompressedMultiTexImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_debug_glCompressedMultiTexImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexImage2DEXT$segment() {
        return glad_debug_glCompressedMultiTexImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_debug_glCompressedMultiTexImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexImage2DEXT() {
        return glad_debug_glCompressedMultiTexImage2DEXT$constants.SEGMENT.get(glad_debug_glCompressedMultiTexImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_debug_glCompressedMultiTexImage2DEXT
     * }
     */
    public static void glad_debug_glCompressedMultiTexImage2DEXT(MemorySegment varValue) {
        glad_debug_glCompressedMultiTexImage2DEXT$constants.SEGMENT.set(glad_debug_glCompressedMultiTexImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedMultiTexImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedMultiTexImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_glCompressedMultiTexImage3DEXT
     * }
     */
    public static AddressLayout glad_glCompressedMultiTexImage3DEXT$layout() {
        return glad_glCompressedMultiTexImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_glCompressedMultiTexImage3DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexImage3DEXT$segment() {
        return glad_glCompressedMultiTexImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_glCompressedMultiTexImage3DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexImage3DEXT() {
        return glad_glCompressedMultiTexImage3DEXT$constants.SEGMENT.get(glad_glCompressedMultiTexImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_glCompressedMultiTexImage3DEXT
     * }
     */
    public static void glad_glCompressedMultiTexImage3DEXT(MemorySegment varValue) {
        glad_glCompressedMultiTexImage3DEXT$constants.SEGMENT.set(glad_glCompressedMultiTexImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedMultiTexImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedMultiTexImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_debug_glCompressedMultiTexImage3DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedMultiTexImage3DEXT$layout() {
        return glad_debug_glCompressedMultiTexImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_debug_glCompressedMultiTexImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexImage3DEXT$segment() {
        return glad_debug_glCompressedMultiTexImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_debug_glCompressedMultiTexImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexImage3DEXT() {
        return glad_debug_glCompressedMultiTexImage3DEXT$constants.SEGMENT.get(glad_debug_glCompressedMultiTexImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_debug_glCompressedMultiTexImage3DEXT
     * }
     */
    public static void glad_debug_glCompressedMultiTexImage3DEXT(MemorySegment varValue) {
        glad_debug_glCompressedMultiTexImage3DEXT$constants.SEGMENT.set(glad_debug_glCompressedMultiTexImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedMultiTexSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedMultiTexSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_glCompressedMultiTexSubImage1DEXT
     * }
     */
    public static AddressLayout glad_glCompressedMultiTexSubImage1DEXT$layout() {
        return glad_glCompressedMultiTexSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_glCompressedMultiTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexSubImage1DEXT$segment() {
        return glad_glCompressedMultiTexSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_glCompressedMultiTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexSubImage1DEXT() {
        return glad_glCompressedMultiTexSubImage1DEXT$constants.SEGMENT.get(glad_glCompressedMultiTexSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_glCompressedMultiTexSubImage1DEXT
     * }
     */
    public static void glad_glCompressedMultiTexSubImage1DEXT(MemorySegment varValue) {
        glad_glCompressedMultiTexSubImage1DEXT$constants.SEGMENT.set(glad_glCompressedMultiTexSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedMultiTexSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedMultiTexSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCompressedMultiTexSubImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedMultiTexSubImage1DEXT$layout() {
        return glad_debug_glCompressedMultiTexSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCompressedMultiTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexSubImage1DEXT$segment() {
        return glad_debug_glCompressedMultiTexSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCompressedMultiTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexSubImage1DEXT() {
        return glad_debug_glCompressedMultiTexSubImage1DEXT$constants.SEGMENT.get(glad_debug_glCompressedMultiTexSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCompressedMultiTexSubImage1DEXT
     * }
     */
    public static void glad_debug_glCompressedMultiTexSubImage1DEXT(MemorySegment varValue) {
        glad_debug_glCompressedMultiTexSubImage1DEXT$constants.SEGMENT.set(glad_debug_glCompressedMultiTexSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedMultiTexSubImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedMultiTexSubImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_glCompressedMultiTexSubImage2DEXT
     * }
     */
    public static AddressLayout glad_glCompressedMultiTexSubImage2DEXT$layout() {
        return glad_glCompressedMultiTexSubImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_glCompressedMultiTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexSubImage2DEXT$segment() {
        return glad_glCompressedMultiTexSubImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_glCompressedMultiTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexSubImage2DEXT() {
        return glad_glCompressedMultiTexSubImage2DEXT$constants.SEGMENT.get(glad_glCompressedMultiTexSubImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_glCompressedMultiTexSubImage2DEXT
     * }
     */
    public static void glad_glCompressedMultiTexSubImage2DEXT(MemorySegment varValue) {
        glad_glCompressedMultiTexSubImage2DEXT$constants.SEGMENT.set(glad_glCompressedMultiTexSubImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedMultiTexSubImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedMultiTexSubImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCompressedMultiTexSubImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedMultiTexSubImage2DEXT$layout() {
        return glad_debug_glCompressedMultiTexSubImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCompressedMultiTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexSubImage2DEXT$segment() {
        return glad_debug_glCompressedMultiTexSubImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCompressedMultiTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexSubImage2DEXT() {
        return glad_debug_glCompressedMultiTexSubImage2DEXT$constants.SEGMENT.get(glad_debug_glCompressedMultiTexSubImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCompressedMultiTexSubImage2DEXT
     * }
     */
    public static void glad_debug_glCompressedMultiTexSubImage2DEXT(MemorySegment varValue) {
        glad_debug_glCompressedMultiTexSubImage2DEXT$constants.SEGMENT.set(glad_debug_glCompressedMultiTexSubImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedMultiTexSubImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedMultiTexSubImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_glCompressedMultiTexSubImage3DEXT
     * }
     */
    public static AddressLayout glad_glCompressedMultiTexSubImage3DEXT$layout() {
        return glad_glCompressedMultiTexSubImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_glCompressedMultiTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexSubImage3DEXT$segment() {
        return glad_glCompressedMultiTexSubImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_glCompressedMultiTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_glCompressedMultiTexSubImage3DEXT() {
        return glad_glCompressedMultiTexSubImage3DEXT$constants.SEGMENT.get(glad_glCompressedMultiTexSubImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_glCompressedMultiTexSubImage3DEXT
     * }
     */
    public static void glad_glCompressedMultiTexSubImage3DEXT(MemorySegment varValue) {
        glad_glCompressedMultiTexSubImage3DEXT$constants.SEGMENT.set(glad_glCompressedMultiTexSubImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedMultiTexSubImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedMultiTexSubImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCompressedMultiTexSubImage3DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedMultiTexSubImage3DEXT$layout() {
        return glad_debug_glCompressedMultiTexSubImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCompressedMultiTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexSubImage3DEXT$segment() {
        return glad_debug_glCompressedMultiTexSubImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCompressedMultiTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedMultiTexSubImage3DEXT() {
        return glad_debug_glCompressedMultiTexSubImage3DEXT$constants.SEGMENT.get(glad_debug_glCompressedMultiTexSubImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCompressedMultiTexSubImage3DEXT
     * }
     */
    public static void glad_debug_glCompressedMultiTexSubImage3DEXT(MemorySegment varValue) {
        glad_debug_glCompressedMultiTexSubImage3DEXT$constants.SEGMENT.set(glad_debug_glCompressedMultiTexSubImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D
     * }
     */
    public static AddressLayout glad_glCompressedTexImage1D$layout() {
        return glad_glCompressedTexImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D
     * }
     */
    public static MemorySegment glad_glCompressedTexImage1D$segment() {
        return glad_glCompressedTexImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D
     * }
     */
    public static MemorySegment glad_glCompressedTexImage1D() {
        return glad_glCompressedTexImage1D$constants.SEGMENT.get(glad_glCompressedTexImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D
     * }
     */
    public static void glad_glCompressedTexImage1D(MemorySegment varValue) {
        glad_glCompressedTexImage1D$constants.SEGMENT.set(glad_glCompressedTexImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexImage1D$layout() {
        return glad_debug_glCompressedTexImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage1D$segment() {
        return glad_debug_glCompressedTexImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage1D() {
        return glad_debug_glCompressedTexImage1D$constants.SEGMENT.get(glad_debug_glCompressedTexImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D
     * }
     */
    public static void glad_debug_glCompressedTexImage1D(MemorySegment varValue) {
        glad_debug_glCompressedTexImage1D$constants.SEGMENT.set(glad_debug_glCompressedTexImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexImage1DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexImage1DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB
     * }
     */
    public static AddressLayout glad_glCompressedTexImage1DARB$layout() {
        return glad_glCompressedTexImage1DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexImage1DARB$segment() {
        return glad_glCompressedTexImage1DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexImage1DARB() {
        return glad_glCompressedTexImage1DARB$constants.SEGMENT.get(glad_glCompressedTexImage1DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB
     * }
     */
    public static void glad_glCompressedTexImage1DARB(MemorySegment varValue) {
        glad_glCompressedTexImage1DARB$constants.SEGMENT.set(glad_glCompressedTexImage1DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexImage1DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexImage1DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_debug_glCompressedTexImage1DARB
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexImage1DARB$layout() {
        return glad_debug_glCompressedTexImage1DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_debug_glCompressedTexImage1DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage1DARB$segment() {
        return glad_debug_glCompressedTexImage1DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_debug_glCompressedTexImage1DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage1DARB() {
        return glad_debug_glCompressedTexImage1DARB$constants.SEGMENT.get(glad_debug_glCompressedTexImage1DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_debug_glCompressedTexImage1DARB
     * }
     */
    public static void glad_debug_glCompressedTexImage1DARB(MemorySegment varValue) {
        glad_debug_glCompressedTexImage1DARB$constants.SEGMENT.set(glad_debug_glCompressedTexImage1DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D
     * }
     */
    public static AddressLayout glad_glCompressedTexImage2D$layout() {
        return glad_glCompressedTexImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D
     * }
     */
    public static MemorySegment glad_glCompressedTexImage2D$segment() {
        return glad_glCompressedTexImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D
     * }
     */
    public static MemorySegment glad_glCompressedTexImage2D() {
        return glad_glCompressedTexImage2D$constants.SEGMENT.get(glad_glCompressedTexImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D
     * }
     */
    public static void glad_glCompressedTexImage2D(MemorySegment varValue) {
        glad_glCompressedTexImage2D$constants.SEGMENT.set(glad_glCompressedTexImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexImage2D$layout() {
        return glad_debug_glCompressedTexImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage2D$segment() {
        return glad_debug_glCompressedTexImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage2D() {
        return glad_debug_glCompressedTexImage2D$constants.SEGMENT.get(glad_debug_glCompressedTexImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D
     * }
     */
    public static void glad_debug_glCompressedTexImage2D(MemorySegment varValue) {
        glad_debug_glCompressedTexImage2D$constants.SEGMENT.set(glad_debug_glCompressedTexImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexImage2DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexImage2DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB
     * }
     */
    public static AddressLayout glad_glCompressedTexImage2DARB$layout() {
        return glad_glCompressedTexImage2DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexImage2DARB$segment() {
        return glad_glCompressedTexImage2DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexImage2DARB() {
        return glad_glCompressedTexImage2DARB$constants.SEGMENT.get(glad_glCompressedTexImage2DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB
     * }
     */
    public static void glad_glCompressedTexImage2DARB(MemorySegment varValue) {
        glad_glCompressedTexImage2DARB$constants.SEGMENT.set(glad_glCompressedTexImage2DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexImage2DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexImage2DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_debug_glCompressedTexImage2DARB
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexImage2DARB$layout() {
        return glad_debug_glCompressedTexImage2DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_debug_glCompressedTexImage2DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage2DARB$segment() {
        return glad_debug_glCompressedTexImage2DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_debug_glCompressedTexImage2DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage2DARB() {
        return glad_debug_glCompressedTexImage2DARB$constants.SEGMENT.get(glad_debug_glCompressedTexImage2DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_debug_glCompressedTexImage2DARB
     * }
     */
    public static void glad_debug_glCompressedTexImage2DARB(MemorySegment varValue) {
        glad_debug_glCompressedTexImage2DARB$constants.SEGMENT.set(glad_debug_glCompressedTexImage2DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexImage3D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexImage3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D
     * }
     */
    public static AddressLayout glad_glCompressedTexImage3D$layout() {
        return glad_glCompressedTexImage3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D
     * }
     */
    public static MemorySegment glad_glCompressedTexImage3D$segment() {
        return glad_glCompressedTexImage3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D
     * }
     */
    public static MemorySegment glad_glCompressedTexImage3D() {
        return glad_glCompressedTexImage3D$constants.SEGMENT.get(glad_glCompressedTexImage3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D
     * }
     */
    public static void glad_glCompressedTexImage3D(MemorySegment varValue) {
        glad_glCompressedTexImage3D$constants.SEGMENT.set(glad_glCompressedTexImage3D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexImage3D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexImage3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexImage3D$layout() {
        return glad_debug_glCompressedTexImage3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage3D$segment() {
        return glad_debug_glCompressedTexImage3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage3D() {
        return glad_debug_glCompressedTexImage3D$constants.SEGMENT.get(glad_debug_glCompressedTexImage3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D
     * }
     */
    public static void glad_debug_glCompressedTexImage3D(MemorySegment varValue) {
        glad_debug_glCompressedTexImage3D$constants.SEGMENT.set(glad_debug_glCompressedTexImage3D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexImage3DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexImage3DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB
     * }
     */
    public static AddressLayout glad_glCompressedTexImage3DARB$layout() {
        return glad_glCompressedTexImage3DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexImage3DARB$segment() {
        return glad_glCompressedTexImage3DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexImage3DARB() {
        return glad_glCompressedTexImage3DARB$constants.SEGMENT.get(glad_glCompressedTexImage3DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB
     * }
     */
    public static void glad_glCompressedTexImage3DARB(MemorySegment varValue) {
        glad_glCompressedTexImage3DARB$constants.SEGMENT.set(glad_glCompressedTexImage3DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexImage3DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexImage3DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_debug_glCompressedTexImage3DARB
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexImage3DARB$layout() {
        return glad_debug_glCompressedTexImage3DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_debug_glCompressedTexImage3DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage3DARB$segment() {
        return glad_debug_glCompressedTexImage3DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_debug_glCompressedTexImage3DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexImage3DARB() {
        return glad_debug_glCompressedTexImage3DARB$constants.SEGMENT.get(glad_debug_glCompressedTexImage3DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_debug_glCompressedTexImage3DARB
     * }
     */
    public static void glad_debug_glCompressedTexImage3DARB(MemorySegment varValue) {
        glad_debug_glCompressedTexImage3DARB$constants.SEGMENT.set(glad_debug_glCompressedTexImage3DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexSubImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexSubImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D
     * }
     */
    public static AddressLayout glad_glCompressedTexSubImage1D$layout() {
        return glad_glCompressedTexSubImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage1D$segment() {
        return glad_glCompressedTexSubImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage1D() {
        return glad_glCompressedTexSubImage1D$constants.SEGMENT.get(glad_glCompressedTexSubImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D
     * }
     */
    public static void glad_glCompressedTexSubImage1D(MemorySegment varValue) {
        glad_glCompressedTexSubImage1D$constants.SEGMENT.set(glad_glCompressedTexSubImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexSubImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexSubImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexSubImage1D$layout() {
        return glad_debug_glCompressedTexSubImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage1D$segment() {
        return glad_debug_glCompressedTexSubImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage1D() {
        return glad_debug_glCompressedTexSubImage1D$constants.SEGMENT.get(glad_debug_glCompressedTexSubImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D
     * }
     */
    public static void glad_debug_glCompressedTexSubImage1D(MemorySegment varValue) {
        glad_debug_glCompressedTexSubImage1D$constants.SEGMENT.set(glad_debug_glCompressedTexSubImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexSubImage1DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexSubImage1DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB
     * }
     */
    public static AddressLayout glad_glCompressedTexSubImage1DARB$layout() {
        return glad_glCompressedTexSubImage1DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage1DARB$segment() {
        return glad_glCompressedTexSubImage1DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage1DARB() {
        return glad_glCompressedTexSubImage1DARB$constants.SEGMENT.get(glad_glCompressedTexSubImage1DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB
     * }
     */
    public static void glad_glCompressedTexSubImage1DARB(MemorySegment varValue) {
        glad_glCompressedTexSubImage1DARB$constants.SEGMENT.set(glad_glCompressedTexSubImage1DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexSubImage1DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexSubImage1DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_debug_glCompressedTexSubImage1DARB
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexSubImage1DARB$layout() {
        return glad_debug_glCompressedTexSubImage1DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_debug_glCompressedTexSubImage1DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage1DARB$segment() {
        return glad_debug_glCompressedTexSubImage1DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_debug_glCompressedTexSubImage1DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage1DARB() {
        return glad_debug_glCompressedTexSubImage1DARB$constants.SEGMENT.get(glad_debug_glCompressedTexSubImage1DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_debug_glCompressedTexSubImage1DARB
     * }
     */
    public static void glad_debug_glCompressedTexSubImage1DARB(MemorySegment varValue) {
        glad_debug_glCompressedTexSubImage1DARB$constants.SEGMENT.set(glad_debug_glCompressedTexSubImage1DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexSubImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexSubImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D
     * }
     */
    public static AddressLayout glad_glCompressedTexSubImage2D$layout() {
        return glad_glCompressedTexSubImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage2D$segment() {
        return glad_glCompressedTexSubImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage2D() {
        return glad_glCompressedTexSubImage2D$constants.SEGMENT.get(glad_glCompressedTexSubImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D
     * }
     */
    public static void glad_glCompressedTexSubImage2D(MemorySegment varValue) {
        glad_glCompressedTexSubImage2D$constants.SEGMENT.set(glad_glCompressedTexSubImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexSubImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexSubImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexSubImage2D$layout() {
        return glad_debug_glCompressedTexSubImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage2D$segment() {
        return glad_debug_glCompressedTexSubImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage2D() {
        return glad_debug_glCompressedTexSubImage2D$constants.SEGMENT.get(glad_debug_glCompressedTexSubImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D
     * }
     */
    public static void glad_debug_glCompressedTexSubImage2D(MemorySegment varValue) {
        glad_debug_glCompressedTexSubImage2D$constants.SEGMENT.set(glad_debug_glCompressedTexSubImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexSubImage2DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexSubImage2DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB
     * }
     */
    public static AddressLayout glad_glCompressedTexSubImage2DARB$layout() {
        return glad_glCompressedTexSubImage2DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage2DARB$segment() {
        return glad_glCompressedTexSubImage2DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage2DARB() {
        return glad_glCompressedTexSubImage2DARB$constants.SEGMENT.get(glad_glCompressedTexSubImage2DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB
     * }
     */
    public static void glad_glCompressedTexSubImage2DARB(MemorySegment varValue) {
        glad_glCompressedTexSubImage2DARB$constants.SEGMENT.set(glad_glCompressedTexSubImage2DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexSubImage2DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexSubImage2DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_debug_glCompressedTexSubImage2DARB
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexSubImage2DARB$layout() {
        return glad_debug_glCompressedTexSubImage2DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_debug_glCompressedTexSubImage2DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage2DARB$segment() {
        return glad_debug_glCompressedTexSubImage2DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_debug_glCompressedTexSubImage2DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage2DARB() {
        return glad_debug_glCompressedTexSubImage2DARB$constants.SEGMENT.get(glad_debug_glCompressedTexSubImage2DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_debug_glCompressedTexSubImage2DARB
     * }
     */
    public static void glad_debug_glCompressedTexSubImage2DARB(MemorySegment varValue) {
        glad_debug_glCompressedTexSubImage2DARB$constants.SEGMENT.set(glad_debug_glCompressedTexSubImage2DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexSubImage3D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexSubImage3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D
     * }
     */
    public static AddressLayout glad_glCompressedTexSubImage3D$layout() {
        return glad_glCompressedTexSubImage3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage3D$segment() {
        return glad_glCompressedTexSubImage3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage3D() {
        return glad_glCompressedTexSubImage3D$constants.SEGMENT.get(glad_glCompressedTexSubImage3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D
     * }
     */
    public static void glad_glCompressedTexSubImage3D(MemorySegment varValue) {
        glad_glCompressedTexSubImage3D$constants.SEGMENT.set(glad_glCompressedTexSubImage3D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexSubImage3D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexSubImage3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexSubImage3D$layout() {
        return glad_debug_glCompressedTexSubImage3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage3D$segment() {
        return glad_debug_glCompressedTexSubImage3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage3D() {
        return glad_debug_glCompressedTexSubImage3D$constants.SEGMENT.get(glad_debug_glCompressedTexSubImage3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D
     * }
     */
    public static void glad_debug_glCompressedTexSubImage3D(MemorySegment varValue) {
        glad_debug_glCompressedTexSubImage3D$constants.SEGMENT.set(glad_debug_glCompressedTexSubImage3D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTexSubImage3DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTexSubImage3DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB
     * }
     */
    public static AddressLayout glad_glCompressedTexSubImage3DARB$layout() {
        return glad_glCompressedTexSubImage3DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage3DARB$segment() {
        return glad_glCompressedTexSubImage3DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB
     * }
     */
    public static MemorySegment glad_glCompressedTexSubImage3DARB() {
        return glad_glCompressedTexSubImage3DARB$constants.SEGMENT.get(glad_glCompressedTexSubImage3DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB
     * }
     */
    public static void glad_glCompressedTexSubImage3DARB(MemorySegment varValue) {
        glad_glCompressedTexSubImage3DARB$constants.SEGMENT.set(glad_glCompressedTexSubImage3DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTexSubImage3DARB$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTexSubImage3DARB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_debug_glCompressedTexSubImage3DARB
     * }
     */
    public static AddressLayout glad_debug_glCompressedTexSubImage3DARB$layout() {
        return glad_debug_glCompressedTexSubImage3DARB$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_debug_glCompressedTexSubImage3DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage3DARB$segment() {
        return glad_debug_glCompressedTexSubImage3DARB$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_debug_glCompressedTexSubImage3DARB
     * }
     */
    public static MemorySegment glad_debug_glCompressedTexSubImage3DARB() {
        return glad_debug_glCompressedTexSubImage3DARB$constants.SEGMENT.get(glad_debug_glCompressedTexSubImage3DARB$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_debug_glCompressedTexSubImage3DARB
     * }
     */
    public static void glad_debug_glCompressedTexSubImage3DARB(MemorySegment varValue) {
        glad_debug_glCompressedTexSubImage3DARB$constants.SEGMENT.set(glad_debug_glCompressedTexSubImage3DARB$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_glCompressedTextureImage1DEXT
     * }
     */
    public static AddressLayout glad_glCompressedTextureImage1DEXT$layout() {
        return glad_glCompressedTextureImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_glCompressedTextureImage1DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureImage1DEXT$segment() {
        return glad_glCompressedTextureImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_glCompressedTextureImage1DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureImage1DEXT() {
        return glad_glCompressedTextureImage1DEXT$constants.SEGMENT.get(glad_glCompressedTextureImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_glCompressedTextureImage1DEXT
     * }
     */
    public static void glad_glCompressedTextureImage1DEXT(MemorySegment varValue) {
        glad_glCompressedTextureImage1DEXT$constants.SEGMENT.set(glad_glCompressedTextureImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_debug_glCompressedTextureImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureImage1DEXT$layout() {
        return glad_debug_glCompressedTextureImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_debug_glCompressedTextureImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureImage1DEXT$segment() {
        return glad_debug_glCompressedTextureImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_debug_glCompressedTextureImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureImage1DEXT() {
        return glad_debug_glCompressedTextureImage1DEXT$constants.SEGMENT.get(glad_debug_glCompressedTextureImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_debug_glCompressedTextureImage1DEXT
     * }
     */
    public static void glad_debug_glCompressedTextureImage1DEXT(MemorySegment varValue) {
        glad_debug_glCompressedTextureImage1DEXT$constants.SEGMENT.set(glad_debug_glCompressedTextureImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_glCompressedTextureImage2DEXT
     * }
     */
    public static AddressLayout glad_glCompressedTextureImage2DEXT$layout() {
        return glad_glCompressedTextureImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_glCompressedTextureImage2DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureImage2DEXT$segment() {
        return glad_glCompressedTextureImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_glCompressedTextureImage2DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureImage2DEXT() {
        return glad_glCompressedTextureImage2DEXT$constants.SEGMENT.get(glad_glCompressedTextureImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_glCompressedTextureImage2DEXT
     * }
     */
    public static void glad_glCompressedTextureImage2DEXT(MemorySegment varValue) {
        glad_glCompressedTextureImage2DEXT$constants.SEGMENT.set(glad_glCompressedTextureImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_debug_glCompressedTextureImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureImage2DEXT$layout() {
        return glad_debug_glCompressedTextureImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_debug_glCompressedTextureImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureImage2DEXT$segment() {
        return glad_debug_glCompressedTextureImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_debug_glCompressedTextureImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureImage2DEXT() {
        return glad_debug_glCompressedTextureImage2DEXT$constants.SEGMENT.get(glad_debug_glCompressedTextureImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_debug_glCompressedTextureImage2DEXT
     * }
     */
    public static void glad_debug_glCompressedTextureImage2DEXT(MemorySegment varValue) {
        glad_debug_glCompressedTextureImage2DEXT$constants.SEGMENT.set(glad_debug_glCompressedTextureImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_glCompressedTextureImage3DEXT
     * }
     */
    public static AddressLayout glad_glCompressedTextureImage3DEXT$layout() {
        return glad_glCompressedTextureImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_glCompressedTextureImage3DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureImage3DEXT$segment() {
        return glad_glCompressedTextureImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_glCompressedTextureImage3DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureImage3DEXT() {
        return glad_glCompressedTextureImage3DEXT$constants.SEGMENT.get(glad_glCompressedTextureImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_glCompressedTextureImage3DEXT
     * }
     */
    public static void glad_glCompressedTextureImage3DEXT(MemorySegment varValue) {
        glad_glCompressedTextureImage3DEXT$constants.SEGMENT.set(glad_glCompressedTextureImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_debug_glCompressedTextureImage3DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureImage3DEXT$layout() {
        return glad_debug_glCompressedTextureImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_debug_glCompressedTextureImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureImage3DEXT$segment() {
        return glad_debug_glCompressedTextureImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_debug_glCompressedTextureImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureImage3DEXT() {
        return glad_debug_glCompressedTextureImage3DEXT$constants.SEGMENT.get(glad_debug_glCompressedTextureImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_debug_glCompressedTextureImage3DEXT
     * }
     */
    public static void glad_debug_glCompressedTextureImage3DEXT(MemorySegment varValue) {
        glad_debug_glCompressedTextureImage3DEXT$constants.SEGMENT.set(glad_debug_glCompressedTextureImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureSubImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureSubImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D
     * }
     */
    public static AddressLayout glad_glCompressedTextureSubImage1D$layout() {
        return glad_glCompressedTextureSubImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage1D$segment() {
        return glad_glCompressedTextureSubImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage1D() {
        return glad_glCompressedTextureSubImage1D$constants.SEGMENT.get(glad_glCompressedTextureSubImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D
     * }
     */
    public static void glad_glCompressedTextureSubImage1D(MemorySegment varValue) {
        glad_glCompressedTextureSubImage1D$constants.SEGMENT.set(glad_glCompressedTextureSubImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureSubImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureSubImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_debug_glCompressedTextureSubImage1D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureSubImage1D$layout() {
        return glad_debug_glCompressedTextureSubImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_debug_glCompressedTextureSubImage1D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage1D$segment() {
        return glad_debug_glCompressedTextureSubImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_debug_glCompressedTextureSubImage1D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage1D() {
        return glad_debug_glCompressedTextureSubImage1D$constants.SEGMENT.get(glad_debug_glCompressedTextureSubImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_debug_glCompressedTextureSubImage1D
     * }
     */
    public static void glad_debug_glCompressedTextureSubImage1D(MemorySegment varValue) {
        glad_debug_glCompressedTextureSubImage1D$constants.SEGMENT.set(glad_debug_glCompressedTextureSubImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_glCompressedTextureSubImage1DEXT
     * }
     */
    public static AddressLayout glad_glCompressedTextureSubImage1DEXT$layout() {
        return glad_glCompressedTextureSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_glCompressedTextureSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage1DEXT$segment() {
        return glad_glCompressedTextureSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_glCompressedTextureSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage1DEXT() {
        return glad_glCompressedTextureSubImage1DEXT$constants.SEGMENT.get(glad_glCompressedTextureSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_glCompressedTextureSubImage1DEXT
     * }
     */
    public static void glad_glCompressedTextureSubImage1DEXT(MemorySegment varValue) {
        glad_glCompressedTextureSubImage1DEXT$constants.SEGMENT.set(glad_glCompressedTextureSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_debug_glCompressedTextureSubImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureSubImage1DEXT$layout() {
        return glad_debug_glCompressedTextureSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_debug_glCompressedTextureSubImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage1DEXT$segment() {
        return glad_debug_glCompressedTextureSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_debug_glCompressedTextureSubImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage1DEXT() {
        return glad_debug_glCompressedTextureSubImage1DEXT$constants.SEGMENT.get(glad_debug_glCompressedTextureSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_debug_glCompressedTextureSubImage1DEXT
     * }
     */
    public static void glad_debug_glCompressedTextureSubImage1DEXT(MemorySegment varValue) {
        glad_debug_glCompressedTextureSubImage1DEXT$constants.SEGMENT.set(glad_debug_glCompressedTextureSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureSubImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureSubImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D
     * }
     */
    public static AddressLayout glad_glCompressedTextureSubImage2D$layout() {
        return glad_glCompressedTextureSubImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage2D$segment() {
        return glad_glCompressedTextureSubImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage2D() {
        return glad_glCompressedTextureSubImage2D$constants.SEGMENT.get(glad_glCompressedTextureSubImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D
     * }
     */
    public static void glad_glCompressedTextureSubImage2D(MemorySegment varValue) {
        glad_glCompressedTextureSubImage2D$constants.SEGMENT.set(glad_glCompressedTextureSubImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureSubImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureSubImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_debug_glCompressedTextureSubImage2D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureSubImage2D$layout() {
        return glad_debug_glCompressedTextureSubImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_debug_glCompressedTextureSubImage2D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage2D$segment() {
        return glad_debug_glCompressedTextureSubImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_debug_glCompressedTextureSubImage2D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage2D() {
        return glad_debug_glCompressedTextureSubImage2D$constants.SEGMENT.get(glad_debug_glCompressedTextureSubImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_debug_glCompressedTextureSubImage2D
     * }
     */
    public static void glad_debug_glCompressedTextureSubImage2D(MemorySegment varValue) {
        glad_debug_glCompressedTextureSubImage2D$constants.SEGMENT.set(glad_debug_glCompressedTextureSubImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureSubImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureSubImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_glCompressedTextureSubImage2DEXT
     * }
     */
    public static AddressLayout glad_glCompressedTextureSubImage2DEXT$layout() {
        return glad_glCompressedTextureSubImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_glCompressedTextureSubImage2DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage2DEXT$segment() {
        return glad_glCompressedTextureSubImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_glCompressedTextureSubImage2DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage2DEXT() {
        return glad_glCompressedTextureSubImage2DEXT$constants.SEGMENT.get(glad_glCompressedTextureSubImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_glCompressedTextureSubImage2DEXT
     * }
     */
    public static void glad_glCompressedTextureSubImage2DEXT(MemorySegment varValue) {
        glad_glCompressedTextureSubImage2DEXT$constants.SEGMENT.set(glad_glCompressedTextureSubImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureSubImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureSubImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_debug_glCompressedTextureSubImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureSubImage2DEXT$layout() {
        return glad_debug_glCompressedTextureSubImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_debug_glCompressedTextureSubImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage2DEXT$segment() {
        return glad_debug_glCompressedTextureSubImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_debug_glCompressedTextureSubImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage2DEXT() {
        return glad_debug_glCompressedTextureSubImage2DEXT$constants.SEGMENT.get(glad_debug_glCompressedTextureSubImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_debug_glCompressedTextureSubImage2DEXT
     * }
     */
    public static void glad_debug_glCompressedTextureSubImage2DEXT(MemorySegment varValue) {
        glad_debug_glCompressedTextureSubImage2DEXT$constants.SEGMENT.set(glad_debug_glCompressedTextureSubImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureSubImage3D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureSubImage3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D
     * }
     */
    public static AddressLayout glad_glCompressedTextureSubImage3D$layout() {
        return glad_glCompressedTextureSubImage3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage3D$segment() {
        return glad_glCompressedTextureSubImage3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage3D() {
        return glad_glCompressedTextureSubImage3D$constants.SEGMENT.get(glad_glCompressedTextureSubImage3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D
     * }
     */
    public static void glad_glCompressedTextureSubImage3D(MemorySegment varValue) {
        glad_glCompressedTextureSubImage3D$constants.SEGMENT.set(glad_glCompressedTextureSubImage3D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureSubImage3D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureSubImage3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_debug_glCompressedTextureSubImage3D
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureSubImage3D$layout() {
        return glad_debug_glCompressedTextureSubImage3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_debug_glCompressedTextureSubImage3D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage3D$segment() {
        return glad_debug_glCompressedTextureSubImage3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_debug_glCompressedTextureSubImage3D
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage3D() {
        return glad_debug_glCompressedTextureSubImage3D$constants.SEGMENT.get(glad_debug_glCompressedTextureSubImage3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_debug_glCompressedTextureSubImage3D
     * }
     */
    public static void glad_debug_glCompressedTextureSubImage3D(MemorySegment varValue) {
        glad_debug_glCompressedTextureSubImage3D$constants.SEGMENT.set(glad_debug_glCompressedTextureSubImage3D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCompressedTextureSubImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCompressedTextureSubImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_glCompressedTextureSubImage3DEXT
     * }
     */
    public static AddressLayout glad_glCompressedTextureSubImage3DEXT$layout() {
        return glad_glCompressedTextureSubImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_glCompressedTextureSubImage3DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage3DEXT$segment() {
        return glad_glCompressedTextureSubImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_glCompressedTextureSubImage3DEXT
     * }
     */
    public static MemorySegment glad_glCompressedTextureSubImage3DEXT() {
        return glad_glCompressedTextureSubImage3DEXT$constants.SEGMENT.get(glad_glCompressedTextureSubImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_glCompressedTextureSubImage3DEXT
     * }
     */
    public static void glad_glCompressedTextureSubImage3DEXT(MemorySegment varValue) {
        glad_glCompressedTextureSubImage3DEXT$constants.SEGMENT.set(glad_glCompressedTextureSubImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCompressedTextureSubImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCompressedTextureSubImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_debug_glCompressedTextureSubImage3DEXT
     * }
     */
    public static AddressLayout glad_debug_glCompressedTextureSubImage3DEXT$layout() {
        return glad_debug_glCompressedTextureSubImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_debug_glCompressedTextureSubImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage3DEXT$segment() {
        return glad_debug_glCompressedTextureSubImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_debug_glCompressedTextureSubImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCompressedTextureSubImage3DEXT() {
        return glad_debug_glCompressedTextureSubImage3DEXT$constants.SEGMENT.get(glad_debug_glCompressedTextureSubImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_debug_glCompressedTextureSubImage3DEXT
     * }
     */
    public static void glad_debug_glCompressedTextureSubImage3DEXT(MemorySegment varValue) {
        glad_debug_glCompressedTextureSubImage3DEXT$constants.SEGMENT.set(glad_debug_glCompressedTextureSubImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glConvolutionFilter1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glConvolutionFilter1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D
     * }
     */
    public static AddressLayout glad_glConvolutionFilter1D$layout() {
        return glad_glConvolutionFilter1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D
     * }
     */
    public static MemorySegment glad_glConvolutionFilter1D$segment() {
        return glad_glConvolutionFilter1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D
     * }
     */
    public static MemorySegment glad_glConvolutionFilter1D() {
        return glad_glConvolutionFilter1D$constants.SEGMENT.get(glad_glConvolutionFilter1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D
     * }
     */
    public static void glad_glConvolutionFilter1D(MemorySegment varValue) {
        glad_glConvolutionFilter1D$constants.SEGMENT.set(glad_glConvolutionFilter1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glConvolutionFilter1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glConvolutionFilter1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER1DPROC glad_debug_glConvolutionFilter1D
     * }
     */
    public static AddressLayout glad_debug_glConvolutionFilter1D$layout() {
        return glad_debug_glConvolutionFilter1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER1DPROC glad_debug_glConvolutionFilter1D
     * }
     */
    public static MemorySegment glad_debug_glConvolutionFilter1D$segment() {
        return glad_debug_glConvolutionFilter1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER1DPROC glad_debug_glConvolutionFilter1D
     * }
     */
    public static MemorySegment glad_debug_glConvolutionFilter1D() {
        return glad_debug_glConvolutionFilter1D$constants.SEGMENT.get(glad_debug_glConvolutionFilter1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER1DPROC glad_debug_glConvolutionFilter1D
     * }
     */
    public static void glad_debug_glConvolutionFilter1D(MemorySegment varValue) {
        glad_debug_glConvolutionFilter1D$constants.SEGMENT.set(glad_debug_glConvolutionFilter1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glConvolutionFilter2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glConvolutionFilter2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D
     * }
     */
    public static AddressLayout glad_glConvolutionFilter2D$layout() {
        return glad_glConvolutionFilter2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D
     * }
     */
    public static MemorySegment glad_glConvolutionFilter2D$segment() {
        return glad_glConvolutionFilter2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D
     * }
     */
    public static MemorySegment glad_glConvolutionFilter2D() {
        return glad_glConvolutionFilter2D$constants.SEGMENT.get(glad_glConvolutionFilter2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D
     * }
     */
    public static void glad_glConvolutionFilter2D(MemorySegment varValue) {
        glad_glConvolutionFilter2D$constants.SEGMENT.set(glad_glConvolutionFilter2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glConvolutionFilter2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glConvolutionFilter2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER2DPROC glad_debug_glConvolutionFilter2D
     * }
     */
    public static AddressLayout glad_debug_glConvolutionFilter2D$layout() {
        return glad_debug_glConvolutionFilter2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER2DPROC glad_debug_glConvolutionFilter2D
     * }
     */
    public static MemorySegment glad_debug_glConvolutionFilter2D$segment() {
        return glad_debug_glConvolutionFilter2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER2DPROC glad_debug_glConvolutionFilter2D
     * }
     */
    public static MemorySegment glad_debug_glConvolutionFilter2D() {
        return glad_debug_glConvolutionFilter2D$constants.SEGMENT.get(glad_debug_glConvolutionFilter2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONFILTER2DPROC glad_debug_glConvolutionFilter2D
     * }
     */
    public static void glad_debug_glConvolutionFilter2D(MemorySegment varValue) {
        glad_debug_glConvolutionFilter2D$constants.SEGMENT.set(glad_debug_glConvolutionFilter2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glConvolutionParameterf$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glConvolutionParameterf").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf
     * }
     */
    public static AddressLayout glad_glConvolutionParameterf$layout() {
        return glad_glConvolutionParameterf$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf
     * }
     */
    public static MemorySegment glad_glConvolutionParameterf$segment() {
        return glad_glConvolutionParameterf$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf
     * }
     */
    public static MemorySegment glad_glConvolutionParameterf() {
        return glad_glConvolutionParameterf$constants.SEGMENT.get(glad_glConvolutionParameterf$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf
     * }
     */
    public static void glad_glConvolutionParameterf(MemorySegment varValue) {
        glad_glConvolutionParameterf$constants.SEGMENT.set(glad_glConvolutionParameterf$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glConvolutionParameterf$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glConvolutionParameterf").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFPROC glad_debug_glConvolutionParameterf
     * }
     */
    public static AddressLayout glad_debug_glConvolutionParameterf$layout() {
        return glad_debug_glConvolutionParameterf$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFPROC glad_debug_glConvolutionParameterf
     * }
     */
    public static MemorySegment glad_debug_glConvolutionParameterf$segment() {
        return glad_debug_glConvolutionParameterf$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFPROC glad_debug_glConvolutionParameterf
     * }
     */
    public static MemorySegment glad_debug_glConvolutionParameterf() {
        return glad_debug_glConvolutionParameterf$constants.SEGMENT.get(glad_debug_glConvolutionParameterf$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFPROC glad_debug_glConvolutionParameterf
     * }
     */
    public static void glad_debug_glConvolutionParameterf(MemorySegment varValue) {
        glad_debug_glConvolutionParameterf$constants.SEGMENT.set(glad_debug_glConvolutionParameterf$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glConvolutionParameterfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glConvolutionParameterfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv
     * }
     */
    public static AddressLayout glad_glConvolutionParameterfv$layout() {
        return glad_glConvolutionParameterfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv
     * }
     */
    public static MemorySegment glad_glConvolutionParameterfv$segment() {
        return glad_glConvolutionParameterfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv
     * }
     */
    public static MemorySegment glad_glConvolutionParameterfv() {
        return glad_glConvolutionParameterfv$constants.SEGMENT.get(glad_glConvolutionParameterfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv
     * }
     */
    public static void glad_glConvolutionParameterfv(MemorySegment varValue) {
        glad_glConvolutionParameterfv$constants.SEGMENT.set(glad_glConvolutionParameterfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glConvolutionParameterfv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glConvolutionParameterfv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_debug_glConvolutionParameterfv
     * }
     */
    public static AddressLayout glad_debug_glConvolutionParameterfv$layout() {
        return glad_debug_glConvolutionParameterfv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_debug_glConvolutionParameterfv
     * }
     */
    public static MemorySegment glad_debug_glConvolutionParameterfv$segment() {
        return glad_debug_glConvolutionParameterfv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_debug_glConvolutionParameterfv
     * }
     */
    public static MemorySegment glad_debug_glConvolutionParameterfv() {
        return glad_debug_glConvolutionParameterfv$constants.SEGMENT.get(glad_debug_glConvolutionParameterfv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_debug_glConvolutionParameterfv
     * }
     */
    public static void glad_debug_glConvolutionParameterfv(MemorySegment varValue) {
        glad_debug_glConvolutionParameterfv$constants.SEGMENT.set(glad_debug_glConvolutionParameterfv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glConvolutionParameteri$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glConvolutionParameteri").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri
     * }
     */
    public static AddressLayout glad_glConvolutionParameteri$layout() {
        return glad_glConvolutionParameteri$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri
     * }
     */
    public static MemorySegment glad_glConvolutionParameteri$segment() {
        return glad_glConvolutionParameteri$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri
     * }
     */
    public static MemorySegment glad_glConvolutionParameteri() {
        return glad_glConvolutionParameteri$constants.SEGMENT.get(glad_glConvolutionParameteri$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri
     * }
     */
    public static void glad_glConvolutionParameteri(MemorySegment varValue) {
        glad_glConvolutionParameteri$constants.SEGMENT.set(glad_glConvolutionParameteri$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glConvolutionParameteri$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glConvolutionParameteri").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIPROC glad_debug_glConvolutionParameteri
     * }
     */
    public static AddressLayout glad_debug_glConvolutionParameteri$layout() {
        return glad_debug_glConvolutionParameteri$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIPROC glad_debug_glConvolutionParameteri
     * }
     */
    public static MemorySegment glad_debug_glConvolutionParameteri$segment() {
        return glad_debug_glConvolutionParameteri$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIPROC glad_debug_glConvolutionParameteri
     * }
     */
    public static MemorySegment glad_debug_glConvolutionParameteri() {
        return glad_debug_glConvolutionParameteri$constants.SEGMENT.get(glad_debug_glConvolutionParameteri$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIPROC glad_debug_glConvolutionParameteri
     * }
     */
    public static void glad_debug_glConvolutionParameteri(MemorySegment varValue) {
        glad_debug_glConvolutionParameteri$constants.SEGMENT.set(glad_debug_glConvolutionParameteri$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glConvolutionParameteriv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glConvolutionParameteriv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv
     * }
     */
    public static AddressLayout glad_glConvolutionParameteriv$layout() {
        return glad_glConvolutionParameteriv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv
     * }
     */
    public static MemorySegment glad_glConvolutionParameteriv$segment() {
        return glad_glConvolutionParameteriv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv
     * }
     */
    public static MemorySegment glad_glConvolutionParameteriv() {
        return glad_glConvolutionParameteriv$constants.SEGMENT.get(glad_glConvolutionParameteriv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv
     * }
     */
    public static void glad_glConvolutionParameteriv(MemorySegment varValue) {
        glad_glConvolutionParameteriv$constants.SEGMENT.set(glad_glConvolutionParameteriv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glConvolutionParameteriv$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glConvolutionParameteriv").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_debug_glConvolutionParameteriv
     * }
     */
    public static AddressLayout glad_debug_glConvolutionParameteriv$layout() {
        return glad_debug_glConvolutionParameteriv$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_debug_glConvolutionParameteriv
     * }
     */
    public static MemorySegment glad_debug_glConvolutionParameteriv$segment() {
        return glad_debug_glConvolutionParameteriv$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_debug_glConvolutionParameteriv
     * }
     */
    public static MemorySegment glad_debug_glConvolutionParameteriv() {
        return glad_debug_glConvolutionParameteriv$constants.SEGMENT.get(glad_debug_glConvolutionParameteriv$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_debug_glConvolutionParameteriv
     * }
     */
    public static void glad_debug_glConvolutionParameteriv(MemorySegment varValue) {
        glad_debug_glConvolutionParameteriv$constants.SEGMENT.set(glad_debug_glConvolutionParameteriv$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData
     * }
     */
    public static AddressLayout glad_glCopyBufferSubData$layout() {
        return glad_glCopyBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData
     * }
     */
    public static MemorySegment glad_glCopyBufferSubData$segment() {
        return glad_glCopyBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData
     * }
     */
    public static MemorySegment glad_glCopyBufferSubData() {
        return glad_glCopyBufferSubData$constants.SEGMENT.get(glad_glCopyBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData
     * }
     */
    public static void glad_glCopyBufferSubData(MemorySegment varValue) {
        glad_glCopyBufferSubData$constants.SEGMENT.set(glad_glCopyBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData
     * }
     */
    public static AddressLayout glad_debug_glCopyBufferSubData$layout() {
        return glad_debug_glCopyBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glCopyBufferSubData$segment() {
        return glad_debug_glCopyBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glCopyBufferSubData() {
        return glad_debug_glCopyBufferSubData$constants.SEGMENT.get(glad_debug_glCopyBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData
     * }
     */
    public static void glad_debug_glCopyBufferSubData(MemorySegment varValue) {
        glad_debug_glCopyBufferSubData$constants.SEGMENT.set(glad_debug_glCopyBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyColorSubTable$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyColorSubTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable
     * }
     */
    public static AddressLayout glad_glCopyColorSubTable$layout() {
        return glad_glCopyColorSubTable$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable
     * }
     */
    public static MemorySegment glad_glCopyColorSubTable$segment() {
        return glad_glCopyColorSubTable$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable
     * }
     */
    public static MemorySegment glad_glCopyColorSubTable() {
        return glad_glCopyColorSubTable$constants.SEGMENT.get(glad_glCopyColorSubTable$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable
     * }
     */
    public static void glad_glCopyColorSubTable(MemorySegment varValue) {
        glad_glCopyColorSubTable$constants.SEGMENT.set(glad_glCopyColorSubTable$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyColorSubTable$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyColorSubTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORSUBTABLEPROC glad_debug_glCopyColorSubTable
     * }
     */
    public static AddressLayout glad_debug_glCopyColorSubTable$layout() {
        return glad_debug_glCopyColorSubTable$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORSUBTABLEPROC glad_debug_glCopyColorSubTable
     * }
     */
    public static MemorySegment glad_debug_glCopyColorSubTable$segment() {
        return glad_debug_glCopyColorSubTable$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORSUBTABLEPROC glad_debug_glCopyColorSubTable
     * }
     */
    public static MemorySegment glad_debug_glCopyColorSubTable() {
        return glad_debug_glCopyColorSubTable$constants.SEGMENT.get(glad_debug_glCopyColorSubTable$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORSUBTABLEPROC glad_debug_glCopyColorSubTable
     * }
     */
    public static void glad_debug_glCopyColorSubTable(MemorySegment varValue) {
        glad_debug_glCopyColorSubTable$constants.SEGMENT.set(glad_debug_glCopyColorSubTable$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyColorTable$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyColorTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable
     * }
     */
    public static AddressLayout glad_glCopyColorTable$layout() {
        return glad_glCopyColorTable$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable
     * }
     */
    public static MemorySegment glad_glCopyColorTable$segment() {
        return glad_glCopyColorTable$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable
     * }
     */
    public static MemorySegment glad_glCopyColorTable() {
        return glad_glCopyColorTable$constants.SEGMENT.get(glad_glCopyColorTable$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable
     * }
     */
    public static void glad_glCopyColorTable(MemorySegment varValue) {
        glad_glCopyColorTable$constants.SEGMENT.set(glad_glCopyColorTable$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyColorTable$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyColorTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORTABLEPROC glad_debug_glCopyColorTable
     * }
     */
    public static AddressLayout glad_debug_glCopyColorTable$layout() {
        return glad_debug_glCopyColorTable$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORTABLEPROC glad_debug_glCopyColorTable
     * }
     */
    public static MemorySegment glad_debug_glCopyColorTable$segment() {
        return glad_debug_glCopyColorTable$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORTABLEPROC glad_debug_glCopyColorTable
     * }
     */
    public static MemorySegment glad_debug_glCopyColorTable() {
        return glad_debug_glCopyColorTable$constants.SEGMENT.get(glad_debug_glCopyColorTable$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCOLORTABLEPROC glad_debug_glCopyColorTable
     * }
     */
    public static void glad_debug_glCopyColorTable(MemorySegment varValue) {
        glad_debug_glCopyColorTable$constants.SEGMENT.set(glad_debug_glCopyColorTable$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyConvolutionFilter1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyConvolutionFilter1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D
     * }
     */
    public static AddressLayout glad_glCopyConvolutionFilter1D$layout() {
        return glad_glCopyConvolutionFilter1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D
     * }
     */
    public static MemorySegment glad_glCopyConvolutionFilter1D$segment() {
        return glad_glCopyConvolutionFilter1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D
     * }
     */
    public static MemorySegment glad_glCopyConvolutionFilter1D() {
        return glad_glCopyConvolutionFilter1D$constants.SEGMENT.get(glad_glCopyConvolutionFilter1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D
     * }
     */
    public static void glad_glCopyConvolutionFilter1D(MemorySegment varValue) {
        glad_glCopyConvolutionFilter1D$constants.SEGMENT.set(glad_glCopyConvolutionFilter1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyConvolutionFilter1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyConvolutionFilter1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_debug_glCopyConvolutionFilter1D
     * }
     */
    public static AddressLayout glad_debug_glCopyConvolutionFilter1D$layout() {
        return glad_debug_glCopyConvolutionFilter1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_debug_glCopyConvolutionFilter1D
     * }
     */
    public static MemorySegment glad_debug_glCopyConvolutionFilter1D$segment() {
        return glad_debug_glCopyConvolutionFilter1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_debug_glCopyConvolutionFilter1D
     * }
     */
    public static MemorySegment glad_debug_glCopyConvolutionFilter1D() {
        return glad_debug_glCopyConvolutionFilter1D$constants.SEGMENT.get(glad_debug_glCopyConvolutionFilter1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_debug_glCopyConvolutionFilter1D
     * }
     */
    public static void glad_debug_glCopyConvolutionFilter1D(MemorySegment varValue) {
        glad_debug_glCopyConvolutionFilter1D$constants.SEGMENT.set(glad_debug_glCopyConvolutionFilter1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyConvolutionFilter2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyConvolutionFilter2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D
     * }
     */
    public static AddressLayout glad_glCopyConvolutionFilter2D$layout() {
        return glad_glCopyConvolutionFilter2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D
     * }
     */
    public static MemorySegment glad_glCopyConvolutionFilter2D$segment() {
        return glad_glCopyConvolutionFilter2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D
     * }
     */
    public static MemorySegment glad_glCopyConvolutionFilter2D() {
        return glad_glCopyConvolutionFilter2D$constants.SEGMENT.get(glad_glCopyConvolutionFilter2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D
     * }
     */
    public static void glad_glCopyConvolutionFilter2D(MemorySegment varValue) {
        glad_glCopyConvolutionFilter2D$constants.SEGMENT.set(glad_glCopyConvolutionFilter2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyConvolutionFilter2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyConvolutionFilter2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_debug_glCopyConvolutionFilter2D
     * }
     */
    public static AddressLayout glad_debug_glCopyConvolutionFilter2D$layout() {
        return glad_debug_glCopyConvolutionFilter2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_debug_glCopyConvolutionFilter2D
     * }
     */
    public static MemorySegment glad_debug_glCopyConvolutionFilter2D$segment() {
        return glad_debug_glCopyConvolutionFilter2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_debug_glCopyConvolutionFilter2D
     * }
     */
    public static MemorySegment glad_debug_glCopyConvolutionFilter2D() {
        return glad_debug_glCopyConvolutionFilter2D$constants.SEGMENT.get(glad_debug_glCopyConvolutionFilter2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_debug_glCopyConvolutionFilter2D
     * }
     */
    public static void glad_debug_glCopyConvolutionFilter2D(MemorySegment varValue) {
        glad_debug_glCopyConvolutionFilter2D$constants.SEGMENT.set(glad_debug_glCopyConvolutionFilter2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyImageSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyImageSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData
     * }
     */
    public static AddressLayout glad_glCopyImageSubData$layout() {
        return glad_glCopyImageSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData
     * }
     */
    public static MemorySegment glad_glCopyImageSubData$segment() {
        return glad_glCopyImageSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData
     * }
     */
    public static MemorySegment glad_glCopyImageSubData() {
        return glad_glCopyImageSubData$constants.SEGMENT.get(glad_glCopyImageSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData
     * }
     */
    public static void glad_glCopyImageSubData(MemorySegment varValue) {
        glad_glCopyImageSubData$constants.SEGMENT.set(glad_glCopyImageSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyImageSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyImageSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYIMAGESUBDATAPROC glad_debug_glCopyImageSubData
     * }
     */
    public static AddressLayout glad_debug_glCopyImageSubData$layout() {
        return glad_debug_glCopyImageSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYIMAGESUBDATAPROC glad_debug_glCopyImageSubData
     * }
     */
    public static MemorySegment glad_debug_glCopyImageSubData$segment() {
        return glad_debug_glCopyImageSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYIMAGESUBDATAPROC glad_debug_glCopyImageSubData
     * }
     */
    public static MemorySegment glad_debug_glCopyImageSubData() {
        return glad_debug_glCopyImageSubData$constants.SEGMENT.get(glad_debug_glCopyImageSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYIMAGESUBDATAPROC glad_debug_glCopyImageSubData
     * }
     */
    public static void glad_debug_glCopyImageSubData(MemorySegment varValue) {
        glad_debug_glCopyImageSubData$constants.SEGMENT.set(glad_debug_glCopyImageSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyMultiTexImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyMultiTexImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_glCopyMultiTexImage1DEXT
     * }
     */
    public static AddressLayout glad_glCopyMultiTexImage1DEXT$layout() {
        return glad_glCopyMultiTexImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_glCopyMultiTexImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexImage1DEXT$segment() {
        return glad_glCopyMultiTexImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_glCopyMultiTexImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexImage1DEXT() {
        return glad_glCopyMultiTexImage1DEXT$constants.SEGMENT.get(glad_glCopyMultiTexImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_glCopyMultiTexImage1DEXT
     * }
     */
    public static void glad_glCopyMultiTexImage1DEXT(MemorySegment varValue) {
        glad_glCopyMultiTexImage1DEXT$constants.SEGMENT.set(glad_glCopyMultiTexImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyMultiTexImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyMultiTexImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_debug_glCopyMultiTexImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyMultiTexImage1DEXT$layout() {
        return glad_debug_glCopyMultiTexImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_debug_glCopyMultiTexImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexImage1DEXT$segment() {
        return glad_debug_glCopyMultiTexImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_debug_glCopyMultiTexImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexImage1DEXT() {
        return glad_debug_glCopyMultiTexImage1DEXT$constants.SEGMENT.get(glad_debug_glCopyMultiTexImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_debug_glCopyMultiTexImage1DEXT
     * }
     */
    public static void glad_debug_glCopyMultiTexImage1DEXT(MemorySegment varValue) {
        glad_debug_glCopyMultiTexImage1DEXT$constants.SEGMENT.set(glad_debug_glCopyMultiTexImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyMultiTexImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyMultiTexImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_glCopyMultiTexImage2DEXT
     * }
     */
    public static AddressLayout glad_glCopyMultiTexImage2DEXT$layout() {
        return glad_glCopyMultiTexImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_glCopyMultiTexImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexImage2DEXT$segment() {
        return glad_glCopyMultiTexImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_glCopyMultiTexImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexImage2DEXT() {
        return glad_glCopyMultiTexImage2DEXT$constants.SEGMENT.get(glad_glCopyMultiTexImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_glCopyMultiTexImage2DEXT
     * }
     */
    public static void glad_glCopyMultiTexImage2DEXT(MemorySegment varValue) {
        glad_glCopyMultiTexImage2DEXT$constants.SEGMENT.set(glad_glCopyMultiTexImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyMultiTexImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyMultiTexImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_debug_glCopyMultiTexImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyMultiTexImage2DEXT$layout() {
        return glad_debug_glCopyMultiTexImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_debug_glCopyMultiTexImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexImage2DEXT$segment() {
        return glad_debug_glCopyMultiTexImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_debug_glCopyMultiTexImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexImage2DEXT() {
        return glad_debug_glCopyMultiTexImage2DEXT$constants.SEGMENT.get(glad_debug_glCopyMultiTexImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_debug_glCopyMultiTexImage2DEXT
     * }
     */
    public static void glad_debug_glCopyMultiTexImage2DEXT(MemorySegment varValue) {
        glad_debug_glCopyMultiTexImage2DEXT$constants.SEGMENT.set(glad_debug_glCopyMultiTexImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyMultiTexSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyMultiTexSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_glCopyMultiTexSubImage1DEXT
     * }
     */
    public static AddressLayout glad_glCopyMultiTexSubImage1DEXT$layout() {
        return glad_glCopyMultiTexSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_glCopyMultiTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexSubImage1DEXT$segment() {
        return glad_glCopyMultiTexSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_glCopyMultiTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexSubImage1DEXT() {
        return glad_glCopyMultiTexSubImage1DEXT$constants.SEGMENT.get(glad_glCopyMultiTexSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_glCopyMultiTexSubImage1DEXT
     * }
     */
    public static void glad_glCopyMultiTexSubImage1DEXT(MemorySegment varValue) {
        glad_glCopyMultiTexSubImage1DEXT$constants.SEGMENT.set(glad_glCopyMultiTexSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyMultiTexSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyMultiTexSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCopyMultiTexSubImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyMultiTexSubImage1DEXT$layout() {
        return glad_debug_glCopyMultiTexSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCopyMultiTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexSubImage1DEXT$segment() {
        return glad_debug_glCopyMultiTexSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCopyMultiTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexSubImage1DEXT() {
        return glad_debug_glCopyMultiTexSubImage1DEXT$constants.SEGMENT.get(glad_debug_glCopyMultiTexSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCopyMultiTexSubImage1DEXT
     * }
     */
    public static void glad_debug_glCopyMultiTexSubImage1DEXT(MemorySegment varValue) {
        glad_debug_glCopyMultiTexSubImage1DEXT$constants.SEGMENT.set(glad_debug_glCopyMultiTexSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyMultiTexSubImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyMultiTexSubImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_glCopyMultiTexSubImage2DEXT
     * }
     */
    public static AddressLayout glad_glCopyMultiTexSubImage2DEXT$layout() {
        return glad_glCopyMultiTexSubImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_glCopyMultiTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexSubImage2DEXT$segment() {
        return glad_glCopyMultiTexSubImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_glCopyMultiTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexSubImage2DEXT() {
        return glad_glCopyMultiTexSubImage2DEXT$constants.SEGMENT.get(glad_glCopyMultiTexSubImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_glCopyMultiTexSubImage2DEXT
     * }
     */
    public static void glad_glCopyMultiTexSubImage2DEXT(MemorySegment varValue) {
        glad_glCopyMultiTexSubImage2DEXT$constants.SEGMENT.set(glad_glCopyMultiTexSubImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyMultiTexSubImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyMultiTexSubImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCopyMultiTexSubImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyMultiTexSubImage2DEXT$layout() {
        return glad_debug_glCopyMultiTexSubImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCopyMultiTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexSubImage2DEXT$segment() {
        return glad_debug_glCopyMultiTexSubImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCopyMultiTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexSubImage2DEXT() {
        return glad_debug_glCopyMultiTexSubImage2DEXT$constants.SEGMENT.get(glad_debug_glCopyMultiTexSubImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCopyMultiTexSubImage2DEXT
     * }
     */
    public static void glad_debug_glCopyMultiTexSubImage2DEXT(MemorySegment varValue) {
        glad_debug_glCopyMultiTexSubImage2DEXT$constants.SEGMENT.set(glad_debug_glCopyMultiTexSubImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyMultiTexSubImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyMultiTexSubImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_glCopyMultiTexSubImage3DEXT
     * }
     */
    public static AddressLayout glad_glCopyMultiTexSubImage3DEXT$layout() {
        return glad_glCopyMultiTexSubImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_glCopyMultiTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexSubImage3DEXT$segment() {
        return glad_glCopyMultiTexSubImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_glCopyMultiTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_glCopyMultiTexSubImage3DEXT() {
        return glad_glCopyMultiTexSubImage3DEXT$constants.SEGMENT.get(glad_glCopyMultiTexSubImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_glCopyMultiTexSubImage3DEXT
     * }
     */
    public static void glad_glCopyMultiTexSubImage3DEXT(MemorySegment varValue) {
        glad_glCopyMultiTexSubImage3DEXT$constants.SEGMENT.set(glad_glCopyMultiTexSubImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyMultiTexSubImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyMultiTexSubImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCopyMultiTexSubImage3DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyMultiTexSubImage3DEXT$layout() {
        return glad_debug_glCopyMultiTexSubImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCopyMultiTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexSubImage3DEXT$segment() {
        return glad_debug_glCopyMultiTexSubImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCopyMultiTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyMultiTexSubImage3DEXT() {
        return glad_debug_glCopyMultiTexSubImage3DEXT$constants.SEGMENT.get(glad_debug_glCopyMultiTexSubImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCopyMultiTexSubImage3DEXT
     * }
     */
    public static void glad_debug_glCopyMultiTexSubImage3DEXT(MemorySegment varValue) {
        glad_debug_glCopyMultiTexSubImage3DEXT$constants.SEGMENT.set(glad_debug_glCopyMultiTexSubImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyNamedBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyNamedBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData
     * }
     */
    public static AddressLayout glad_glCopyNamedBufferSubData$layout() {
        return glad_glCopyNamedBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData
     * }
     */
    public static MemorySegment glad_glCopyNamedBufferSubData$segment() {
        return glad_glCopyNamedBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData
     * }
     */
    public static MemorySegment glad_glCopyNamedBufferSubData() {
        return glad_glCopyNamedBufferSubData$constants.SEGMENT.get(glad_glCopyNamedBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData
     * }
     */
    public static void glad_glCopyNamedBufferSubData(MemorySegment varValue) {
        glad_glCopyNamedBufferSubData$constants.SEGMENT.set(glad_glCopyNamedBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyNamedBufferSubData$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyNamedBufferSubData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_debug_glCopyNamedBufferSubData
     * }
     */
    public static AddressLayout glad_debug_glCopyNamedBufferSubData$layout() {
        return glad_debug_glCopyNamedBufferSubData$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_debug_glCopyNamedBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glCopyNamedBufferSubData$segment() {
        return glad_debug_glCopyNamedBufferSubData$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_debug_glCopyNamedBufferSubData
     * }
     */
    public static MemorySegment glad_debug_glCopyNamedBufferSubData() {
        return glad_debug_glCopyNamedBufferSubData$constants.SEGMENT.get(glad_debug_glCopyNamedBufferSubData$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_debug_glCopyNamedBufferSubData
     * }
     */
    public static void glad_debug_glCopyNamedBufferSubData(MemorySegment varValue) {
        glad_debug_glCopyNamedBufferSubData$constants.SEGMENT.set(glad_debug_glCopyNamedBufferSubData$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyPixels$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyPixels").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYPIXELSPROC glad_glCopyPixels
     * }
     */
    public static AddressLayout glad_glCopyPixels$layout() {
        return glad_glCopyPixels$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYPIXELSPROC glad_glCopyPixels
     * }
     */
    public static MemorySegment glad_glCopyPixels$segment() {
        return glad_glCopyPixels$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYPIXELSPROC glad_glCopyPixels
     * }
     */
    public static MemorySegment glad_glCopyPixels() {
        return glad_glCopyPixels$constants.SEGMENT.get(glad_glCopyPixels$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYPIXELSPROC glad_glCopyPixels
     * }
     */
    public static void glad_glCopyPixels(MemorySegment varValue) {
        glad_glCopyPixels$constants.SEGMENT.set(glad_glCopyPixels$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyPixels$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyPixels").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYPIXELSPROC glad_debug_glCopyPixels
     * }
     */
    public static AddressLayout glad_debug_glCopyPixels$layout() {
        return glad_debug_glCopyPixels$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYPIXELSPROC glad_debug_glCopyPixels
     * }
     */
    public static MemorySegment glad_debug_glCopyPixels$segment() {
        return glad_debug_glCopyPixels$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYPIXELSPROC glad_debug_glCopyPixels
     * }
     */
    public static MemorySegment glad_debug_glCopyPixels() {
        return glad_debug_glCopyPixels$constants.SEGMENT.get(glad_debug_glCopyPixels$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYPIXELSPROC glad_debug_glCopyPixels
     * }
     */
    public static void glad_debug_glCopyPixels(MemorySegment varValue) {
        glad_debug_glCopyPixels$constants.SEGMENT.set(glad_debug_glCopyPixels$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D
     * }
     */
    public static AddressLayout glad_glCopyTexImage1D$layout() {
        return glad_glCopyTexImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D
     * }
     */
    public static MemorySegment glad_glCopyTexImage1D$segment() {
        return glad_glCopyTexImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D
     * }
     */
    public static MemorySegment glad_glCopyTexImage1D() {
        return glad_glCopyTexImage1D$constants.SEGMENT.get(glad_glCopyTexImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D
     * }
     */
    public static void glad_glCopyTexImage1D(MemorySegment varValue) {
        glad_glCopyTexImage1D$constants.SEGMENT.set(glad_glCopyTexImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D
     * }
     */
    public static AddressLayout glad_debug_glCopyTexImage1D$layout() {
        return glad_debug_glCopyTexImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexImage1D$segment() {
        return glad_debug_glCopyTexImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexImage1D() {
        return glad_debug_glCopyTexImage1D$constants.SEGMENT.get(glad_debug_glCopyTexImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D
     * }
     */
    public static void glad_debug_glCopyTexImage1D(MemorySegment varValue) {
        glad_debug_glCopyTexImage1D$constants.SEGMENT.set(glad_debug_glCopyTexImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DEXTPROC glad_glCopyTexImage1DEXT
     * }
     */
    public static AddressLayout glad_glCopyTexImage1DEXT$layout() {
        return glad_glCopyTexImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DEXTPROC glad_glCopyTexImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexImage1DEXT$segment() {
        return glad_glCopyTexImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DEXTPROC glad_glCopyTexImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexImage1DEXT() {
        return glad_glCopyTexImage1DEXT$constants.SEGMENT.get(glad_glCopyTexImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DEXTPROC glad_glCopyTexImage1DEXT
     * }
     */
    public static void glad_glCopyTexImage1DEXT(MemorySegment varValue) {
        glad_glCopyTexImage1DEXT$constants.SEGMENT.set(glad_glCopyTexImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DEXTPROC glad_debug_glCopyTexImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyTexImage1DEXT$layout() {
        return glad_debug_glCopyTexImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DEXTPROC glad_debug_glCopyTexImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexImage1DEXT$segment() {
        return glad_debug_glCopyTexImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DEXTPROC glad_debug_glCopyTexImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexImage1DEXT() {
        return glad_debug_glCopyTexImage1DEXT$constants.SEGMENT.get(glad_debug_glCopyTexImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE1DEXTPROC glad_debug_glCopyTexImage1DEXT
     * }
     */
    public static void glad_debug_glCopyTexImage1DEXT(MemorySegment varValue) {
        glad_debug_glCopyTexImage1DEXT$constants.SEGMENT.set(glad_debug_glCopyTexImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D
     * }
     */
    public static AddressLayout glad_glCopyTexImage2D$layout() {
        return glad_glCopyTexImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D
     * }
     */
    public static MemorySegment glad_glCopyTexImage2D$segment() {
        return glad_glCopyTexImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D
     * }
     */
    public static MemorySegment glad_glCopyTexImage2D() {
        return glad_glCopyTexImage2D$constants.SEGMENT.get(glad_glCopyTexImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D
     * }
     */
    public static void glad_glCopyTexImage2D(MemorySegment varValue) {
        glad_glCopyTexImage2D$constants.SEGMENT.set(glad_glCopyTexImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D
     * }
     */
    public static AddressLayout glad_debug_glCopyTexImage2D$layout() {
        return glad_debug_glCopyTexImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexImage2D$segment() {
        return glad_debug_glCopyTexImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexImage2D() {
        return glad_debug_glCopyTexImage2D$constants.SEGMENT.get(glad_debug_glCopyTexImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D
     * }
     */
    public static void glad_debug_glCopyTexImage2D(MemorySegment varValue) {
        glad_debug_glCopyTexImage2D$constants.SEGMENT.set(glad_debug_glCopyTexImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DEXTPROC glad_glCopyTexImage2DEXT
     * }
     */
    public static AddressLayout glad_glCopyTexImage2DEXT$layout() {
        return glad_glCopyTexImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DEXTPROC glad_glCopyTexImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexImage2DEXT$segment() {
        return glad_glCopyTexImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DEXTPROC glad_glCopyTexImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexImage2DEXT() {
        return glad_glCopyTexImage2DEXT$constants.SEGMENT.get(glad_glCopyTexImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DEXTPROC glad_glCopyTexImage2DEXT
     * }
     */
    public static void glad_glCopyTexImage2DEXT(MemorySegment varValue) {
        glad_glCopyTexImage2DEXT$constants.SEGMENT.set(glad_glCopyTexImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DEXTPROC glad_debug_glCopyTexImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyTexImage2DEXT$layout() {
        return glad_debug_glCopyTexImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DEXTPROC glad_debug_glCopyTexImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexImage2DEXT$segment() {
        return glad_debug_glCopyTexImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DEXTPROC glad_debug_glCopyTexImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexImage2DEXT() {
        return glad_debug_glCopyTexImage2DEXT$constants.SEGMENT.get(glad_debug_glCopyTexImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXIMAGE2DEXTPROC glad_debug_glCopyTexImage2DEXT
     * }
     */
    public static void glad_debug_glCopyTexImage2DEXT(MemorySegment varValue) {
        glad_debug_glCopyTexImage2DEXT$constants.SEGMENT.set(glad_debug_glCopyTexImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexSubImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexSubImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D
     * }
     */
    public static AddressLayout glad_glCopyTexSubImage1D$layout() {
        return glad_glCopyTexSubImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage1D$segment() {
        return glad_glCopyTexSubImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage1D() {
        return glad_glCopyTexSubImage1D$constants.SEGMENT.get(glad_glCopyTexSubImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D
     * }
     */
    public static void glad_glCopyTexSubImage1D(MemorySegment varValue) {
        glad_glCopyTexSubImage1D$constants.SEGMENT.set(glad_glCopyTexSubImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexSubImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexSubImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D
     * }
     */
    public static AddressLayout glad_debug_glCopyTexSubImage1D$layout() {
        return glad_debug_glCopyTexSubImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage1D$segment() {
        return glad_debug_glCopyTexSubImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage1D() {
        return glad_debug_glCopyTexSubImage1D$constants.SEGMENT.get(glad_debug_glCopyTexSubImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D
     * }
     */
    public static void glad_debug_glCopyTexSubImage1D(MemorySegment varValue) {
        glad_debug_glCopyTexSubImage1D$constants.SEGMENT.set(glad_debug_glCopyTexSubImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_glCopyTexSubImage1DEXT
     * }
     */
    public static AddressLayout glad_glCopyTexSubImage1DEXT$layout() {
        return glad_glCopyTexSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_glCopyTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage1DEXT$segment() {
        return glad_glCopyTexSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_glCopyTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage1DEXT() {
        return glad_glCopyTexSubImage1DEXT$constants.SEGMENT.get(glad_glCopyTexSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_glCopyTexSubImage1DEXT
     * }
     */
    public static void glad_glCopyTexSubImage1DEXT(MemorySegment varValue) {
        glad_glCopyTexSubImage1DEXT$constants.SEGMENT.set(glad_glCopyTexSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_debug_glCopyTexSubImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyTexSubImage1DEXT$layout() {
        return glad_debug_glCopyTexSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_debug_glCopyTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage1DEXT$segment() {
        return glad_debug_glCopyTexSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_debug_glCopyTexSubImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage1DEXT() {
        return glad_debug_glCopyTexSubImage1DEXT$constants.SEGMENT.get(glad_debug_glCopyTexSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_debug_glCopyTexSubImage1DEXT
     * }
     */
    public static void glad_debug_glCopyTexSubImage1DEXT(MemorySegment varValue) {
        glad_debug_glCopyTexSubImage1DEXT$constants.SEGMENT.set(glad_debug_glCopyTexSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexSubImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexSubImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D
     * }
     */
    public static AddressLayout glad_glCopyTexSubImage2D$layout() {
        return glad_glCopyTexSubImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage2D$segment() {
        return glad_glCopyTexSubImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage2D() {
        return glad_glCopyTexSubImage2D$constants.SEGMENT.get(glad_glCopyTexSubImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D
     * }
     */
    public static void glad_glCopyTexSubImage2D(MemorySegment varValue) {
        glad_glCopyTexSubImage2D$constants.SEGMENT.set(glad_glCopyTexSubImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexSubImage2D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexSubImage2D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D
     * }
     */
    public static AddressLayout glad_debug_glCopyTexSubImage2D$layout() {
        return glad_debug_glCopyTexSubImage2D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage2D$segment() {
        return glad_debug_glCopyTexSubImage2D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage2D() {
        return glad_debug_glCopyTexSubImage2D$constants.SEGMENT.get(glad_debug_glCopyTexSubImage2D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D
     * }
     */
    public static void glad_debug_glCopyTexSubImage2D(MemorySegment varValue) {
        glad_debug_glCopyTexSubImage2D$constants.SEGMENT.set(glad_debug_glCopyTexSubImage2D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexSubImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexSubImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_glCopyTexSubImage2DEXT
     * }
     */
    public static AddressLayout glad_glCopyTexSubImage2DEXT$layout() {
        return glad_glCopyTexSubImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_glCopyTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage2DEXT$segment() {
        return glad_glCopyTexSubImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_glCopyTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage2DEXT() {
        return glad_glCopyTexSubImage2DEXT$constants.SEGMENT.get(glad_glCopyTexSubImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_glCopyTexSubImage2DEXT
     * }
     */
    public static void glad_glCopyTexSubImage2DEXT(MemorySegment varValue) {
        glad_glCopyTexSubImage2DEXT$constants.SEGMENT.set(glad_glCopyTexSubImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexSubImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexSubImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_debug_glCopyTexSubImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyTexSubImage2DEXT$layout() {
        return glad_debug_glCopyTexSubImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_debug_glCopyTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage2DEXT$segment() {
        return glad_debug_glCopyTexSubImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_debug_glCopyTexSubImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage2DEXT() {
        return glad_debug_glCopyTexSubImage2DEXT$constants.SEGMENT.get(glad_debug_glCopyTexSubImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_debug_glCopyTexSubImage2DEXT
     * }
     */
    public static void glad_debug_glCopyTexSubImage2DEXT(MemorySegment varValue) {
        glad_debug_glCopyTexSubImage2DEXT$constants.SEGMENT.set(glad_debug_glCopyTexSubImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexSubImage3D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexSubImage3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D
     * }
     */
    public static AddressLayout glad_glCopyTexSubImage3D$layout() {
        return glad_glCopyTexSubImage3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage3D$segment() {
        return glad_glCopyTexSubImage3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage3D() {
        return glad_glCopyTexSubImage3D$constants.SEGMENT.get(glad_glCopyTexSubImage3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D
     * }
     */
    public static void glad_glCopyTexSubImage3D(MemorySegment varValue) {
        glad_glCopyTexSubImage3D$constants.SEGMENT.set(glad_glCopyTexSubImage3D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexSubImage3D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexSubImage3D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D
     * }
     */
    public static AddressLayout glad_debug_glCopyTexSubImage3D$layout() {
        return glad_debug_glCopyTexSubImage3D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage3D$segment() {
        return glad_debug_glCopyTexSubImage3D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage3D() {
        return glad_debug_glCopyTexSubImage3D$constants.SEGMENT.get(glad_debug_glCopyTexSubImage3D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D
     * }
     */
    public static void glad_debug_glCopyTexSubImage3D(MemorySegment varValue) {
        glad_debug_glCopyTexSubImage3D$constants.SEGMENT.set(glad_debug_glCopyTexSubImage3D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTexSubImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTexSubImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_glCopyTexSubImage3DEXT
     * }
     */
    public static AddressLayout glad_glCopyTexSubImage3DEXT$layout() {
        return glad_glCopyTexSubImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_glCopyTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage3DEXT$segment() {
        return glad_glCopyTexSubImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_glCopyTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_glCopyTexSubImage3DEXT() {
        return glad_glCopyTexSubImage3DEXT$constants.SEGMENT.get(glad_glCopyTexSubImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_glCopyTexSubImage3DEXT
     * }
     */
    public static void glad_glCopyTexSubImage3DEXT(MemorySegment varValue) {
        glad_glCopyTexSubImage3DEXT$constants.SEGMENT.set(glad_glCopyTexSubImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTexSubImage3DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTexSubImage3DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_debug_glCopyTexSubImage3DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyTexSubImage3DEXT$layout() {
        return glad_debug_glCopyTexSubImage3DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_debug_glCopyTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage3DEXT$segment() {
        return glad_debug_glCopyTexSubImage3DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_debug_glCopyTexSubImage3DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTexSubImage3DEXT() {
        return glad_debug_glCopyTexSubImage3DEXT$constants.SEGMENT.get(glad_debug_glCopyTexSubImage3DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_debug_glCopyTexSubImage3DEXT
     * }
     */
    public static void glad_debug_glCopyTexSubImage3DEXT(MemorySegment varValue) {
        glad_debug_glCopyTexSubImage3DEXT$constants.SEGMENT.set(glad_debug_glCopyTexSubImage3DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTextureImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTextureImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_glCopyTextureImage1DEXT
     * }
     */
    public static AddressLayout glad_glCopyTextureImage1DEXT$layout() {
        return glad_glCopyTextureImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_glCopyTextureImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyTextureImage1DEXT$segment() {
        return glad_glCopyTextureImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_glCopyTextureImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyTextureImage1DEXT() {
        return glad_glCopyTextureImage1DEXT$constants.SEGMENT.get(glad_glCopyTextureImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_glCopyTextureImage1DEXT
     * }
     */
    public static void glad_glCopyTextureImage1DEXT(MemorySegment varValue) {
        glad_glCopyTextureImage1DEXT$constants.SEGMENT.set(glad_glCopyTextureImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTextureImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTextureImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_debug_glCopyTextureImage1DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyTextureImage1DEXT$layout() {
        return glad_debug_glCopyTextureImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_debug_glCopyTextureImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTextureImage1DEXT$segment() {
        return glad_debug_glCopyTextureImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_debug_glCopyTextureImage1DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTextureImage1DEXT() {
        return glad_debug_glCopyTextureImage1DEXT$constants.SEGMENT.get(glad_debug_glCopyTextureImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_debug_glCopyTextureImage1DEXT
     * }
     */
    public static void glad_debug_glCopyTextureImage1DEXT(MemorySegment varValue) {
        glad_debug_glCopyTextureImage1DEXT$constants.SEGMENT.set(glad_debug_glCopyTextureImage1DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTextureImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTextureImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_glCopyTextureImage2DEXT
     * }
     */
    public static AddressLayout glad_glCopyTextureImage2DEXT$layout() {
        return glad_glCopyTextureImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_glCopyTextureImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyTextureImage2DEXT$segment() {
        return glad_glCopyTextureImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_glCopyTextureImage2DEXT
     * }
     */
    public static MemorySegment glad_glCopyTextureImage2DEXT() {
        return glad_glCopyTextureImage2DEXT$constants.SEGMENT.get(glad_glCopyTextureImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_glCopyTextureImage2DEXT
     * }
     */
    public static void glad_glCopyTextureImage2DEXT(MemorySegment varValue) {
        glad_glCopyTextureImage2DEXT$constants.SEGMENT.set(glad_glCopyTextureImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTextureImage2DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTextureImage2DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_debug_glCopyTextureImage2DEXT
     * }
     */
    public static AddressLayout glad_debug_glCopyTextureImage2DEXT$layout() {
        return glad_debug_glCopyTextureImage2DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_debug_glCopyTextureImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTextureImage2DEXT$segment() {
        return glad_debug_glCopyTextureImage2DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_debug_glCopyTextureImage2DEXT
     * }
     */
    public static MemorySegment glad_debug_glCopyTextureImage2DEXT() {
        return glad_debug_glCopyTextureImage2DEXT$constants.SEGMENT.get(glad_debug_glCopyTextureImage2DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_debug_glCopyTextureImage2DEXT
     * }
     */
    public static void glad_debug_glCopyTextureImage2DEXT(MemorySegment varValue) {
        glad_debug_glCopyTextureImage2DEXT$constants.SEGMENT.set(glad_debug_glCopyTextureImage2DEXT$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTextureSubImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTextureSubImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D
     * }
     */
    public static AddressLayout glad_glCopyTextureSubImage1D$layout() {
        return glad_glCopyTextureSubImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D
     * }
     */
    public static MemorySegment glad_glCopyTextureSubImage1D$segment() {
        return glad_glCopyTextureSubImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D
     * }
     */
    public static MemorySegment glad_glCopyTextureSubImage1D() {
        return glad_glCopyTextureSubImage1D$constants.SEGMENT.get(glad_glCopyTextureSubImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D
     * }
     */
    public static void glad_glCopyTextureSubImage1D(MemorySegment varValue) {
        glad_glCopyTextureSubImage1D$constants.SEGMENT.set(glad_glCopyTextureSubImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_debug_glCopyTextureSubImage1D$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_debug_glCopyTextureSubImage1D").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_debug_glCopyTextureSubImage1D
     * }
     */
    public static AddressLayout glad_debug_glCopyTextureSubImage1D$layout() {
        return glad_debug_glCopyTextureSubImage1D$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_debug_glCopyTextureSubImage1D
     * }
     */
    public static MemorySegment glad_debug_glCopyTextureSubImage1D$segment() {
        return glad_debug_glCopyTextureSubImage1D$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_debug_glCopyTextureSubImage1D
     * }
     */
    public static MemorySegment glad_debug_glCopyTextureSubImage1D() {
        return glad_debug_glCopyTextureSubImage1D$constants.SEGMENT.get(glad_debug_glCopyTextureSubImage1D$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_debug_glCopyTextureSubImage1D
     * }
     */
    public static void glad_debug_glCopyTextureSubImage1D(MemorySegment varValue) {
        glad_debug_glCopyTextureSubImage1D$constants.SEGMENT.set(glad_debug_glCopyTextureSubImage1D$constants.LAYOUT, 0L, varValue);
    }

    private static class glad_glCopyTextureSubImage1DEXT$constants {
        public static final AddressLayout LAYOUT = glcore.C_POINTER;
        public static final MemorySegment SEGMENT = glcore.findOrThrow("glad_glCopyTextureSubImage1DEXT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_glCopyTextureSubImage1DEXT
     * }
     */
    public static AddressLayout glad_glCopyTextureSubImage1DEXT$layout() {
        return glad_glCopyTextureSubImage1DEXT$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_glCopyTextureSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyTextureSubImage1DEXT$segment() {
        return glad_glCopyTextureSubImage1DEXT$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_glCopyTextureSubImage1DEXT
     * }
     */
    public static MemorySegment glad_glCopyTextureSubImage1DEXT() {
        return glad_glCopyTextureSubImage1DEXT$constants.SEGMENT.get(glad_glCopyTextureSubImage1DEXT$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_glCopyTextureSubImage1DEXT
     * }
     */
    public static void glad_glCopyTextureSubImage1DEXT(MemorySegment varValue) {
        glad_glCopyTextureSubImage1DEXT$constants.SEGMENT.set(glad_glCopyTextureSubImage1DEXT$constants.LAYOUT, 0L, varValue);
    }
}

