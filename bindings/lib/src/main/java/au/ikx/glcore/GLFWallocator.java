// Generated by jextract

package au.ikx.glcore;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct GLFWallocator {
 *     GLFWallocatefun allocate;
 *     GLFWreallocatefun reallocate;
 *     GLFWdeallocatefun deallocate;
 *     void *user;
 * }
 * }
 */
public class GLFWallocator {

    GLFWallocator() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        glcore.C_POINTER.withName("allocate"),
        glcore.C_POINTER.withName("reallocate"),
        glcore.C_POINTER.withName("deallocate"),
        glcore.C_POINTER.withName("user")
    ).withName("GLFWallocator");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout allocate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("allocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GLFWallocatefun allocate
     * }
     */
    public static final AddressLayout allocate$layout() {
        return allocate$LAYOUT;
    }

    private static final long allocate$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GLFWallocatefun allocate
     * }
     */
    public static final long allocate$offset() {
        return allocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GLFWallocatefun allocate
     * }
     */
    public static MemorySegment allocate(MemorySegment struct) {
        return struct.get(allocate$LAYOUT, allocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GLFWallocatefun allocate
     * }
     */
    public static void allocate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(allocate$LAYOUT, allocate$OFFSET, fieldValue);
    }

    private static final AddressLayout reallocate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reallocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GLFWreallocatefun reallocate
     * }
     */
    public static final AddressLayout reallocate$layout() {
        return reallocate$LAYOUT;
    }

    private static final long reallocate$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GLFWreallocatefun reallocate
     * }
     */
    public static final long reallocate$offset() {
        return reallocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GLFWreallocatefun reallocate
     * }
     */
    public static MemorySegment reallocate(MemorySegment struct) {
        return struct.get(reallocate$LAYOUT, reallocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GLFWreallocatefun reallocate
     * }
     */
    public static void reallocate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reallocate$LAYOUT, reallocate$OFFSET, fieldValue);
    }

    private static final AddressLayout deallocate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("deallocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GLFWdeallocatefun deallocate
     * }
     */
    public static final AddressLayout deallocate$layout() {
        return deallocate$LAYOUT;
    }

    private static final long deallocate$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GLFWdeallocatefun deallocate
     * }
     */
    public static final long deallocate$offset() {
        return deallocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GLFWdeallocatefun deallocate
     * }
     */
    public static MemorySegment deallocate(MemorySegment struct) {
        return struct.get(deallocate$LAYOUT, deallocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GLFWdeallocatefun deallocate
     * }
     */
    public static void deallocate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(deallocate$LAYOUT, deallocate$OFFSET, fieldValue);
    }

    private static final AddressLayout user$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("user"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *user
     * }
     */
    public static final AddressLayout user$layout() {
        return user$LAYOUT;
    }

    private static final long user$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *user
     * }
     */
    public static final long user$offset() {
        return user$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *user
     * }
     */
    public static MemorySegment user(MemorySegment struct) {
        return struct.get(user$LAYOUT, user$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *user
     * }
     */
    public static void user(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(user$LAYOUT, user$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

